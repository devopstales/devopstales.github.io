<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.145.0">Hugo</generator><title type="html"><![CDATA[Clouds on devopstales]]></title>
    
        <subtitle type="html"><![CDATA[Blog about dev and ops stuff]]></subtitle>
    
    
    
            <link href="https://devopstales.github.io/cloud/" rel="alternate" type="text/html" title="html" />
            <link href="https://devopstales.github.io/cloud/index.xml" rel="alternate" type="application/rss+xml" title="rss" />
            <link href="https://devopstales.github.io/cloud/atom.xml" rel="self" type="application/atom+xml" title="atom" />
    <updated>2025-06-13T12:32:52+00:00</updated>
    
    
    
    
        <id>https://devopstales.github.io/cloud/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Known Issues of Azure Key Vault AKS integration and resolutions]]></title>
            <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-known-issues-and-resolutions/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/custom-ssl-and-dns-on-aks-ingress-controller/?utm_source=atom_feed" rel="related" type="text/html" title="Configure custom SSL and DNS on AKS Ingress Controller" />
                <link href="https://devopstales.github.io/cloud/azure-private-dns-with-aks-ingress-controller/?utm_source=atom_feed" rel="related" type="text/html" title="Use Azure Private DNS with AKS Ingress Controller" />
                <link href="https://devopstales.github.io/cloud/aks-ingress-controller-v2/?utm_source=atom_feed" rel="related" type="text/html" title="Install Nginx Ingress Controller to AKS with application routing add-on" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-csi/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with CSI Driver" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-akv2k8s/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with akv2k8s" />
            
                <id>https://devopstales.github.io/cloud/aks-azure-key-vault-known-issues-and-resolutions/</id>
            
            
            <published>2024-11-27T00:00:00+00:00</published>
            <updated>2024-11-27T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this Post I will show you the know issues of Azure Key Value and AKS intgrations. Then I will show you how to adress them.</p>
<h3 id="integrating-secretproviderclass-in-container-env">Integrating SecretProviderClass in Container env</h3>
<p>AKS does not support using <code>SecretProviderClass</code> directly in a container&rsquo;s <code>env.valueFrom.secretKeyRef</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">SQL_USER_NAME</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">SQL_PASSWORD</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqlpassword</span>
</span></span></code></pre></div><p>To overcome this limitation create a <code>SecretProviderClass</code> with <code>secretObjects</code> under the <code>spec</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">secrets-store.csi.x-k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">SecretProviderClass</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">demo-secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">provider</span>: <span style="color:#ae81ff">azure</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">usePodIdentity</span>: <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># use managed identity</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">useVMManagedIdentity</span>: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># add managed identity id manually</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">userAssignedIdentityID</span>: <span style="color:#e6db74">&#34;$CLIENT_ID&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tenantId</span>: <span style="color:#e6db74">&#34;$AZURE_TENANT_ID&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">keyvaultName</span>: <span style="color:#e6db74">&#34;$KV&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># name and type in keyvault</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">objects</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      array:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqldatabase&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqlusername&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqlpassword&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secretObjects</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Opaque</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># name and key in secret</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqldatabase&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqldatabase</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqlusername&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqlpassword&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqlpassword</span>
</span></span></code></pre></div><p>Ensure that you reference this <code>SecretProviderClass</code> in the <code>volumes</code> and <code>volumeMounts</code> section of the pod&rsquo;s spec. Failure to do so will result in the secret not being created.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">secret-volume</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">mountPath</span>:  <span style="color:#e6db74">&#34;mnt/secret&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">readOnly</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">secret-volume</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">csi</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">secrets-store.csi.k8s.io</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">readOnly</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">volumeAttributes</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">secretProviderClass</span>: <span style="color:#ae81ff">demo-secret</span>
</span></span></code></pre></div><p>Once the pod is created, the actual secret will be generated. You can reference it in the env section of the container. Keep in mind that the secret name is controlled by the <code>secretName</code> field of the <code>secretObject</code>.</p>
<h3 id="uploading-jks-files-to-akv">Uploading JKS files to AKV</h3>
<p>JKS (Java KeyStore) files cannot be uploaded directly to AKV due to their non-UTF-8 format, resulting in errors.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az keyvault secret set --name trust-jks --vault-name $KV --file /tmp/trust.jks
</span></span><span style="display:flex;"><span>Unable to decode file <span style="color:#e6db74">&#39;/tmp/trust.jks&#39;</span> with <span style="color:#e6db74">&#39;utf-8&#39;</span> encoding.
</span></span></code></pre></div><p>To address this issue Convert the JKS file to base64 format using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az keyvault secret set --name trust-jks --vault-name $KV --file /tmp/trust.jks -e base64
</span></span></code></pre></div><p>Create the corresponding <code>SecretProviderClass</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">secrets-store.csi.x-k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">SecretProviderClass</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">jks-certificate</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">provider</span>: <span style="color:#ae81ff">azure</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">usePodIdentity</span>: <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># use managed identity</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">useVMManagedIdentity</span>: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># add managed identity id manually</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">userAssignedIdentityID</span>: <span style="color:#e6db74">&#34;$CLIENT_ID&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tenantId</span>: <span style="color:#e6db74">&#34;$AZURE_TENANT_ID&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">keyvaultName</span>: <span style="color:#e6db74">&#34;$KV&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># name and type in keyvault</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># name and type in keyvault</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">objects</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      array:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;trust-jks&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret</span>
</span></span></code></pre></div><p>Create an <code>initContainer</code> to decrypt the JKS file to the target folder, which will be mounted into the target container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">initContainers</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">certificate-decoder</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">image-can-run-base64</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">command</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">/bin/bash</span>
</span></span><span style="display:flex;"><span>  - -<span style="color:#ae81ff">c</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">cat /tmp/certs/truststore-base64.jks | base64 -d &gt; /app/certs/truststore.jks</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/tmp/certs/truststore-base64.jks</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">jks-certificate</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">subPath</span>: <span style="color:#ae81ff">trust-jks</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/app/certs/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">app-certificates</span>
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="azure" term="azure" label="Azure" />
                             
                                <category scheme="aks" term="aks" label="AKS" />
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Configure custom SSL and DNS on AKS Ingress Controller]]></title>
            <link href="https://devopstales.github.io/cloud/custom-ssl-and-dns-on-aks-ingress-controller/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/azure-private-dns-with-aks-ingress-controller/?utm_source=atom_feed" rel="related" type="text/html" title="Use Azure Private DNS with AKS Ingress Controller" />
                <link href="https://devopstales.github.io/cloud/aks-ingress-controller-v2/?utm_source=atom_feed" rel="related" type="text/html" title="Install Nginx Ingress Controller to AKS with application routing add-on" />
                <link href="https://devopstales.github.io/cloud/aks-ingress-controller/?utm_source=atom_feed" rel="related" type="text/html" title="Install Nginx Ingress Controller to AKS" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-csi/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with CSI Driver" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-akv2k8s/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with akv2k8s" />
            
                <id>https://devopstales.github.io/cloud/custom-ssl-and-dns-on-aks-ingress-controller/</id>
            
            
            <published>2024-07-19T00:00:00+00:00</published>
            <updated>2024-07-19T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can configure custom SSL and DNS on Nginx Ingress Controlle to AKS (Azure Kubernetes Service) Cluster.</p>


<H3>Parts of the AKS series</H3>
<ul>
     <li>Part1: <a href="../../cloud/AKS/">Install AKS Cluster</a></li>
     <li>Part2: <a href="../../cloud/aks-registry/">Integrate AKS with Registry</a></li>
     <li>Part3: <a href="../../cloud/aks-azure-key-vault-akv2k8s/">Azure Key Vault AKS integration with akv2k8s</a>
     <li>Part4: <a href="../../cloud/aks-azure-key-vault-csi/">Azure Key Vault AKS integration with CSI Driver</a>
     <li>Part5: <a href="../../cloud/aks-ingress-controller-v2/">Install Ingress contreoller To AKS</a></li>
     <li>Part6: <a href="../../cloud/azure-private-dns-with-AKS-ingress-controller/">Use Azure Private DNS with AKS Ingress Controller</a></li>
     <li>Part7: <a href="../../cloud/custom-ssl-and-dns-on-AKS-ingress-controller/">Configure custom SSL and DNS on AKS Ingress Controller</a></li>
</ul>

<!---
https://learn.microsoft.com/en-us/azure/aks/app-routing-nginx-prometheus
https://learn.microsoft.com/en-us/azure/aks/keda-about
https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/integrate-keda#scalers
https://learn.microsoft.com/en-us/azure/load-testing/quickstart-create-and-run-load-test
-->


<h3 id="get-aks-credentials">Get AKS credentials</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az login
</span></span><span style="display:flex;"><span>az aks get-credentials --resource-group test-cluster --name test-cluster
</span></span><span style="display:flex;"><span>kubectl get nodes
</span></span></code></pre></div><h3 id="terminate-https-traffic-with-certificates-from-azure-key-vault">Terminate HTTPS traffic with certificates from Azure Key Vault</h3>
<p>Create an Azure Key Vault using the az keyvault create command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az keyvault create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group &lt;ResourceGroupName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--location &lt;Location&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name &lt;KeyVaultName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--enable-rbac-authorization true
</span></span></code></pre></div><p>In this example I will create and export a self-signed SSL certificate, but if you have a valid certificate you can use it directly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>openssl req -new -x509 -nodes -out aks-ingress-tls.crt <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-keyout aks-ingress-tls.key -subj <span style="color:#e6db74">&#34;/CN=&lt;Hostname&gt;&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-addext <span style="color:#e6db74">&#34;subjectAltName=DNS:&lt;Hostname&gt;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>openssl pkcs12 -export -in aks-ingress-tls.crt <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-inkey aks-ingress-tls.key -out aks-ingress-tls.pfx
</span></span></code></pre></div><p>Import certificate into Azure Key Vault</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az keyvault certificate import <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--vault-name &lt;KeyVaultName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name &lt;KeyVaultCertificateName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--file aks-ingress-tls.pfx <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#f92672">[</span>--password &lt;certificate password <span style="color:#66d9ef">if</span> specified&gt;<span style="color:#f92672">]</span>
</span></span></code></pre></div><h3 id="enable-azure-key-vault-integration">Enable Azure Key Vault integration</h3>
<p>As you can see in the <img src="/cloud/aks-azure-key-vault-csi/" alt="previous post"  class="zoomable" /> you can enable Azure Key Vault integration like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>KEYVAULTID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az keyvault show --name &lt;KeyVaultName&gt; --query <span style="color:#e6db74">&#34;id&#34;</span> --output tsv<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>az aks approuting update <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group &lt;ResourceGroupName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name &lt;ClusterName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--enable-kv <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--attach-kv <span style="color:#e6db74">${</span>KEYVAULTID<span style="color:#e6db74">}</span>
</span></span></code></pre></div><h3 id="enable-azure-dns-integration">Enable Azure DNS integration</h3>
<p>As you can see in the <a href="/cloud/azure-private-dns-with-aks-ingress-controller/">previous post</a> you can enable Azure Key Vault integration.</p>
<h3 id="create-the-ingress-that-uses-a-host-name-and-a-certificate-from-azure-key-vault">Create the Ingress that uses a host name and a certificate from Azure Key Vault</h3>
<p>Get the certificate URI to use in the Ingress from Azure Key Vault using the az keyvault certificate show command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az keyvault certificate show <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--vault-name &lt;KeyVaultName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name &lt;KeyVaultCertificateName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--query <span style="color:#e6db74">&#34;id&#34;</span> --output tsv
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.azure.com/tls-cert-keyvault-uri</span>: <span style="color:#ae81ff">&lt;KeyVaultCertificateUri&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aks-helloworld</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">hello-web-app-routing</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassName</span>: <span style="color:#ae81ff">webapprouting.kubernetes.azure.com</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">host</span>: <span style="color:#ae81ff">&lt;Hostname&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aks-helloworld</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">port</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">number</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">pathType</span>: <span style="color:#ae81ff">Prefix</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tls</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">hosts</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">&lt;Hostname&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">keyvault-&lt;your ingress name&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f ingress.yaml -n hello-web-app-routing
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kubectl get ingress -n hello-web-app-routing
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME             CLASS                                HOSTS               ADDRESS       PORTS     AGE
</span></span><span style="display:flex;"><span>aks-helloworld   webapprouting.kubernetes.azure.com   myapp.contoso.com   20.51.92.19   80, <span style="color:#ae81ff">443</span>   4m
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="azure" term="azure" label="Azure" />
                             
                                <category scheme="aks" term="aks" label="AKS" />
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Use Azure Private DNS with AKS Ingress Controller]]></title>
            <link href="https://devopstales.github.io/cloud/azure-private-dns-with-aks-ingress-controller/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aks-ingress-controller-v2/?utm_source=atom_feed" rel="related" type="text/html" title="Install Nginx Ingress Controller to AKS with application routing add-on" />
                <link href="https://devopstales.github.io/cloud/aks-ingress-controller/?utm_source=atom_feed" rel="related" type="text/html" title="Install Nginx Ingress Controller to AKS" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-csi/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with CSI Driver" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-akv2k8s/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with akv2k8s" />
                <link href="https://devopstales.github.io/cloud/aks-registry/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Conainer Registry integration for AKS" />
            
                <id>https://devopstales.github.io/cloud/azure-private-dns-with-aks-ingress-controller/</id>
            
            
            <published>2024-07-17T00:00:00+00:00</published>
            <updated>2024-07-17T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can use Azure Private DNS with app routing operator Ingress Controller on AKS (Azure Kubernetes Service) Cluster.</p>


<H3>Parts of the AKS series</H3>
<ul>
     <li>Part1: <a href="../../cloud/AKS/">Install AKS Cluster</a></li>
     <li>Part2: <a href="../../cloud/aks-registry/">Integrate AKS with Registry</a></li>
     <li>Part3: <a href="../../cloud/aks-azure-key-vault-akv2k8s/">Azure Key Vault AKS integration with akv2k8s</a>
     <li>Part4: <a href="../../cloud/aks-azure-key-vault-csi/">Azure Key Vault AKS integration with CSI Driver</a>
     <li>Part5: <a href="../../cloud/aks-ingress-controller-v2/">Install Ingress contreoller To AKS</a></li>
     <li>Part6: <a href="../../cloud/azure-private-dns-with-AKS-ingress-controller/">Use Azure Private DNS with AKS Ingress Controller</a></li>
     <li>Part7: <a href="../../cloud/custom-ssl-and-dns-on-AKS-ingress-controller/">Configure custom SSL and DNS on AKS Ingress Controller</a></li>
</ul>

<!---
https://learn.microsoft.com/en-us/azure/aks/app-routing-nginx-prometheus
https://learn.microsoft.com/en-us/azure/aks/keda-about
https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/integrate-keda#scalers
https://learn.microsoft.com/en-us/azure/load-testing/quickstart-create-and-run-load-test
-->


<h3 id="get-aks-credentials">Get AKS credentials</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az login
</span></span><span style="display:flex;"><span>az aks get-credentials --resource-group test-cluster --name test-cluster
</span></span><span style="display:flex;"><span>kubectl get nodes
</span></span></code></pre></div><h3 id="create-an-azure-private-dns-zone">Create an Azure private DNS zone</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az network private-dns zone create --resource-group myResourceGoup --name private.contoso.com
</span></span></code></pre></div><p>To publish a private DNS zone to your virtual network, you need to specify a list of virtual networks that are allowed to resolve records within the zone. These are called <code>virtual network links</code>. So we are going to create a separete network for this (you can use an existing one) and then linke it to the DNS zone.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az network vnet create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name myAzureVNet <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group myResourceGroup <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--location eastus <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--address-prefix 10.2.0.0/16 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--subnet-name mysubnet <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--subnet-prefixes 10.2.0.0/24
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>az network private-dns link vnet create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group myResourceGroup <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name myDNSLink <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--zone-name private.contoso.com <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--virtual-network myAzureVNet <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--registration-enabled false
</span></span></code></pre></div><h3 id="attach-an-azure-private-dns-zone-to-the-application-routing-add-on">Attach an Azure private DNS zone to the application routing add-on</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ZONEID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az network private-dns zone show --resource-group myResourceGroup --name private.contoso.com --query <span style="color:#e6db74">&#34;id&#34;</span> --output tsv<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>az aks approuting zone add <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group myResourceGroup <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name myAKSCluster <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--ids<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>ZONEID<span style="color:#e6db74">}</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--attach-zones
</span></span></code></pre></div><h3 id="create-an-nginx-ingress-controller-with-a-private-ip-address-and-an-internal-load-balancer">Create an NGINX ingress controller with a private IP address and an internal load balancer</h3>
<p>As you can see in the <a href="/cloud/aks-ingress-controller-v2">previous post</a> you can create an Ingress controller with a private IP address and an internal load balancer like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">approuting.kubernetes.azure.com/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">NginxIngressController</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx-internal</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassName</span>: <span style="color:#ae81ff">nginx-internal</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">controllerNamePrefix</span>: <span style="color:#ae81ff">nginx-internal</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">loadBalancerAnnotations</span>: 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">service.beta.kubernetes.io/azure-load-balancer-internal</span>: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f nginx-internal-controller.yaml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kubectl get nginxingresscontroller
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME             INGRESSCLASS                         CONTROLLERNAMEPREFIX   AVAILABLE
</span></span><span style="display:flex;"><span>default          webapprouting.kubernetes.azure.com   nginx                  True
</span></span><span style="display:flex;"><span>nginx-internal   nginx-internal                       nginx-internal         True
</span></span></code></pre></div><h3 id="create-ans-ingress-that-uses-a-host-name-from-azure-private-dns-zone-and-a-private-ip-address">Create ans Ingress that uses a host name from Azure private DNS zone and a private IP address</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aks-helloworld</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">hello-web-app-routing</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassName</span>: <span style="color:#ae81ff">nginx-internal</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">host</span>: <span style="color:#ae81ff">&lt;Hostname&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aks-helloworld</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">port</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">number</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">pathType</span>: <span style="color:#ae81ff">Prefix</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f ingress.yaml -n hello-web-app-routing
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kubectl get ingress -n hello-web-app-routing
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME             CLASS            HOSTS                            ADDRESS      PORTS   AGE
</span></span><span style="display:flex;"><span>aks-helloworld   nginx-internal   helloworld.private.contoso.com   10.224.0.7   <span style="color:#ae81ff">80</span>      98s
</span></span></code></pre></div><h3 id="verify-the-azure-private-dns-zone-was-updated">Verify the Azure private DNS zone was updated</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az network private-dns record-set a list --resource-group myResourceGroup --zone-name private.contoso.com
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>[
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;aRecords&#34;</span>: [
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;ipv4Address&#34;</span>: <span style="color:#e6db74">&#34;10.224.0.7&#34;</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    ],
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;etag&#34;</span>: <span style="color:#e6db74">&#34;188f0ce5-90e3-49e6-a479-9e4053f21965&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;fqdn&#34;</span>: <span style="color:#e6db74">&#34;helloworld.private.contoso.com.&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;/subscriptions/xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx/resourceGroups/foo/providers/Microsoft.Network/privateDnsZones/private.contoso.com/A/helloworld&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;isAutoRegistered&#34;</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;helloworld&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;resourceGroup&#34;</span>: <span style="color:#e6db74">&#34;foo&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;ttl&#34;</span>: <span style="color:#ae81ff">300</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;Microsoft.Network/privateDnsZones/A&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="azure" term="azure" label="Azure" />
                             
                                <category scheme="aks" term="aks" label="AKS" />
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Install Nginx Ingress Controller to AKS with application routing add-on]]></title>
            <link href="https://devopstales.github.io/cloud/aks-ingress-controller-v2/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aks-ingress-controller/?utm_source=atom_feed" rel="related" type="text/html" title="Install Nginx Ingress Controller to AKS" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-csi/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with CSI Driver" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-akv2k8s/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with akv2k8s" />
                <link href="https://devopstales.github.io/cloud/aks-registry/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Conainer Registry integration for AKS" />
                <link href="https://devopstales.github.io/cloud/aks/?utm_source=atom_feed" rel="related" type="text/html" title="Install AKS Cluster" />
            
                <id>https://devopstales.github.io/cloud/aks-ingress-controller-v2/</id>
            
            
            <published>2024-07-15T00:00:00+00:00</published>
            <updated>2024-07-15T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can install Inginx Ingress Controller to a AKS (Azure Kubernetes Service) Cluster with aks-app-routing-operator.</p>


<H3>Parts of the AKS series</H3>
<ul>
     <li>Part1: <a href="../../cloud/AKS/">Install AKS Cluster</a></li>
     <li>Part2: <a href="../../cloud/aks-registry/">Integrate AKS with Registry</a></li>
     <li>Part3: <a href="../../cloud/aks-azure-key-vault-akv2k8s/">Azure Key Vault AKS integration with akv2k8s</a>
     <li>Part4: <a href="../../cloud/aks-azure-key-vault-csi/">Azure Key Vault AKS integration with CSI Driver</a>
     <li>Part5: <a href="../../cloud/aks-ingress-controller-v2/">Install Ingress contreoller To AKS</a></li>
     <li>Part6: <a href="../../cloud/azure-private-dns-with-AKS-ingress-controller/">Use Azure Private DNS with AKS Ingress Controller</a></li>
     <li>Part7: <a href="../../cloud/custom-ssl-and-dns-on-AKS-ingress-controller/">Configure custom SSL and DNS on AKS Ingress Controller</a></li>
</ul>

<!---
https://learn.microsoft.com/en-us/azure/aks/app-routing-nginx-prometheus
https://learn.microsoft.com/en-us/azure/aks/keda-about
https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/integrate-keda#scalers
https://learn.microsoft.com/en-us/azure/load-testing/quickstart-create-and-run-load-test
-->


<p>Azure created it own operator for managing Nginx Ingress Controller creation called <code>aks-app-routing-operator</code>. It is integrated with Azure so you didn&rsquo;t need to install it with helm, and can be used with Other Azure services for DNS management and certificate generation.</p>
<h3 id="get-aks-credentials">Get AKS credentials</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az login
</span></span><span style="display:flex;"><span>az aks get-credentials --resource-group test-cluster --name test-cluster
</span></span><span style="display:flex;"><span>kubectl get nodes
</span></span></code></pre></div><h3 id="enable-aks-app-routing-operator-on-aks-cluster">Enable aks-app-routing-operator on AKS Cluster</h3>
<p>Enable on New Cluster</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az aks create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group &lt;ResourceGroupName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name &lt;ClusterName&gt; --location &lt;Location&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--enable-app-routing --generate-ssh-keys
</span></span></code></pre></div><p>Enable on Existing Cluster</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># az aks approuting enable</span>
</span></span><span style="display:flex;"><span>az aks approuting enable --resource-group &lt;ResourceGroupName&gt; --name &lt;ClusterName&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># az aks enable-addons</span>
</span></span><span style="display:flex;"><span>az aks enable-addons --resource-group &lt;ResourceGroupName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name &lt;ClusterName&gt; --addons http_application_routing
</span></span></code></pre></div><h3 id="use-ingress-controller-with-a-public-ip-address">Use Ingress Controller with a public ip address</h3>
<p>The application routing add-on creates an Ingress class on the cluster named webapprouting.kubernetes.azure.com. When you create an Ingress object with this class, it activates the add-on.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aks-helloworld</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">hello-web-app-routing</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassName</span>: <span style="color:#ae81ff">webapprouting.kubernetes.azure.com</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">host</span>: <span style="color:#ae81ff">&lt;Hostname&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aks-helloworld</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">port</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">number</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">pathType</span>: <span style="color:#ae81ff">Prefix</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f ingress.yaml -n hello-web-app-routing
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kubectl get ingress -n hello-web-app-routing
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME             CLASS                                HOSTS               ADDRESS       PORTS     AGE
</span></span><span style="display:flex;"><span>aks-helloworld   webapprouting.kubernetes.azure.com   myapp.contoso.com   20.51.92.19   80, <span style="color:#ae81ff">443</span>   4m
</span></span></code></pre></div><h3 id="configure-custom-ingress-controller-configurations">Configure custom ingress controller configurations</h3>
<p>When you enable the application routing add-on with NGINX, it creates an ingress controller called <code>default</code> in the <code>app-routing-namespace</code> configured with a public facing Azure load balancer. That ingress controller uses an ingress class name of <code>webapprouting.kubernetes.azure.com</code>.</p>
<p>Create another public facing NGINX ingress controller</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">approuting.kubernetes.azure.com/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">NginxIngressController</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx-public</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassName</span>: <span style="color:#ae81ff">nginx-public</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">controllerNamePrefix</span>: <span style="color:#ae81ff">nginx-public</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f nginx-public-controller.yaml
</span></span></code></pre></div><h3 id="create-an-internal-nginx-ingress-controller-with-a-private-ip-address">Create an internal NGINX ingress controller with a private IP address</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">approuting.kubernetes.azure.com/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">NginxIngressController</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx-internal</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassName</span>: <span style="color:#ae81ff">nginx-internal</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">controllerNamePrefix</span>: <span style="color:#ae81ff">nginx-internal</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">loadBalancerAnnotations</span>: 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">service.beta.kubernetes.io/azure-load-balancer-internal</span>: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f nginx-internal-controller.yaml
</span></span></code></pre></div><h3 id="create-an-nginx-ingress-controller-with-a-static-ip-address">Create an NGINX ingress controller with a static IP address</h3>
<p>To create an NGINX ingress controller with a static IP address on the Azure Load Balancer:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az network public-ip create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--location &lt;REGION_NAME&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group &lt;RESOURCE_GROUP_NAME&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name &lt;IP_NAME&gt; --sku Standard <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--allocation-method static <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--query publicIp.ipAddress -o tsv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 51.105.230.165</span>
</span></span></code></pre></div><p>Ensure the cluster identity used by the AKS cluster has delegated permissions to the public IP&rsquo;s resource group:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>CLIENT_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az aks show --name &lt;ClusterName&gt; --resource-group &lt;ClusterResourceGroup&gt; --query identity.principalId -o tsv<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>RG_SCOPE<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az group show --name myNetworkResourceGroup --query id -o tsv<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>az role assignment create --assignee <span style="color:#e6db74">${</span>CLIENT_ID<span style="color:#e6db74">}</span> --role <span style="color:#e6db74">&#34;Network Contributor&#34;</span> --scope <span style="color:#e6db74">${</span>RG_SCOPE<span style="color:#e6db74">}</span>
</span></span></code></pre></div><p>Create an ingress controller:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">approuting.kubernetes.azure.com/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">NginxIngressController</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx-static</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassName</span>: <span style="color:#ae81ff">nginx-static</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">controllerNamePrefix</span>: <span style="color:#ae81ff">nginx-static</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">loadBalancerAnnotations</span>: 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">service.beta.kubernetes.io/azure-pip-name</span>: <span style="color:#e6db74">&#34;&lt;IP_NAME&gt;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">service.beta.kubernetes.io/azure-load-balancer-resource-group</span>: <span style="color:#e6db74">&#34;&lt;RESOURCE_GROUP_NAME&gt;&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f nginx-staticip-controller.yaml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kubectl get nginxingresscontroller -n &lt;IngressControllerName&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME           INGRESSCLASS   CONTROLLERNAMEPREFIX   AVAILABLE
</span></span><span style="display:flex;"><span>nginx-public   nginx-public   nginx                  True
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kubectl get nginxingresscontroller -n &lt;IngressControllerName&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{range .items[*].status.conditions[*]}{.lastTransitionTime}{&#34;\t&#34;}{.status}{&#34;\t&#34;}{.type}{&#34;\t&#34;}{.message}{&#34;\n&#34;}{end}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>2023-11-29T19:59:24Z    True    IngressClassReady       Ingress Class is up-to-date
</span></span><span style="display:flex;"><span>2023-11-29T19:59:50Z    True    Available               Controller Deployment has minimum availability and IngressClass is up-to-date
</span></span><span style="display:flex;"><span>2023-11-29T19:59:50Z    True    ControllerAvailable     Controller Deployment is available
</span></span><span style="display:flex;"><span>2023-11-29T19:59:25Z    True    Progressing             Controller Deployment has successfully progressed
</span></span></code></pre></div><p>Use the ingress controller in an ingress:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aks-helloworld</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">hello-web-app-routing</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassName</span>: <span style="color:#ae81ff">&lt;IngressClassName&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">host</span>: <span style="color:#ae81ff">&lt;Hostname&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aks-helloworld</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">port</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">number</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">pathType</span>: <span style="color:#ae81ff">Prefix</span>
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="azure" term="azure" label="Azure" />
                             
                                <category scheme="aks" term="aks" label="AKS" />
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Install Ingress to GKE]]></title>
            <link href="https://devopstales.github.io/cloud/gke-ingress-controller/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-csi/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with CSI Driver" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-akv2k8s/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with akv2k8s" />
                <link href="https://devopstales.github.io/cloud/gke-gitlab-terraform/?utm_source=atom_feed" rel="related" type="text/html" title="Create K8S cluster with Terraform and GitlabCI" />
                <link href="https://devopstales.github.io/cloud/gke-egress/?utm_source=atom_feed" rel="related" type="text/html" title="GKE cluster’s egress traffic via Cloud NAT" />
                <link href="https://devopstales.github.io/cloud/aks-registry/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Conainer Registry integration for AKS" />
            
                <id>https://devopstales.github.io/cloud/gke-ingress-controller/</id>
            
            
            <published>2023-09-06T00:00:00+00:00</published>
            <updated>2023-09-06T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can Install Ingress to GKE (Google Kubernetes Engine) Cluster.</p>
<p>The default Nginx Ingress creates a Network Load balancer. In order to set up an HTTP/HTTPS Load balancer with Nginx ingress, we need to change the type: LoadBalancer on the Nginx Ingress Controller service to ClusterIP instead and add the NEG annotation to it. We will manually create an HTTP(S) LoadBalancer and bind it to the <code>ingress-nginx-controller</code> through its NEG annotation.  This binding will happen later when we set our Nginx Ingress Controller deployment as the Backend Service of our HTTPS LoadBalancer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano values.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">controller</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">ClusterIP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">cloud.google.com/neg</span>: <span style="color:#e6db74">&#39;{&#34;exposed_ports&#34;: {&#34;80&#34;:{&#34;name&#34;: &#34;ingress-nginx-80-neg-http&#34;}}}&#39;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
</span></span><span style="display:flex;"><span>helm repo update
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>helm upgrade ingress-nginx ingress-nginx <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--install -f values.yaml <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--repo https://kubernetes.github.io/ingress-nginx <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--namespace ingress-nginx --create-namespace
</span></span></code></pre></div><p>Now we can see in the Google cloud console that our NEG is created successfully.</p>
<p><img src="/img/incude/GKE-ingress-neg.webp" alt="NEG Config"  class="zoomable" /></p>
<p>Let’s create the HTTP/HTTPS Loadbalancer &amp; add NEG in the backend of the load balancer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create an Static IP Address via using this command</span>
</span></span><span style="display:flex;"><span>gcloud compute addresses create loadbalancer-ip-1 --global --ip-version IPV4
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a firewall rule allowing the L7 Https Loadbalencer to access our cluster</span>
</span></span><span style="display:flex;"><span>gcloud compute firewall-rules create allow-tcp-loadbalancer <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --allow tcp:80 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --source-ranges 130.211.0.0/22,35.191.0.0/16 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --network default 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#Create a Health Check for Backend Service</span>
</span></span><span style="display:flex;"><span>gcloud compute health-checks create http lb-nginx-health-check <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --port <span style="color:#ae81ff">80</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --check-interval <span style="color:#ae81ff">60</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --unhealthy-threshold <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --healthy-threshold <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --timeout <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --request-path /healthz
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a Backend Service which is used to inform the LoadBalancer how to connect and distribute trafic to the pods.</span>
</span></span><span style="display:flex;"><span>gcloud compute backend-services create lb-backend-service <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --load-balancing-scheme<span style="color:#f92672">=</span>EXTERNAL <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --protocol<span style="color:#f92672">=</span>HTTP <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --port-name<span style="color:#f92672">=</span>http <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --health-checks<span style="color:#f92672">=</span>lb-nginx-health-check <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --global  
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Now it&#39;s the time we add the Nginx NEG service (the one annotated earlier) to the back end service created on the previous step:</span>
</span></span><span style="display:flex;"><span>gcloud compute backend-services add-backend lb-backend-service <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --network-endpoint-group<span style="color:#f92672">=</span>ingress-nginx-80-neg-http <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --network-endpoint-group-zone<span style="color:#f92672">=</span>us-central1-c <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --balancing-mode<span style="color:#f92672">=</span>RATE <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --capacity-scaler<span style="color:#f92672">=</span>1.0 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --max-rate-per-endpoint<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --global
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the load balancer itself (URL MAPS)</span>
</span></span><span style="display:flex;"><span>gcloud compute url-maps create nginx-public-loadbalancer <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --default-service lb-backend-service
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a target HTTP proxy to route requests to your URL map.</span>
</span></span><span style="display:flex;"><span>  gcloud compute target-http-proxies create http-lb-proxy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>      --url-map<span style="color:#f92672">=</span>nginx-public-loadbalancer
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a global forwarding rule to route incoming requests to the proxy</span>
</span></span><span style="display:flex;"><span>gcloud compute forwarding-rules create forwarding-rule-01 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>      --load-balancing-scheme<span style="color:#f92672">=</span>EXTERNAL <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>      --address<span style="color:#f92672">=</span>loadbalancer-ip-1 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>      --global <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>      --target-http-proxy<span style="color:#f92672">=</span>http-lb-proxy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>      --ports<span style="color:#f92672">=</span><span style="color:#ae81ff">80</span>
</span></span></code></pre></div><p><img src="/img/incude/GKE-ingress-neg.webp" alt="LoadBalancer Config"  class="zoomable" /></p>
<p>Let’s deploy Sample httpd webserver to test if our load balancer is working as expected.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano httpd.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">httpd-deployment</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">httpd</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">matchLabels</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">app</span>: <span style="color:#ae81ff">httpd</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">app</span>: <span style="color:#ae81ff">httpd</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">httpd</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">httpd</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">httpd-service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">httpd</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">port</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">testing-ingress-01</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassName</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">pathType</span>: <span style="color:#ae81ff">Prefix</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">httpd-service</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">port</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">number</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f httpd.yaml
</span></span></code></pre></div><h3 id="create-an-ingress-controller-to-an-internal-virtual-network-in">Create an ingress controller to an internal virtual network in</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano values.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">controller</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">ClusterIP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">cloud.google.com/neg</span>: <span style="color:#e6db74">&#39;{&#34;exposed_ports&#34;: {&#34;80&#34;:{&#34;name&#34;: &#34;ingress-nginx-internal-80-neg-http&#34;}}}&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">electionID</span>: <span style="color:#ae81ff">ingress-controller-leader</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassResource</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name: internal-nginx  # default</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">default</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">controllerValue</span>: <span style="color:#e6db74">&#34;k8s.io/internal-ingress-nginx&#34;</span>  <span style="color:#75715e"># default: k8s.io/ingress-nginx</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm upgrade ingress-nginx-internal ingress-nginx <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--install -f values.yaml  <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--repo https://kubernetes.github.io/ingress-nginx <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--namespace ingress-nginx-internal --create-namespace
</span></span></code></pre></div><p>Let’s create a regional private HTTP/HTTPS Loadbalancer &amp; add NEG in the backend of the load balancer we need a proxy-only subnet for creating a regional private HTTP/HTTPS load balancer.</p>
<p>Create a proxy-only subnet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gcloud compute networks subnets create proxy-only-subnet-01 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --purpose<span style="color:#f92672">=</span>REGIONAL_MANAGED_PROXY <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --role<span style="color:#f92672">=</span>ACTIVE <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region<span style="color:#f92672">=</span>us-central1 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --network<span style="color:#f92672">=</span>default <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --range<span style="color:#f92672">=</span>10.129.0.0/23
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create an Static Private IP Address </span>
</span></span><span style="display:flex;"><span>gcloud compute addresses create lb-ip-01 --region us-central1 --subnet default
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the fw-allow-health-check rule to allow Google Cloud health checks. This example allows all TCP traffic from health check probers.    </span>
</span></span><span style="display:flex;"><span>gcloud compute firewall-rules create fw-allow-health-check-01 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --network<span style="color:#f92672">=</span>default <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --action<span style="color:#f92672">=</span>allow <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --direction<span style="color:#f92672">=</span>ingress <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --source-ranges<span style="color:#f92672">=</span>130.211.0.0/22,35.191.0.0/16 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --rules<span style="color:#f92672">=</span>tcp
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the fw-allow-proxies rule to allow the regional external HTTP(S) load balancer&#39;s proxies to connect to your backends. Set source-ranges to the allocated ranges of your proxy-only subnet, for example, 10.129.0.0/23.</span>
</span></span><span style="display:flex;"><span>gcloud compute firewall-rules create fw-allow-proxies-01 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --network<span style="color:#f92672">=</span>default <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --action<span style="color:#f92672">=</span>allow <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --direction<span style="color:#f92672">=</span>ingress <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --source-ranges<span style="color:#f92672">=</span>10.129.0.0/23 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --target-tags<span style="color:#f92672">=</span>load-balanced-backend <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --rules<span style="color:#f92672">=</span>tcp:80,tcp:443,tcp:8080
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a Health Check for Backend Service</span>
</span></span><span style="display:flex;"><span>gcloud compute health-checks create http nginx-internal-lb-health-check <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --port <span style="color:#ae81ff">80</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --check-interval <span style="color:#ae81ff">60</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --unhealthy-threshold <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --healthy-threshold <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --timeout <span style="color:#ae81ff">5</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region<span style="color:#f92672">=</span>us-central1 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --request-path /healthz 
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the backend service for the lb </span>
</span></span><span style="display:flex;"><span>gcloud compute backend-services create internal-lb-backend-service <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --load-balancing-scheme<span style="color:#f92672">=</span>INTERNAL_MANAGED <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --protocol<span style="color:#f92672">=</span>HTTP <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --health-checks<span style="color:#f92672">=</span>nginx-internal-lb-health-check <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --health-checks-region<span style="color:#f92672">=</span>us-central1 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region<span style="color:#f92672">=</span>us-central1
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add the backend to backend service   </span>
</span></span><span style="display:flex;"><span>gcloud compute backend-services add-backend internal-lb-backend-service <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --balancing-mode<span style="color:#f92672">=</span>RATE <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --network-endpoint-group<span style="color:#f92672">=</span>ingress-nginx-internal-80-neg-http <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --network-endpoint-group-zone<span style="color:#f92672">=</span>us-central1-c <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --capacity-scaler<span style="color:#f92672">=</span>1.0 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --max-rate-per-endpoint<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region<span style="color:#f92672">=</span>us-central1
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the URL map</span>
</span></span><span style="display:flex;"><span>gcloud compute url-maps create internal-nginx-lb-01 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --default-service<span style="color:#f92672">=</span>internal-lb-backend-service <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region<span style="color:#f92672">=</span>us-central1
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the target proxy</span>
</span></span><span style="display:flex;"><span>gcloud compute target-http-proxies create target-http-proxy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --url-map<span style="color:#f92672">=</span>internal-nginx-lb-01 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --url-map-region<span style="color:#f92672">=</span>us-central1 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region<span style="color:#f92672">=</span>us-central1
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the forwarding rule.  </span>
</span></span><span style="display:flex;"><span>gcloud compute forwarding-rules create internal-forwarding-01 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --load-balancing-scheme<span style="color:#f92672">=</span>INTERNAL_MANAGED <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --network<span style="color:#f92672">=</span>default <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --subnet<span style="color:#f92672">=</span>default <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --address<span style="color:#f92672">=</span>lb-ip-01 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --ports<span style="color:#f92672">=</span><span style="color:#ae81ff">80</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --region<span style="color:#f92672">=</span>us-central1 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --target-http-proxy<span style="color:#f92672">=</span>target-http-proxy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --target-http-proxy-region<span style="color:#f92672">=</span>us-central1
</span></span></code></pre></div><p>Let’s deploy Sample Hello-Worldapp to test if our LB is working fine or not?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano test.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">test-deployment</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">frontend</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">matchLabels</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">app</span>: <span style="color:#ae81ff">frontend</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">app</span>: <span style="color:#ae81ff">frontend</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">frontend</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">us-docker.pkg.dev/google-samples/containers/gke/hello-app:1.0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">test-service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">frontend</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">port</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">testing-internal-ingress-01</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingressClassName</span>: <span style="color:#ae81ff">internal-nginx</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">pathType</span>: <span style="color:#ae81ff">Prefix</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">test-service</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">port</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">number</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f test.yaml
</span></span><span style="display:flex;"><span>kubectl get ingress testing-internal-ingress-01
</span></span></code></pre></div><p>Our setup is successfully done. So we can access this application from the same network itself as the load balancer is private, let’s create one private vm and access the app from this.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gcloud compute instances create testing-vm-01 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --project<span style="color:#f92672">=</span>your-project-id <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --zone<span style="color:#f92672">=</span>us-central1-c <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --machine-type<span style="color:#f92672">=</span>e2-medium <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --network-interface<span style="color:#f92672">=</span>subnet<span style="color:#f92672">=</span>default,no-address <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --maintenance-policy<span style="color:#f92672">=</span>MIGRATE <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --provisioning-model<span style="color:#f92672">=</span>STANDARD <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --service-account<span style="color:#f92672">=</span>serviceaccount-compute@developer.gserviceaccount.com <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --scopes<span style="color:#f92672">=</span>https://www.googleapis.com/auth/cloud-platform <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --create-disk<span style="color:#f92672">=</span>auto-delete<span style="color:#f92672">=</span>yes,boot<span style="color:#f92672">=</span>yes,device-name<span style="color:#f92672">=</span>testing-vm-01,image<span style="color:#f92672">=</span>projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20230324,mode<span style="color:#f92672">=</span>rw,size<span style="color:#f92672">=</span>10,type<span style="color:#f92672">=</span>projects/your-project/zones/us-central1-c/diskTypes/pd-balanced <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --no-shielded-secure-boot <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --shielded-vtpm <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --shielded-integrity-monitoring <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --labels<span style="color:#f92672">=</span>ec-src<span style="color:#f92672">=</span>vm_add-gcloud <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --reservation-affinity<span style="color:#f92672">=</span>any
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gcloud compute ssh --zone <span style="color:#e6db74">&#34;us-central1-c&#34;</span> <span style="color:#e6db74">&#34;testing-vm-01&#34;</span>  <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--tunnel-through-iap --project <span style="color:#e6db74">&#34;your-project&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>curl -v http://loadbalancer_ip/
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="gcp" term="gcp" label="GCP" />
                             
                                <category scheme="gke" term="gke" label="GKE" />
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Create VM in Azure with Terraform]]></title>
            <link href="https://devopstales.github.io/cloud/azure-terraform/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/proxmox-terraform/?utm_source=atom_feed" rel="related" type="text/html" title="Create Proxmox VM with Terraform" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-csi/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with CSI Driver" />
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-akv2k8s/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with akv2k8s" />
                <link href="https://devopstales.github.io/cloud/gke-gitlab-terraform/?utm_source=atom_feed" rel="related" type="text/html" title="Create K8S cluster with Terraform and GitlabCI" />
                <link href="https://devopstales.github.io/cloud/azure-dc-deploy/?utm_source=atom_feed" rel="related" type="text/html" title="How to deploy a Domain Controller on Microsoft Azure" />
            
                <id>https://devopstales.github.io/cloud/azure-terraform/</id>
            
            
            <published>2023-05-03T00:00:00+00:00</published>
            <updated>2023-05-03T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how how you can create a VM in Azure with Terraform.</p>
<p>With Azure we can use Azure blob storage as a shared storage for the Terraform states. So firs we need to create a storage account for this purpose:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az group create --name tf-state-rg <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --location westeurope
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export STORAGE_ACCOUNT_NAME<span style="color:#f92672">=</span>tfstatesa<span style="color:#66d9ef">$(</span>dd bs<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span> count<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> <span style="color:#66d9ef">if</span><span style="color:#f92672">=</span>/dev/urandom 2&gt;/dev/null | xxd -p<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo $STORAGE_ACCOUNT_NAME
</span></span><span style="display:flex;"><span>tfstatesa273b9cdf
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>az storage account create --name $STORAGE_ACCOUNT_NAME <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --location westeurope <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --resource-group tf-state-rg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>az storage container create --account-name $STORAGE_ACCOUNT_NAME <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --name tfstate <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --public-access off
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>az storage account key list --resource-group tf-state-rg --account-name $STORAGE_ACCOUNT_NAME
</span></span></code></pre></div><p>Create provider config:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">nano</span> <span style="color:#960050;background-color:#1e0010">providers.tf</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">required_version</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;&gt;=0.12&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">required_providers</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">azurerm</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">source</span>  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;hashicorp/azurerm&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">version</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;~&gt;2.0&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">backend</span> <span style="color:#e6db74">&#34;azurerm&#34;</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">resource_group_name</span>  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;tf-state-rg&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">storage_account_name</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;tfstatesa273b9cdf&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">container_name</span>       <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;tfstate&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">key</span>                  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;terraform.tfstate&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">provider</span> <span style="color:#e6db74">&#34;azurerm&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">features</span> <span style="color:#960050;background-color:#1e0010">{</span>}
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div><p>Create output config:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">nano</span> <span style="color:#960050;background-color:#1e0010">outputs.tf</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">output</span> <span style="color:#e6db74">&#34;resource_group_name&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">value</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.name</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">output</span> <span style="color:#e6db74">&#34;public_ip_address&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">value</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_linux_virtual_machine.my_terraform_vm.public_ip_address</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Create variable config:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">nano</span> <span style="color:#960050;background-color:#1e0010">variables.tf</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">variable</span> <span style="color:#e6db74">&#34;resource_group_location&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">type</span>        <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">default</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;westeurope&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">description</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;Location of the resource group.&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">variable</span> <span style="color:#e6db74">&#34;resource_group_name&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">type</span>        <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">default</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;egis-terraform-demo&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">description</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;Name of the resource group.&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">variable</span> <span style="color:#e6db74">&#34;ssh_key&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">default</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABA...&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Create the main Terraform config file vit the resource definitions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">nano</span> <span style="color:#960050;background-color:#1e0010">main.tf</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;azurerm_resource_group&#34;</span> <span style="color:#e6db74">&#34;rg&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">location</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">var.resource_group_location</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">name</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">var.resource_group_name</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">Create</span> <span style="color:#960050;background-color:#1e0010">virtual</span> <span style="color:#960050;background-color:#1e0010">network</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;azurerm_virtual_network&#34;</span> <span style="color:#e6db74">&#34;my_terraform_network&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">name</span>                <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;myVnet&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">address_space</span>       <span style="color:#960050;background-color:#1e0010">=</span> [<span style="color:#e6db74">&#34;10.0.0.0/16&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">location</span>            <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.location</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">resource_group_name</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.name</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">Create</span> <span style="color:#960050;background-color:#1e0010">subnet</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;azurerm_subnet&#34;</span> <span style="color:#e6db74">&#34;my_terraform_subnet&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">name</span>                 <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;mySubnet&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">resource_group_name</span>  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">virtual_network_name</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_virtual_network.my_terraform_network.name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">address_prefixes</span>     <span style="color:#960050;background-color:#1e0010">=</span> [<span style="color:#e6db74">&#34;10.0.1.0/24&#34;</span>]
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">Create</span> <span style="color:#960050;background-color:#1e0010">public</span> <span style="color:#960050;background-color:#1e0010">IPs</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;azurerm_public_ip&#34;</span> <span style="color:#e6db74">&#34;my_terraform_public_ip&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">name</span>                <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;myPublicIP&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">location</span>            <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.location</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">resource_group_name</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">allocation_method</span>   <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;Dynamic&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">Create</span> <span style="color:#960050;background-color:#1e0010">Network</span> <span style="color:#960050;background-color:#1e0010">Security</span> <span style="color:#960050;background-color:#1e0010">Group</span> <span style="color:#960050;background-color:#1e0010">and</span> <span style="color:#960050;background-color:#1e0010">rule</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;azurerm_network_security_group&#34;</span> <span style="color:#e6db74">&#34;my_terraform_nsg&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">name</span>                <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;myNetworkSecurityGroup&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">location</span>            <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.location</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">resource_group_name</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.name</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">security_rule</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">name</span>                       <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;SSH&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">priority</span>                   <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">1001</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">direction</span>                  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;Inbound&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">access</span>                     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;Allow&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">protocol</span>                   <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;Tcp&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">source_port_range</span>          <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;*&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">destination_port_range</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;22&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">source_address_prefix</span>      <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;*&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">destination_address_prefix</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;*&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">Create</span> <span style="color:#960050;background-color:#1e0010">network</span> <span style="color:#960050;background-color:#1e0010">interface</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;azurerm_network_interface&#34;</span> <span style="color:#e6db74">&#34;my_terraform_nic&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">name</span>                <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;myNIC&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">location</span>            <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.location</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">resource_group_name</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.name</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">ip_configuration</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">name</span>                          <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;my_nic_configuration&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">subnet_id</span>                     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_subnet.my_terraform_subnet.id</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">private_ip_address_allocation</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;Dynamic&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">public_ip_address_id</span>          <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_public_ip.my_terraform_public_ip.id</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">Connect</span> <span style="color:#960050;background-color:#1e0010">the</span> <span style="color:#960050;background-color:#1e0010">security</span> <span style="color:#960050;background-color:#1e0010">group</span> <span style="color:#960050;background-color:#1e0010">to</span> <span style="color:#960050;background-color:#1e0010">the</span> <span style="color:#960050;background-color:#1e0010">network</span> <span style="color:#960050;background-color:#1e0010">interface</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;azurerm_network_interface_security_group_association&#34;</span> <span style="color:#e6db74">&#34;example&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">network_interface_id</span>      <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_network_interface.my_terraform_nic.id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">network_security_group_id</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_network_security_group.my_terraform_nsg.id</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">Generate</span> <span style="color:#960050;background-color:#1e0010">random</span> <span style="color:#960050;background-color:#1e0010">text</span> <span style="color:#960050;background-color:#1e0010">for</span> <span style="color:#960050;background-color:#1e0010">a</span> <span style="color:#960050;background-color:#1e0010">unique</span> <span style="color:#960050;background-color:#1e0010">storage</span> <span style="color:#960050;background-color:#1e0010">account</span> <span style="color:#960050;background-color:#1e0010">name</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;random_id&#34;</span> <span style="color:#e6db74">&#34;random_id&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">keepers</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">Generate</span> <span style="color:#960050;background-color:#1e0010">a</span> <span style="color:#960050;background-color:#1e0010">new</span> <span style="color:#960050;background-color:#1e0010">ID</span> <span style="color:#960050;background-color:#1e0010">only</span> <span style="color:#960050;background-color:#1e0010">when</span> <span style="color:#960050;background-color:#1e0010">a</span> <span style="color:#960050;background-color:#1e0010">new</span> <span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#960050;background-color:#1e0010">group</span> <span style="color:#960050;background-color:#1e0010">is</span> <span style="color:#960050;background-color:#1e0010">defined</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">resource_group</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.name</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">byte_length</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">Create</span> <span style="color:#960050;background-color:#1e0010">storage</span> <span style="color:#960050;background-color:#1e0010">account</span> <span style="color:#960050;background-color:#1e0010">for</span> <span style="color:#960050;background-color:#1e0010">boot</span> <span style="color:#960050;background-color:#1e0010">diagnostics</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;azurerm_storage_account&#34;</span> <span style="color:#e6db74">&#34;my_storage_account&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">name</span>                     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;diag${random_id.random_id.hex}&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">location</span>                 <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.location</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">resource_group_name</span>      <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">account_tier</span>             <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;Standard&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">account_replication_type</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;LRS&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">Create</span> <span style="color:#960050;background-color:#1e0010">virtual</span> <span style="color:#960050;background-color:#1e0010">machine</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;azurerm_linux_virtual_machine&#34;</span> <span style="color:#e6db74">&#34;my_terraform_vm&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">name</span>                  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;myVM&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">location</span>              <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.location</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">resource_group_name</span>   <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_resource_group.rg.name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">network_interface_ids</span> <span style="color:#960050;background-color:#1e0010">=</span> [<span style="color:#960050;background-color:#1e0010">azurerm_network_interface.my_terraform_nic.id</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">size</span>                  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;Standard_DS1_v2&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">os_disk</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">name</span>                 <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;myOsDisk&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">caching</span>              <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;ReadWrite&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">storage_account_type</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;Premium_LRS&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">source_image_reference</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">publisher</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;Canonical&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">offer</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;0001-com-ubuntu-server-jammy&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">sku</span>       <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;22_04-lts-gen2&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">version</span>   <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;latest&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">computer_name</span>                   <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;myvm&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">admin_username</span>                  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;azureuser&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">disable_password_authentication</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">admin_ssh_key</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">username</span>   <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;azureuser&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">public_key</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">var.ssh_key</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">boot_diagnostics</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">storage_account_uri</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">azurerm_storage_account.my_storage_account.primary_blob_endpoint</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now we can create the VM:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># init modules</span>
</span></span><span style="display:flex;"><span>terraform init -upgrade
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># plan creation</span>
</span></span><span style="display:flex;"><span>terraform plan -out main.tfplan
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># apply plan</span>
</span></span><span style="display:flex;"><span>terraform apply main.tfplan
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cleanup</span>
</span></span><span style="display:flex;"><span>terraform plan -destroy -out main.destroy.tfplan
</span></span><span style="display:flex;"><span>terraform apply main.destroy.tfplan
</span></span></code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="terraform" term="terraform" label="terraform" />
                             
                                <category scheme="azure" term="azure" label="Azure" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Create Proxmox VM with Terraform]]></title>
            <link href="https://devopstales.github.io/cloud/proxmox-terraform/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/virtualization/proxmox-pci-passthrough/?utm_source=atom_feed" rel="related" type="text/html" title="Enable Proxmox PCIe Passthrough" />
                <link href="https://devopstales.github.io/cloud/gke-gitlab-terraform/?utm_source=atom_feed" rel="related" type="text/html" title="Create K8S cluster with Terraform and GitlabCI" />
            
                <id>https://devopstales.github.io/cloud/proxmox-terraform/</id>
            
            
            <published>2023-04-20T00:00:00+00:00</published>
            <updated>2023-04-20T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how how you can create a Proxmox VMs with Terraform.</p>
<p>To ease the creation of the VMs in Proxmox I will use predefined VM templates. So our first task is create the template. To do this login to one of the proxmox nodes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># installing libguestfs-tools only required once, prior to first run</span>
</span></span><span style="display:flex;"><span>sudo apt update -y
</span></span><span style="display:flex;"><span>sudo apt install libguestfs-tools -y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># download a debian cloud-init disk image:</span>
</span></span><span style="display:flex;"><span>wget http://cloud.debian.org/images/cloud/bullseye/latest/debian-11-generic-amd64.qcow2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo virt-customize -a debian-11-generic-amd64.qcow2 --install qemu-guest-agent
</span></span><span style="display:flex;"><span>sudo qm create <span style="color:#ae81ff">100200</span> --name <span style="color:#e6db74">&#34;debian11.vm.shiwaforce.com&#34;</span> --memory <span style="color:#ae81ff">2048</span> --cores <span style="color:#ae81ff">2</span> --net0 virtio,bridge<span style="color:#f92672">=</span>vmbr0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo qm importdisk <span style="color:#ae81ff">100200</span> debian-11-generic-amd64.qcow2 zfs-vm-none
</span></span><span style="display:flex;"><span>sudo qm set <span style="color:#ae81ff">100200</span> --scsihw virtio-scsi-pci --scsi0 zfs-vm-none:vm-100200-disk-0
</span></span><span style="display:flex;"><span>sudo qm set <span style="color:#ae81ff">100200</span> --boot c --bootdisk scsi0
</span></span><span style="display:flex;"><span>sudo qm set <span style="color:#ae81ff">100200</span> --ide2 zfs-vm-none:cloudinit
</span></span><span style="display:flex;"><span>sudo qm set <span style="color:#ae81ff">100200</span> --serial0 socket --vga serial0
</span></span><span style="display:flex;"><span>sudo qm set <span style="color:#ae81ff">100200</span> --agent enabled<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>sudo qm template <span style="color:#ae81ff">100200</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rm debian-11-generic-amd64.qcow2
</span></span></code></pre></div><h2 id="determine-authentication-method-use-api-keys">Determine Authentication Method (use API keys)</h2>
<p>The next step is to create a service account in proxmox for authentication and generate an authentication token:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pveum role add TerraformProv -privs <span style="color:#e6db74">&#34;Pool.Allocate VM.Console VM.Allocate VM.Clone VM.Config.CDROM VM.Config.CPU VM.Config.Cloudinit VM.Config.Disk VM.Config.HWType VM.Config.Memory VM.Config.Network VM.Config.Options VM.Monitor VM.Audit VM.PowerMgmt Datastore.AllocateSpace Datastore.Audit&#34;</span>
</span></span><span style="display:flex;"><span>pveum user add tfuser@pve
</span></span><span style="display:flex;"><span>pveum aclmod / -user tfuser@pve -role TerraformProv
</span></span><span style="display:flex;"><span>pveum user token add tfuser@pve terraform --privsep <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Please save the token secret as there isn&#39;t any way to fetch it at a later point.</span>
</span></span></code></pre></div><h2 id="create-teh-terraform-config-files">Create teh Terraform config files</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir terraform
</span></span><span style="display:flex;"><span>cd terraform
</span></span></code></pre></div><p>Create backend config:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">nano</span> <span style="color:#960050;background-color:#1e0010">backend.tf</span> 
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">terraform</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">required_providers</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">proxmox</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">source</span>  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;telmate/proxmox&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">version</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;2.9.11&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">backend</span> <span style="color:#e6db74">&#34;local&#34;</span> {
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">}</span>
</span></span></code></pre></div><p>Create provider config:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">nano</span> <span style="color:#960050;background-color:#1e0010">provider.tf</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">provider</span> <span style="color:#e6db74">&#34;proxmox&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">pm_api_url</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;https://proxmox.mydomain.intra:8006/api2/json&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">api</span> <span style="color:#960050;background-color:#1e0010">token</span> <span style="color:#960050;background-color:#1e0010">id</span> <span style="color:#960050;background-color:#1e0010">is</span> <span style="color:#960050;background-color:#1e0010">in</span> <span style="color:#960050;background-color:#1e0010">the</span> <span style="color:#960050;background-color:#1e0010">form</span> <span style="color:#960050;background-color:#1e0010">of</span>: <span style="color:#960050;background-color:#1e0010">&lt;username&gt;@pam!&lt;tokenId&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">pm_api_token_id</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;tfuser@pve!terraform&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">this</span> <span style="color:#960050;background-color:#1e0010">is</span> <span style="color:#960050;background-color:#1e0010">the</span> <span style="color:#960050;background-color:#1e0010">full</span> <span style="color:#960050;background-color:#1e0010">secret</span> <span style="color:#960050;background-color:#1e0010">wrapped</span> <span style="color:#960050;background-color:#1e0010">in</span> <span style="color:#960050;background-color:#1e0010">quotes.</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">pm_api_token_secret</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">var.PROXMOX_API_SECRET</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">pm_tls_insecure</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">debug</span> <span style="color:#960050;background-color:#1e0010">log</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">#</span>  <span style="color:#960050;background-color:#1e0010">pm_log_enable</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">#</span>  <span style="color:#960050;background-color:#1e0010">pm_log_file</span>   <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;terraform-plugin-proxmox.log&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">#</span>  <span style="color:#960050;background-color:#1e0010">pm_debug</span>      <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">#</span>  <span style="color:#960050;background-color:#1e0010">pm_log_levels</span> <span style="color:#960050;background-color:#1e0010">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">#</span>    <span style="color:#960050;background-color:#1e0010">_default</span>    <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;debug&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">#</span>    <span style="color:#960050;background-color:#1e0010">_capturelog</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">#</span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The auth token will be ised from the <code>PROXMOX_API_SECRET</code> linux environment variable. Now create the terraform variable file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">nano</span> <span style="color:#960050;background-color:#1e0010">vars.tf</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">variable</span> <span style="color:#e6db74">&#34;PROXMOX_API_SECRET&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">type</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">string</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">variable</span> <span style="color:#e6db74">&#34;ssh_key&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">default</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;ssh-rsa AAAAB3NzaC1y...&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">variable</span> <span style="color:#e6db74">&#34;proxmox_host&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">default</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;proxmox&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">variable</span> <span style="color:#e6db74">&#34;template_name&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">default</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;debian11.vm.shiwaforce.com&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Create the main Terraform config file vit the resource definitions:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">touch</span> <span style="color:#960050;background-color:#1e0010">main.tf</span> 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">nano</span> <span style="color:#960050;background-color:#1e0010">k</span><span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">s-master.tf</span> 
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">resource</span> <span style="color:#e6db74">&#34;proxmox_vm_qemu&#34;</span> <span style="color:#e6db74">&#34;k8s-master&#34;</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">count</span>       <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">3</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">name</span>        <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;k8s0${count.index + 1}.mydomain.intra&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">target_node</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">var.proxmox_host</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">vmid</span>        <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;101${count.index + 1}&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">clone</span>       <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">var.template_name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">os_type</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;cloud-init&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">cpu</span>         <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;kvm64&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">cores</span>       <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">sockets</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">memory</span>      <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">6144</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">scsihw</span>      <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;virtio-scsi-pci&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">bootdisk</span>    <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;scsi0&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">disk</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">slot</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">size</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;50G&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">type</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;scsi&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">storage</span>  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;zfs-vm-etc&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">iothread</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">network</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">model</span>     <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#f92672">&#34;virtio&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">bridge</span>    <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;vmbr0&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">tag</span>       <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#ae81ff">101</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">firewall</span>  <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">link_down</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">ipconfig</span><span style="color:#ae81ff">0</span> <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;ip=192.168.10.1${count.index + 1}/22,gw=192.168.10.1&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">ciuser</span>    <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#e6db74">&#34;terraform&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">sshkeys</span>   <span style="color:#960050;background-color:#1e0010">=</span> <span style="color:#960050;background-color:#1e0010">&lt;&lt;EOF</span>
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">$</span>{<span style="color:#960050;background-color:#1e0010">var.ssh_key</span>}
</span></span><span style="display:flex;"><span>  <span style="color:#960050;background-color:#1e0010">EOF</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If you created all the files it looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ..
</span></span><span style="display:flex;"><span>tree .
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>└── terraform
</span></span><span style="display:flex;"><span>    ├── backend.tf
</span></span><span style="display:flex;"><span>    ├── provider.tf
</span></span><span style="display:flex;"><span>    ├── outputs.tf
</span></span><span style="display:flex;"><span>    ├── k8s-master.tf 
</span></span><span style="display:flex;"><span>    └── vars.tf
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> directory, <span style="color:#ae81ff">5</span> files
</span></span></code></pre></div><p>Now we can create the VMs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export PROXMOX_API_SECRET<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;9f881350-175c-4a09-a25c-bce726ada447&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># inicialise the terraform modules</span>
</span></span><span style="display:flex;"><span>terraform init --upgrade
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># generate a terraform plan</span>
</span></span><span style="display:flex;"><span>terraform plan -out k8s-master.tfplan
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># deploym the VMs</span>
</span></span><span style="display:flex;"><span>terraform apply -parallelism<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> -auto-approve k8s-master.tfplan
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cleanup</span>
</span></span><span style="display:flex;"><span>terraform plan -destroy -out k8s-master.destroy.tfplan
</span></span><span style="display:flex;"><span>terraform apply k8s-master.destroy.tfplan
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="terraform" term="terraform" label="terraform" />
                             
                                <category scheme="proxmox" term="proxmox" label="Proxmox" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Azure Key Vault AKS integration with CSI Driver]]></title>
            <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-csi/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-akv2k8s/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Key Vault AKS integration with akv2k8s" />
                <link href="https://devopstales.github.io/cloud/aks-registry/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Conainer Registry integration for AKS" />
                <link href="https://devopstales.github.io/cloud/aks-ingress-controller/?utm_source=atom_feed" rel="related" type="text/html" title="Install Nginx Ingress Controller to AKS" />
                <link href="https://devopstales.github.io/cloud/aks/?utm_source=atom_feed" rel="related" type="text/html" title="Install AKS Cluster" />
                <link href="https://devopstales.github.io/cloud/azure-dc-deploy/?utm_source=atom_feed" rel="related" type="text/html" title="How to deploy a Domain Controller on Microsoft Azure" />
            
                <id>https://devopstales.github.io/cloud/aks-azure-key-vault-csi/</id>
            
            
            <published>2023-03-08T00:00:00+00:00</published>
            <updated>2023-03-08T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this Post I will show you how you can use CSI Driver to mount secrets from Azure Key Vault to AKS.</p>
<h2 id="create-key-vault-and-add-keys">Create key vault and add keys</h2>
<p>First we need to create a key vault</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az aks enable-addons <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--addons<span style="color:#f92672">=</span>azure-keyvault-secrets-provider <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name<span style="color:#f92672">=</span>$CLUSTER <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group<span style="color:#f92672">=</span>$RG
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># create the key vault and turn on Azure RBAC; we will grant a managed identity access to this key vault below</span>
</span></span><span style="display:flex;"><span>az keyvault create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name $KV <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group $RG <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--location westeurope <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--enable-rbac-authorization true
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># get the subscription id</span>
</span></span><span style="display:flex;"><span>SUBSCRIPTION_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az account show --query id -o tsv<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># get your user object id</span>
</span></span><span style="display:flex;"><span>USER_OBJECT_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az ad signed-in-user show --query objectId -o tsv<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># grant yourself access to key vault</span>
</span></span><span style="display:flex;"><span>az role assignment create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--assignee-object-id $USER_OBJECT_ID <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--role <span style="color:#e6db74">&#34;Key Vault Administrator&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--scope /subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG/providers/Microsoft.KeyVault/vaults/$KV
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># add a secret to the key vault</span>
</span></span><span style="display:flex;"><span>az keyvault secret set --vault-name $KV --name $SECRET --value $VALUE
</span></span></code></pre></div><p>Create secret in keyvault:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az keyvault secret set <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--vault-name <span style="color:#e6db74">&#34;</span>$KV<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name <span style="color:#e6db74">&#34;sqldatabase&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--value <span style="color:#e6db74">&#39;kvdemo&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>az keyvault secret set <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--vault-name <span style="color:#e6db74">&#34;</span>$KV<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name <span style="color:#e6db74">&#34;sqlusername&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--value <span style="color:#e6db74">&#39;root&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>az keyvault secret set <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--vault-name <span style="color:#e6db74">&#34;</span>$KV<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name <span style="color:#e6db74">&#34;sqlpassword&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--value <span style="color:#e6db74">&#39;Password1&#39;</span>
</span></span></code></pre></div><h2 id="acces-key-vault-with-system-assigned-managed-identity">Acces key vault with system-assigned managed identity</h2>
<p>If you created your AKS cluster with managed identity you can go to grant access to a managed identity:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># grab the managed identity principalId assuming it is in the default</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># MC_ group for your cluster and resource group</span>
</span></span><span style="display:flex;"><span>IDENTITY_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az identity show -g MC<span style="color:#ae81ff">\_</span>$RG<span style="color:#ae81ff">\_</span>$CLUSTER<span style="color:#ae81ff">\_</span>westeurope --name azurekeyvaultsecretsprovider-$CLUSTER --query principalId -o tsv<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># grant access rights on Key Vault</span>
</span></span><span style="display:flex;"><span>az role assignment create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--assignee-object-id $IDENTITY_ID <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--role <span style="color:#e6db74">&#34;Key Vault Administrator&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--scope /subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG/providers/Microsoft.KeyVault/vaults/$KV
</span></span></code></pre></div><p>If not yet enabled you need to enable system-assigned managed identity on AKS:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az aks update <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group $RG <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name  $CLUSTER <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--enable-managed-identity
</span></span></code></pre></div><p>Create a SecretProviderClass:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>AZURE_TENANT_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az account show --query tenantId -o tsv<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>CLIENT_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az aks show -g $RG -n $CLUSTER --query addonProfiles.azureKeyvaultSecretsProvider.identity.clientId -o tsv<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">secrets-store.csi.x-k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">SecretProviderClass</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">demo-secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">provider</span>: <span style="color:#ae81ff">azure</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">usePodIdentity</span>: <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># use managed identity</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">useVMManagedIdentity</span>: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># add managed identity id manually</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">userAssignedIdentityID</span>: <span style="color:#e6db74">&#34;$CLIENT_ID&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tenantId</span>: <span style="color:#e6db74">&#34;$AZURE_TENANT_ID&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">keyvaultName</span>: <span style="color:#e6db74">&#34;$KV&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># name and type in keyvault</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">objects</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      array:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqldatabase&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqlusername&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqlpassword&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secretObjects</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Opaque</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># name and key in secret</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqldatabase&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqldatabase</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqlusername&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqlpassword&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqlpassword</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><p>Mount the secrets in pods</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">matchLabels</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">app</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">app</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># get as environment variables</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">sqldatabase</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">key</span>:  <span style="color:#ae81ff">sqldatabase</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">key</span>:  <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">sqlpassword</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">key</span>:  <span style="color:#ae81ff">sqlpassword</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># mount as file</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">secret-store</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">mountPath</span>:  <span style="color:#e6db74">&#34;mnt/secret-store&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">readOnly</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># get the SecretProviderClass object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">secret-store</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">csi</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">secrets-store.csi.k8s.io</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">readOnly</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">volumeAttributes</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretProviderClass</span>: <span style="color:#e6db74">&#34;demo-secret&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><h2 id="acces-key-vault-with-service-principal">Acces key vault with service principal</h2>
<p>Create an identity in Azure</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export CLIENT_SECRET<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az ad sp create-for-rbac <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--role Contributor --scopes /subscriptions/$SUBSCRIPTION_ID <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name http://secrets-store-test --query <span style="color:#e6db74">&#39;password&#39;</span> -otsv<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export CLIENT_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az ad sp show --id http://secrets-store-test --query <span style="color:#e6db74">&#39;appId&#39;</span> -otsv<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Provide policy to the identity to access the Azure key vault</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az keyvault set-policy -n $KV --secret-permissions get --spn $CLIENT_ID
</span></span></code></pre></div><p>Create the Kubernetes secret with credentials</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">clientid</span>: <span style="color:#ae81ff">$CLIENT_ID</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">clientsecret</span>: <span style="color:#ae81ff">$CLIENT_SECRET</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Secret</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">secrets-store.csi.k8s.io/used</span>: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">secrets-store-creds</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">type</span>: <span style="color:#ae81ff">Opaque</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><p>Create and apply your own SecretProviderClass object</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">secrets-store.csi.x-k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">SecretProviderClass</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">demo-secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">provider</span>: <span style="color:#ae81ff">azure</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">usePodIdentity</span>: <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">useVMManagedIdentity</span>: <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tenantId</span>: <span style="color:#e6db74">&#34;$AZURE_TENANT_ID&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">keyvaultName</span>: <span style="color:#e6db74">&#34;$KV&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># name and type in keyvault</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">objects</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      array:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqldatabase&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqlusername&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqlpassword&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secretObjects</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Opaque</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># name and key in secret</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqldatabase&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqldatabase</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqlusername&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqlpassword&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqlpassword</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><p>Mount the secrets in pods</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">matchLabels</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">app</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">app</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># get as environment variables</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">sqldatabase</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">key</span>:  <span style="color:#ae81ff">sqldatabase</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">key</span>:  <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">sqlpassword</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">key</span>:  <span style="color:#ae81ff">sqlpassword</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># mount as file</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">secret-store</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">mountPath</span>:  <span style="color:#e6db74">&#34;mnt/secret-store&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">readOnly</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># get the SecretProviderClass object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">secret-store</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">csi</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">secrets-store.csi.k8s.io</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">readOnly</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">volumeAttributes</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretProviderClass</span>: <span style="color:#e6db74">&#34;demo-secret&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Only required when using service principal mode</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">nodePublishSecretRef</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">secrets-store-creds</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><h2 id="acces-key-vault-with-federated-workload-identity">Acces key vault with federated workload identity</h2>
<p>This scanario is similar to the previous one, but instead of using managed identities we use the AKS cluster&rsquo;s workload identity to authenticate. In normal situation the identity is autenticates with a password. Password authentication is not the safest option. Instad we will use a federation to authenticate with OIDC SSO authentication.</p>
<p>Enable OIDC issuer and Workload identity in an existing AKS cluster.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az aks update <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group $RG <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name  $CLUSTER <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--enable-oidc-issuer <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--enable-workload-identity
</span></span></code></pre></div><p>Create a managed identity:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az identity create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name secrets-store-test <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group $RG <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--location $RG_LOCATION <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--subscription $SUBSCRIPTION
</span></span></code></pre></div><p>Get the OIDC issuer url and export it as an environment variable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export AKS_OIDC_ISSUER<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az aks show --name $CLUSTER --resource-group $RG --query <span style="color:#e6db74">&#34;oidcIssuerProfile.issuerUrl&#34;</span> -o tsv<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Export managed identity variable. We will assign this to the AKS service account.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export USER_ASSIGNED_CLIENT_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az identity show --resource-group $RG --name secrets-store-test --query <span style="color:#e6db74">&#39;clientId&#39;</span> -otsv<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>export IDENTITY_TENANT<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az aks show --name $CLUSTER --resource-group $RG<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p>Create AKS service account and we will assign the Managed Identity ClientID to it using <code>azure.workload.identity/client-id</code> annotation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">az aks get-credentials -n $CLUSTER -g $RG</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">azure.workload.identity/client-id</span>: <span style="color:#ae81ff">${USER_ASSIGNED_CLIENT_ID}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">azure.workload.identity/use</span>: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">keyvault-sa</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><p>Create the federated identity credential between the managed identity, service account issuer and subject.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export FEDERATED_IDENTITY_NAME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;aksfederatedidentity&#34;</span> <span style="color:#75715e"># can be changed as needed</span>
</span></span><span style="display:flex;"><span>az identity federated-credential create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name $FEDERATED_IDENTITY_NAME <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--identity-name secrets-store-test <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group $RG <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--issuer <span style="color:#e6db74">${</span>AKS_OIDC_ISSUER<span style="color:#e6db74">}</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--subject system:serviceaccount:default:keyvault-sa
</span></span></code></pre></div><p>Provide policy to the identity to access the Azure key vault</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az keyvault set-policy -n $KV --secret-permissions get --spn $USER_ASSIGNED_CLIENT_ID
</span></span></code></pre></div><p>Create a SecretProviderClass:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>AZURE_TENANT_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>az account show --query tenantId -o tsv<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">secrets-store.csi.x-k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">SecretProviderClass</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">demo-secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">provider</span>: <span style="color:#ae81ff">azure</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># use managed identity</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">useVMManagedIdentity</span>: <span style="color:#e6db74">&#34;false&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">clientID</span>: <span style="color:#e6db74">&#34;$USER_ASSIGNED_CLIENT_ID&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tenantId</span>: <span style="color:#e6db74">&#34;$AZURE_TENANT_ID&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">keyvaultName</span>: <span style="color:#e6db74">&#34;$KV&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># name and type in keyvault</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">objects</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      array:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqldatabase&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqlusername&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - |
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectName: &#34;sqlpassword&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          objectType: secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secretObjects</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Opaque</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># name and key in secret</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqldatabase&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqldatabase</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqlusername&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">objectName</span>: <span style="color:#e6db74">&#34;sqlpassword&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">key</span>: <span style="color:#ae81ff">sqlpassword</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt;EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">matchLabels</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">app</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">app</span>: <span style="color:#ae81ff">secretpods</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">keyvault-sa</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># get as environment variables</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">sqldatabase</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">key</span>:  <span style="color:#ae81ff">sqldatabase</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">key</span>:  <span style="color:#ae81ff">sqlusername</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">sqlpassword</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">databasesecrets</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">key</span>:  <span style="color:#ae81ff">sqlpassword</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># mount as file</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">secret-store</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">mountPath</span>:  <span style="color:#e6db74">&#34;mnt/secret-store&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">readOnly</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># get the SecretProviderClass object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>:  <span style="color:#ae81ff">secret-store</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">csi</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">driver</span>: <span style="color:#ae81ff">secrets-store.csi.k8s.io</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">readOnly</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">volumeAttributes</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">secretProviderClass</span>: <span style="color:#e6db74">&#34;demo-secret&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><h2 id="demo-time">Demo time</h2>
<p>Now we you can werify the secret in the pod:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export POD_NAME<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>kubectl get pods -n default -l <span style="color:#e6db74">&#34;app=secretpods&#34;</span> -o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{.items[0].metadata.name}&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># if this does not work, check the status of the pod</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># if still in ContainerCreating there might be an issue</span>
</span></span><span style="display:flex;"><span>kubectl exec -it $POD_NAME -- sh
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>cd /mnt/secret-store
</span></span><span style="display:flex;"><span>ls
</span></span><span style="display:flex;"><span>sqldatabase  sqlpassword  sqlusername
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the file containing the secret is listed</span>
</span></span><span style="display:flex;"><span>cat sqldatabase
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#75715e"># echo the value of the environment variable</span>
</span></span><span style="display:flex;"><span>echo $sqldatabase
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="azure" term="azure" label="Azure" />
                             
                                <category scheme="aks" term="aks" label="AKS" />
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Azure Key Vault AKS integration with akv2k8s]]></title>
            <link href="https://devopstales.github.io/cloud/aks-azure-key-vault-akv2k8s/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aks-registry/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Conainer Registry integration for AKS" />
                <link href="https://devopstales.github.io/cloud/aks-ingress-controller/?utm_source=atom_feed" rel="related" type="text/html" title="Install Nginx Ingress Controller to AKS" />
                <link href="https://devopstales.github.io/cloud/aks/?utm_source=atom_feed" rel="related" type="text/html" title="Install AKS Cluster" />
                <link href="https://devopstales.github.io/cloud/azure-dc-deploy/?utm_source=atom_feed" rel="related" type="text/html" title="How to deploy a Domain Controller on Microsoft Azure" />
                <link href="https://devopstales.github.io/linux/jitsi-meet/?utm_source=atom_feed" rel="related" type="text/html" title="Install Jitsi meet" />
            
                <id>https://devopstales.github.io/cloud/aks-azure-key-vault-akv2k8s/</id>
            
            
            <published>2023-03-05T00:00:00+00:00</published>
            <updated>2023-03-05T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this Post I will show you how you can use akv2k8s to synchronize secrets from Azure Key Vault to AKS.</p>
<p>AKV2K8s, which stands for Azure Key Vault to Kubernetes, employs two primary elements - the Azure Key Vault Controller and the Azure Key Vault Env Injector. These components enable the injection of secrets, keys, or certificates as environment variables that are exclusively accessible to the main process of the container.</p>
<h2 id="install-akv2k8s">Install akv2k8s</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl create ns akv2k8s
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>helm repo add spv-charts http://charts.spvapi.no
</span></span><span style="display:flex;"><span>helm repo update
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># install the controller</span>
</span></span><span style="display:flex;"><span>helm upgrade --install akv2k8s <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  spv-charts/akv2k8s <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --namespace akv2k8s
</span></span></code></pre></div><h2 id="use-akv2k8s-injector">Use akv2k8s injector</h2>
<p>For the injector part to work you need to add the <code>azure-key-vault-env-injection: enabled</code> label for your namespace:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt; EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Namespace</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">akv2k8s-test</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">azure-key-vault-env-injection</span>: <span style="color:#ae81ff">enabled</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><p>Now we can create a <code>“AzureKeyVaultSecret”</code> CRD to sync secret from Key Vault with akv2k8s</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt; EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">spv.no/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">AzureKeyVaultSecret</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">akv2k8s-test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">vault</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">akv2k8s-test            </span> <span style="color:#75715e"># name of key vault</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">object</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret   </span> <span style="color:#75715e"># name of the akv object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">secret                     </span> <span style="color:#75715e"># akv object type</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt; EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pod</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">akv2k8s-test</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">akv2k8s-test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">akv2k8s-env-test</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">spvest/akv2k8s-env-test:2.0.1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;TEST_SECRET&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">TEST_SECRET</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;my-secret@azurekeyvault&#34;</span> <span style="color:#75715e"># ref to akvs</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><p>If you try to access the environment variable using <code>kubectl exec</code> you won’t be able to see the value (only the container main process have access to it)</p>
<h2 id="sync-secret-from-key-vault-as-aks-secret">Sync secret from Key vault as AKS Secret</h2>
<p>To generate Kubernetes Secret Objects from Key vault you need to create the fallowing <code>“AzureKeyVaultSecret”</code> CRD</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt; EOF | kubectl apply -f -</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">spv.no/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">AzureKeyVaultSecret</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">akv2k8s-test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">vault</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">akv2k8s-test            </span> <span style="color:#75715e"># name of key vault</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">object</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret   </span> <span style="color:#75715e"># name of the akv object</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">secret                     </span> <span style="color:#75715e"># akv object type</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">output</span>: 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">secret</span>: 
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">akv-secret-name1           </span> <span style="color:#75715e"># kubernetes secret name</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dataKey: my-secret # key to store object value in kubernetes apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="azure" term="azure" label="Azure" />
                             
                                <category scheme="aks" term="aks" label="AKS" />
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Elastic Container Registry Integration with EKS]]></title>
            <link href="https://devopstales.github.io/cloud/aws-eks-ecr/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aws-eks-ingress/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy Ingress Controller to EKS cluster with WAF" />
                <link href="https://devopstales.github.io/cloud/aws-eks-install/?utm_source=atom_feed" rel="related" type="text/html" title="Create EKS Cluster with eksctl" />
                <link href="https://devopstales.github.io/cloud/aws-eks-amp-monitoring/?utm_source=atom_feed" rel="related" type="text/html" title="Using AWS Prometheus (AMP) for monitoring AWS EKS cluster." />
                <link href="https://devopstales.github.io/cloud/aws-eks-networking/?utm_source=atom_feed" rel="related" type="text/html" title="AWS EKS Network Solutions" />
                <link href="https://devopstales.github.io/cloud/aws-s2s-vpn/?utm_source=atom_feed" rel="related" type="text/html" title="AWS - pfsense: Site-to-site VPN using static routes" />
            
                <id>https://devopstales.github.io/cloud/aws-eks-ecr/</id>
            
            
            <published>2022-02-26T00:00:00+00:00</published>
            <updated>2022-02-26T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can integrate your Elastic Container Registry with EKS.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws ecr create-repository --repository-name aws-ecr-kubenginx --region us-east-1
</span></span></code></pre></div><p>Build end push image</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Build image with &lt;ECR-REPOSITORY-URI&gt;:&lt;TAG&gt;</span>
</span></span><span style="display:flex;"><span>docker build -t 180789647333.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-kubenginx:1.0.0 .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get Login Password</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># aws ecr get-login-password --region &lt;your-region&gt; | docker login --username AWS --password-stdin &lt;ECR-REPOSITORY-URI&gt;</span>
</span></span><span style="display:flex;"><span>aws ecr get-login-password --region us-east-1 | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>docker login --username AWS --password-stdin 180789647333.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-kubenginx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Push the Docker Image</span>
</span></span><span style="display:flex;"><span>docker push &lt;ECR-REPOSITORY-URI&gt;:&lt;TAG&gt;
</span></span><span style="display:flex;"><span>docker push 180789647333.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-kubenginx:1.0.0
</span></span></code></pre></div><p>Verify ECR Access to EKS Worker Nodes</p>
<ul>
<li>Go to Services -&gt; EC2 -&gt; Running Instances &gt; Select a Worker Node -&gt; Description Tab</li>
<li>Click on value in <code>IAM Role</code> field Role name</li>
<li>In IAM on that <code>specific role</code>, verify <code>permissions</code> tab</li>
<li>Policy with name <code>AmazonEC2ContainerRegistryReadOnly</code>, <code>AmazonEC2ContainerRegistryPowerUser</code> should be associated</li>
</ul>
<p>Use ECR image with Amazon EKS</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e">#01-ECR-Nginx-Deployment.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">kubeapp-ecr</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">app</span>: <span style="color:#ae81ff">kubeapp-ecr</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span><span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">matchLabels</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">app</span>: <span style="color:#ae81ff">kubeapp-ecr</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">app</span>: <span style="color:#ae81ff">kubeapp-ecr</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kubeapp-ecr</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">image</span>: <span style="color:#ae81ff">180789647333.</span><span style="color:#ae81ff">dkr.ecr.us-east-1.amazonaws.com/aws-ecr-kubenginx:1.0.0</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">requests</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">memory</span>: <span style="color:#e6db74">&#34;128Mi&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cpu</span>: <span style="color:#e6db74">&#34;500m&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">limits</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">memory</span>: <span style="color:#e6db74">&#34;256Mi&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cpu</span>: <span style="color:#e6db74">&#34;1000m&#34;</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">80</span>
</span></span></code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="aws" term="aws" label="AWS" />
                             
                                <category scheme="eks" term="eks" label="EKS" />
                             
                                <category scheme="ecr" term="ecr" label="ECR" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[AWS - pfsense: Site-to-site VPN using static routes]]></title>
            <link href="https://devopstales.github.io/cloud/aws-s2s-vpn/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aws-eks-amp-monitoring/?utm_source=atom_feed" rel="related" type="text/html" title="Using AWS Prometheus (AMP) for monitoring AWS EKS cluster." />
                <link href="https://devopstales.github.io/cloud/aws-eks-ingress/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy Ingress Controller to EKS cluster with WAF" />
                <link href="https://devopstales.github.io/cloud/aws-eks-install/?utm_source=atom_feed" rel="related" type="text/html" title="Create EKS Cluster with eksctl" />
                <link href="https://devopstales.github.io/cloud/aws-eks-networking/?utm_source=atom_feed" rel="related" type="text/html" title="AWS EKS Network Solutions" />
                <link href="https://devopstales.github.io/linux/pfsense-ad-join/?utm_source=atom_feed" rel="related" type="text/html" title="Firewall Ports for AD Domain Join" />
            
                <id>https://devopstales.github.io/cloud/aws-s2s-vpn/</id>
            
            
            <published>2022-02-22T00:00:00+00:00</published>
            <updated>2022-02-22T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I willll show you how to configure a VPN between pfSense and AWS using static routes.</p>
<p>To create a VPN on AWS side you need the following Components:</p>
<ul>
<li>Customer Gateway - This is represent the on-premise side of the vpn</li>
<li>virtual private gateway - this is a router in the aws</li>
<li>vpn Connection</li>
<li>virtual priveta cloud</li>
</ul>
<p><code>vpc -&gt; virtual private gateway -&gt; vpn Connection -&gt; Customer Gateway</code></p>
<p><img src="/img/include/vpn-how-it-works-vgw.png" alt="vpn infra"  class="zoomable" /></p>
<p>We need to create this components and connect them to each other.</p>
<h3 id="customer-gateway">Customer Gateway</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># set to your own public ip</span>
</span></span><span style="display:flex;"><span>export CLIENT_PUBLIC_IP<span style="color:#f92672">=</span>1.2.3.4
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create the customer gateway using the following AWS command:</span>
</span></span><span style="display:flex;"><span>aws ec2 create-customer-gateway --type ipsec.1 --public-ip $CLIENT_PUBLIC_IP
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;CustomerGateway&#34;</span>: <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;CustomerGatewayId&#34;</span>: <span style="color:#e6db74">&#34;cgw-0e11f167&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;IpAddress&#34;</span>: <span style="color:#e6db74">&#34;1.2.3.4&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;State&#34;</span>: <span style="color:#e6db74">&#34;available&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Type&#34;</span>: <span style="color:#e6db74">&#34;ipsec.1&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;BgpAsn&#34;</span>: <span style="color:#e6db74">&#34;65000&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export CUSTOMER_GATEWAY<span style="color:#f92672">=</span>cgw-0e11f167
</span></span></code></pre></div><h3 id="create-a-virtual-private-gateway">Create a Virtual Private Gateway</h3>
<p>Create a target gateway and attach it to your VPC network.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create a virtual private gateway with a specific AWS-side ASN:</span>
</span></span><span style="display:flex;"><span>aws ec2 create-vpn-gateway --type ipsec.1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;VpnGateway&#34;</span>: <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;AmazonSideAsn&#34;</span>: 64512,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;State&#34;</span>: <span style="color:#e6db74">&#34;available&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Type&#34;</span>: <span style="color:#e6db74">&#34;ipsec.1&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;VpnGatewayId&#34;</span>: <span style="color:#e6db74">&#34;vgw-9a4cacf3&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;VpcAttachments&#34;</span>: <span style="color:#f92672">[]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export VPN_GATEWAY_ID<span style="color:#f92672">=</span>vgw-9a4cacf3
</span></span><span style="display:flex;"><span>export VPC_ID<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Attach the virtual private gateway to your VPC network:</span>
</span></span><span style="display:flex;"><span>aws ec2 attach-vpn-gateway --vpn-gateway-id $VPN_GATEWAY_ID --vpc-id $VPC_ID
</span></span></code></pre></div><h3 id="create-a-vpn-connection">Create a VPN Connection</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export AWS_TIP<span style="color:#f92672">=</span>169.254.0.0/30
</span></span><span style="display:flex;"><span><span style="color:#75715e"># random string for secret</span>
</span></span><span style="display:flex;"><span>export SHARED_SECRET<span style="color:#f92672">=</span>g23r8gr7grg23r8g2fnmf
</span></span><span style="display:flex;"><span><span style="color:#75715e"># my network on the on-premise side</span>
</span></span><span style="display:flex;"><span>export ONPREM_NETWORK<span style="color:#f92672">=</span>192.168.1.0/24
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>aws ec2 create-vpn-connection <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --type ipsec.1 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --customer-gateway-id $CUSTOMER_GATEWAY <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --vpn-gateway-id $VPN_GATEWAY_ID <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --options TunnelOptions<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;[{TunnelInsideCidr=</span>$AWS_TIP<span style="color:#e6db74">,PreSharedKey=</span>$SHARED_SECRET<span style="color:#e6db74">}]&#34;</span>,StaticRoutesOnly<span style="color:#f92672">=</span>true,LocalIpv4NetworkCidr<span style="color:#f92672">=</span>$ONPREM_NETWORK
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;VpnConnection&#34;</span>: <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;CustomerGatewayConfiguration&#34;</span>: <span style="color:#e6db74">&#34;...configuration information...&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;CustomerGatewayId&#34;</span>: <span style="color:#e6db74">&#34;cgw-0e11f167&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Category&#34;</span>: <span style="color:#e6db74">&#34;VPN&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;State&#34;</span>: <span style="color:#e6db74">&#34;pending&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;VpnConnectionId&#34;</span>: <span style="color:#e6db74">&#34;vpn-123123123123abcab&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;VpnGatewayId&#34;</span>: <span style="color:#e6db74">&#34;vgw-9a4cacf3&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Options&#34;</span>: <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;EnableAcceleration&#34;</span>: false,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;StaticRoutesOnly&#34;</span>: true,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;LocalIpv4NetworkCidr&#34;</span>: <span style="color:#e6db74">&#34;192.168.1.0/24&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;RemoteIpv4NetworkCidr&#34;</span>: <span style="color:#e6db74">&#34;0.0.0.0/0&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;TunnelInsideIpVersion&#34;</span>: <span style="color:#e6db74">&#34;ipv4&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#34;TunnelOptions&#34;</span>: <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;OutsideIpAddress&#34;</span>: <span style="color:#e6db74">&#34;203.0.113.3&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;TunnelInsideCidr&#34;</span>: <span style="color:#e6db74">&#34;169.254.0.0/30&#34;</span>,
</span></span><span style="display:flex;"><span>                    <span style="color:#e6db74">&#34;PreSharedKey&#34;</span>: <span style="color:#e6db74">&#34;g23r8gr7grg23r8g2fnmf&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">{}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Routes&#34;</span>: <span style="color:#f92672">[]</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Tags&#34;</span>: <span style="color:#f92672">[]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>In the <code>TunnelOptions</code> you can configure other options of the vpn like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>IKEVersions<span style="color:#f92672">=[{</span>Value<span style="color:#f92672">=</span>ikev2<span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>Phase2DHGroupNumbers<span style="color:#f92672">=[{</span>Value<span style="color:#f92672">=</span>15<span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>Phase1DHGroupNumbers<span style="color:#f92672">=[{</span>Value<span style="color:#f92672">=</span>15<span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>Phase2IntegrityAlgorithms<span style="color:#f92672">=[{</span>Value<span style="color:#f92672">=</span>SHA2-256<span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>Phase1IntegrityAlgorithms<span style="color:#f92672">=[{</span>Value<span style="color:#f92672">=</span>SHA2-256<span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>Phase2EncryptionAlgorithms<span style="color:#f92672">=[{</span>Value<span style="color:#f92672">=</span>AES256-GCM-16<span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>Phase1EncryptionAlgorithms<span style="color:#f92672">=[{</span>Value<span style="color:#f92672">=</span>AES256-GCM-16<span style="color:#f92672">})</span>
</span></span></code></pre></div><h3 id="configure-routing">Configure Routing</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws ec2 create-route --route-table-id rtb-89012345678901234 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--destination-cidr-block 172.31.0.0/16 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--transit-gateway-id tgw-56789012345678901 
</span></span></code></pre></div><h3 id="download-the-configuration-file">Download the configuration file</h3>
<p>After you create the Site-to-Site VPN connection, you can download a sample configuration file to use for configuring the customer gateway device.</p>
<blockquote>
<p>The configuration file is an example only and might not match your intended Site-to-Site VPN connection settings entirely. It specifies the minimum requirements for a Site-to-Site VPN connection of AES128, SHA1, and Diffie-Hellman group 2 in most AWS Regions, and AES128, SHA2, and Diffie-Hellman group 14 in the AWS GovCloud Regions. It also specifies pre-shared keys for authentication. You must modify the example configuration file to take advantage of additional security algorithms, Diffie-Hellman groups, private certificates, and IPv6 traffic.</p></blockquote>
<ul>
<li>Open the Amazon VPC console at <a href="https://console.aws.amazon.com/vpc/">https://console.aws.amazon.com/vpc/</a></li>
<li>In the navigation pane, choose Site-to-Site VPN Connections.</li>
<li>Select your VPN connection and choose Download Configuration.</li>
</ul>
<h3 id="creating-a-new-ipsec-vpn-on-pfsense">Creating a new IPsec VPN on pfsense</h3>
<p>At <code>VPN &gt; IPsec &gt; Add</code>  Fill out the values from the text file that you just downloaded from AWS. It looks like this.</p>
<p><img src="/img/include/aws-vpn01.jpg" alt="vpn infra"  class="zoomable" /></p>
<p><img src="/img/include/aws-vpn02.jpg" alt="vpn infra"  class="zoomable" /></p>
<p><img src="/img/include/aws-vpn03.jpg" alt="vpn infra"  class="zoomable" /></p>
<p><img src="/img/include/aws-vpn04.jpg" alt="vpn infra"  class="zoomable" /></p>
<p>As with <code>Phase 1</code>, do the same for <code>Phase 2</code>. Read the values from the text file.</p>
<p><img src="/img/include/aws-vpn05.jpg" alt="vpn infra"  class="zoomable" /></p>
<p><img src="/img/include/aws-vpn06.jpg" alt="vpn infra"  class="zoomable" /></p>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="calico" term="calico" label="calico" />
                             
                                <category scheme="aws" term="aws" label="AWS" />
                             
                                <category scheme="pfsense" term="pfsense" label="pfsense" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Using AWS Prometheus (AMP) for monitoring AWS EKS cluster.]]></title>
            <link href="https://devopstales.github.io/cloud/aws-eks-amp-monitoring/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aws-eks-install/?utm_source=atom_feed" rel="related" type="text/html" title="Create EKS Cluster with eksctl" />
                <link href="https://devopstales.github.io/cloud/aws-eks-ingress/?utm_source=atom_feed" rel="related" type="text/html" title="Deploy Ingress Controller to EKS cluster with WAF" />
                <link href="https://devopstales.github.io/cloud/aws-eks-networking/?utm_source=atom_feed" rel="related" type="text/html" title="AWS EKS Network Solutions" />
                <link href="https://devopstales.github.io/kubernetes/kubernetes-networking-2/?utm_source=atom_feed" rel="related" type="text/html" title="Understanding kubernetes networking: owerlay networks" />
                <link href="https://devopstales.github.io/kubernetes/kubernetes-networking-1/?utm_source=atom_feed" rel="related" type="text/html" title="Understanding kubernetes networking: pods and services" />
            
                <id>https://devopstales.github.io/cloud/aws-eks-amp-monitoring/</id>
            
            
            <published>2022-02-18T00:00:00+00:00</published>
            <updated>2022-02-18T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can install the AWS managed Prometheus Service for EKS monitoring.</p>
<h3 id="create-a-new-amp-workspace">Create a new AMP workspace</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws amp create-workspace --alias eks-workshop --region $AWS_REGION
</span></span></code></pre></div><h3 id="setup-iam-for-prometheus-server-to-send-metrics-to-amp">Setup IAM for Prometheus Server to send metrics to AMP</h3>
<p>After setting the <code>YOUR_EKS_CLUSTER_NAME</code> variable the below shell script can be used to:</p>
<ul>
<li>Creates an IAM role with an IAM policy</li>
<li>Creates a Kubernetes service account</li>
<li>Creates a trust relationship between the IAM role and the OIDC provider</li>
</ul>
<p>for the AMP and EKS cluster.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">##!/bin/bash</span>
</span></span><span style="display:flex;"><span>CLUSTER_NAME<span style="color:#f92672">=</span>YOUR_EKS_CLUSTER_NAME
</span></span><span style="display:flex;"><span>AWS_ACCOUNT_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws sts get-caller-identity --query <span style="color:#e6db74">&#34;Account&#34;</span> --output text<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>OIDC_PROVIDER<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws eks describe-cluster --name $CLUSTER_NAME --query <span style="color:#e6db74">&#34;cluster.identity.oidc.issuer&#34;</span> --output text | sed -e <span style="color:#e6db74">&#34;s/^https:\/\///&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PROM_SERVICE_ACCOUNT_NAMESPACE<span style="color:#f92672">=</span>prometheus
</span></span><span style="display:flex;"><span>GRAFANA_SERVICE_ACCOUNT_NAMESPACE<span style="color:#f92672">=</span>grafana
</span></span><span style="display:flex;"><span>SERVICE_ACCOUNT_NAME<span style="color:#f92672">=</span>iamproxy-service-account
</span></span><span style="display:flex;"><span>SERVICE_ACCOUNT_IAM_ROLE<span style="color:#f92672">=</span>EKS-AMP-ServiceAccount-Role
</span></span><span style="display:flex;"><span>SERVICE_ACCOUNT_IAM_ROLE_DESCRIPTION<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;IAM role to be used by a K8s service account with write access to AMP&#34;</span>
</span></span><span style="display:flex;"><span>SERVICE_ACCOUNT_IAM_POLICY<span style="color:#f92672">=</span>AWSManagedPrometheusWriteAccessPolicy
</span></span><span style="display:flex;"><span>SERVICE_ACCOUNT_IAM_POLICY_ARN<span style="color:#f92672">=</span>arn:aws:iam::$AWS_ACCOUNT_ID:policy/$SERVICE_ACCOUNT_IAM_POLICY
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Setup a trust policy designed for a specific combination of K8s service account and namespace to sign in from a Kubernetes cluster which hosts the OIDC Idp.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># If the IAM role already exists, then add this new trust policy to the existing trust policy</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Creating a new trust policy&#34;</span>
</span></span><span style="display:flex;"><span>read -r -d <span style="color:#e6db74">&#39;&#39;</span> NEW_TRUST_RELATIONSHIP <span style="color:#e6db74">&lt;&lt;EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Effect&#34;: &#34;Allow&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Principal&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;Federated&#34;: &#34;arn:aws:iam::${AWS_ACCOUNT_ID}:oidc-provider/${OIDC_PROVIDER}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Action&#34;: &#34;sts:AssumeRoleWithWebIdentity&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Condition&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;StringEquals&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;${OIDC_PROVIDER}:sub&#34;: &#34;system:serviceaccount:${GRAFANA_SERVICE_ACCOUNT_NAMESPACE}:${SERVICE_ACCOUNT_NAME}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Effect&#34;: &#34;Allow&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Principal&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;Federated&#34;: &#34;arn:aws:iam::${AWS_ACCOUNT_ID}:oidc-provider/${OIDC_PROVIDER}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Action&#34;: &#34;sts:AssumeRoleWithWebIdentity&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Condition&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;StringEquals&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;${OIDC_PROVIDER}:sub&#34;: &#34;system:serviceaccount:${PROM_SERVICE_ACCOUNT_NAMESPACE}:${SERVICE_ACCOUNT_NAME}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the old trust policy, if one exists, and append it to the new trust policy</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>OLD_TRUST_RELATIONSHIP<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws iam get-role --role-name $SERVICE_ACCOUNT_IAM_ROLE --query <span style="color:#e6db74">&#39;Role.AssumeRolePolicyDocument.Statement[]&#39;</span> --output json<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>COMBINED_TRUST_RELATIONSHIP<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo $OLD_TRUST_RELATIONSHIP $NEW_TRUST_RELATIONSHIP | jq -s add<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Appending to the existing trust policy&#34;</span>
</span></span><span style="display:flex;"><span>read -r -d <span style="color:#e6db74">&#39;&#39;</span> TRUST_POLICY <span style="color:#e6db74">&lt;&lt;EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Version&#34;: &#34;2012-10-17&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Statement&#34;: ${COMBINED_TRUST_RELATIONSHIP}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>TRUST_POLICY<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> &gt; TrustPolicy.json
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Setup the permission policy grants write permissions for all AWS StealFire workspaces</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>read -r -d <span style="color:#e6db74">&#39;&#39;</span> PERMISSION_POLICY <span style="color:#e6db74">&lt;&lt;EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">   &#34;Version&#34;:&#34;2012-10-17&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">   &#34;Statement&#34;:[
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         &#34;Effect&#34;:&#34;Allow&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         &#34;Action&#34;:[
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            &#34;aps:RemoteWrite&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            &#34;aps:QueryMetrics&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            &#34;aps:GetSeries&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            &#34;aps:GetLabels&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            &#34;aps:GetMetricMetadata&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         ],
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         &#34;Resource&#34;:&#34;*&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">   ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>PERMISSION_POLICY<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> &gt; PermissionPolicy.json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create an IAM permission policy to be associated with the role, if the policy does not already exist</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>SERVICE_ACCOUNT_IAM_POLICY_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws iam get-policy --policy-arn $SERVICE_ACCOUNT_IAM_POLICY_ARN --query <span style="color:#e6db74">&#39;Policy.PolicyId&#39;</span> --output text<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$SERVICE_ACCOUNT_IAM_POLICY_ID<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>; 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  echo <span style="color:#e6db74">&#34;Creating a new permission policy </span>$SERVICE_ACCOUNT_IAM_POLICY<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  aws iam create-policy --policy-name $SERVICE_ACCOUNT_IAM_POLICY --policy-document file://PermissionPolicy.json 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  echo <span style="color:#e6db74">&#34;Permission policy </span>$SERVICE_ACCOUNT_IAM_POLICY<span style="color:#e6db74"> already exists&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># If the IAM role already exists, then just update the trust policy.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Otherwise create one using the trust policy and permission policy</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>SERVICE_ACCOUNT_IAM_ROLE_ARN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws iam get-role --role-name $SERVICE_ACCOUNT_IAM_ROLE --query <span style="color:#e6db74">&#39;Role.Arn&#39;</span> --output text<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$SERVICE_ACCOUNT_IAM_ROLE_ARN<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>; 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  echo <span style="color:#e6db74">&#34;</span>$SERVICE_ACCOUNT_IAM_ROLE<span style="color:#e6db74"> role does not exist. Creating a new role with a trust and permission policy&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Create an IAM role for Kubernetes service account </span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>  SERVICE_ACCOUNT_IAM_ROLE_ARN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws iam create-role <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --role-name $SERVICE_ACCOUNT_IAM_ROLE <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --assume-role-policy-document file://TrustPolicy.json <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --description <span style="color:#e6db74">&#34;</span>$SERVICE_ACCOUNT_IAM_ROLE_DESCRIPTION<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --query <span style="color:#e6db74">&#34;Role.Arn&#34;</span> --output text<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Attach the trust and permission policies to the role</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>  aws iam attach-role-policy --role-name $SERVICE_ACCOUNT_IAM_ROLE --policy-arn $SERVICE_ACCOUNT_IAM_POLICY_ARN  
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  echo <span style="color:#e6db74">&#34;</span>$SERVICE_ACCOUNT_IAM_ROLE_ARN<span style="color:#e6db74"> role already exists. Updating the trust policy&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Update the IAM role for Kubernetes service account with a with the new trust policy</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>  aws iam update-assume-role-policy --role-name $SERVICE_ACCOUNT_IAM_ROLE --policy-document file://TrustPolicy.json
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>echo $SERVICE_ACCOUNT_IAM_ROLE_ARN
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># EKS cluster hosts an OIDC provider with a public discovery endpoint.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Associate this Idp with AWS IAM so that the latter can validate and accept the OIDC tokens issued by Kubernetes to service accounts.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Doing this with eksctl is the easier and best approach.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>eksctl utils associate-iam-oidc-provider --cluster $CLUSTER_NAME --approve
</span></span></code></pre></div><h3 id="setting-up-prometheus-server-in-the-kubernetes-cluster">Setting up Prometheus server in the Kubernetes cluster</h3>
<p>We need to provision a Prometheus server inside our EKS cluster that would be tasked to collect all the cluster metrics and ship them to AMP (or AWS Managed Service for Prometheus)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
</span></span><span style="display:flex;"><span>kubectl create ns prometheus
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano amp_ingest_override_values.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">serviceAccounts</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">## Disable alert manager roles</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">server</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;iamproxy-service-account&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">alertmanager</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">create</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">## Disable pushgateway</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">pushgateway</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">create</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">server</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">remoteWrite</span>:
</span></span><span style="display:flex;"><span>    -
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">queue_config</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">max_samples_per_send</span>: <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">max_shards</span>: <span style="color:#ae81ff">200</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">capacity</span>: <span style="color:#ae81ff">2500</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">## Use a statefulset instead of a deployment for resiliency</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">statefulSet</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">## Store blocks locally for short time period only</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">retention</span>: <span style="color:#ae81ff">1h</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Disable alert manager</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">alertmanager</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Disable pushgateway</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">pushgateway</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>export SERVICE_ACCOUNT_IAM_ROLE<span style="color:#f92672">=</span>EKS-AMP-ServiceAccount-Role
</span></span><span style="display:flex;"><span>export SERVICE_ACCOUNT_IAM_ROLE_ARN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws iam get-role --role-name $SERVICE_ACCOUNT_IAM_ROLE --query <span style="color:#e6db74">&#39;Role.Arn&#39;</span> --output text<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>export WORKSPACE_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws amp list-workspaces --alias eks-workshop | jq .workspaces<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>.workspaceId -r<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>helm install prometheus-for-amp prometheus-community/prometheus -n prometheus -f ./amp_ingest_override_values.yaml <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set serviceAccounts.server.annotations.<span style="color:#e6db74">&#34;eks\.amazonaws\.com/role-arn&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>SERVICE_ACCOUNT_IAM_ROLE_ARN<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set server.remoteWrite<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>.url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://aps-workspaces.</span><span style="color:#e6db74">${</span>AWS_REGION<span style="color:#e6db74">}</span><span style="color:#e6db74">.amazonaws.com/workspaces/</span><span style="color:#e6db74">${</span>WORKSPACE_ID<span style="color:#e6db74">}</span><span style="color:#e6db74">/api/v1/remote_write&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set server.remoteWrite<span style="color:#f92672">[</span>0<span style="color:#f92672">]</span>.sigv4.region<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>AWS_REGION<span style="color:#e6db74">}</span>
</span></span></code></pre></div><h3 id="visualizing-metrics-using-grafana">Visualizing metrics using Grafana</h3>
<p>You need a dashboard to visualize the metrics in Promethsus. You can install a Grafana to the EKS Cluster by helm or use AWS Grafana.</p>
<h4 id="install-grafana-by-helm">Install Grafana by helm</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm repo add grafana https://grafana.github.io/helm-charts
</span></span><span style="display:flex;"><span>kubectl create ns grafana
</span></span><span style="display:flex;"><span>helm install grafana-for-amp grafana/grafana -n grafana
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano amp_query_override_values.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">serviceAccount</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;iamproxy-service-account&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">eks.amazonaws.com/role-arn</span>: <span style="color:#e6db74">&#34;${IAM_PROXY_PROMETHEUS_ROLE_ARN}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">grafana.ini</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">auth</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">sigv4_auth_enabled</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm upgrade --install grafana-for-amp grafana/grafana -n grafana -f ./amp_query_override_values.yaml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># get passwor</span>
</span></span><span style="display:flex;"><span>kubectl get secrets grafana-for-amp -n grafana -o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{.data.admin-password}&#39;</span>|base64 --decode
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># port-forward to get th ui:</span>
</span></span><span style="display:flex;"><span>kubectl port-forward -n grafana pods/GRAFANA_POD_NAME 5001:3000 
</span></span></code></pre></div><h3 id="configure-grafana">Configure Grafana</h3>
<p>Before we can visualize the metrics in Grafana, it has to be configured with one or more data sources. Here, we will specify the workspace within Amazon Managed Service for Prometheus as a data source, as shown below. In the URL field, specify the Endpoint – query URL displayed in the AMP workspace details page without the /api/v1/query string at the end of the URL.</p>
<p><img src="/img/include/aws-grafana01.png" alt="aws-grafana"  class="zoomable" /></p>
<p>You’re now ready to query metrics data for the Prometheus Counter <code>http_requests_total</code> stored in the managed service workspace and visualize the rate of HTTP requests over a trailing 5-minute period using a Prometheus query as follows:
<code>sum(rate(http_requests_total{exported_job=”recommender”}[5m])) by (path)</code></p>
<p>The figure below illustrates how to visualize this metric in Grafana across the different path labels captured in the Prometheus Counter.</p>
<p><img src="/img/include/aws-grafana02.png" alt="aws-grafana"  class="zoomable" /></p>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="prometheus" term="prometheus" label="prometheus" />
                             
                                <category scheme="grafana" term="grafana" label="grafana" />
                             
                                <category scheme="helm" term="helm" label="helm" />
                             
                                <category scheme="aws" term="aws" label="AWS" />
                             
                                <category scheme="eks" term="eks" label="EKS" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Deploy Ingress Controller to EKS cluster with WAF]]></title>
            <link href="https://devopstales.github.io/cloud/aws-eks-ingress/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aws-eks-install/?utm_source=atom_feed" rel="related" type="text/html" title="Create EKS Cluster with eksctl" />
                <link href="https://devopstales.github.io/cloud/aws-eks-networking/?utm_source=atom_feed" rel="related" type="text/html" title="AWS EKS Network Solutions" />
                <link href="https://devopstales.github.io/kubernetes/kubernetes-networking-2/?utm_source=atom_feed" rel="related" type="text/html" title="Understanding kubernetes networking: owerlay networks" />
                <link href="https://devopstales.github.io/kubernetes/kubernetes-networking-1/?utm_source=atom_feed" rel="related" type="text/html" title="Understanding kubernetes networking: pods and services" />
                <link href="https://devopstales.github.io/kubernetes/multus-calico/?utm_source=atom_feed" rel="related" type="text/html" title="Use multus to separate metwork trafics" />
            
                <id>https://devopstales.github.io/cloud/aws-eks-ingress/</id>
            
            
            <published>2022-02-12T00:00:00+00:00</published>
            <updated>2022-02-12T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can install the AWS Load Balancer Controller on EKS Cluster with WAF protection.</p>
<p>AWS Load Balancer Controller is a controller to help manage Elastic Load Balancers for a Kubernetes cluster. It satisfies Kubernetes <code>Ingress</code> resources by provisioning Application Load Balancers and <code>Service</code> resources by provisioning Network Load Balancers.</p>
<p>AWS Elastic Load Balancing Application Load Balancer (ALB) is a popular AWS service that load balances incoming traffic at the application layer (layer 7) across multiple targets, such as Amazon EC2 instances, in multiple Availability Zones. It supports multiple features including: TLS (Transport Layer Security) termination, AWS WAF (Web Application Firewall) integration and integrated access logs, and health checks.</p>
<h3 id="deploy-the-aws-load-balancer-controller">Deploy the AWS Load Balancer Controller</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Let’s start by setting a few environment variables:</span>
</span></span><span style="display:flex;"><span>export AWS_REGION<span style="color:#f92672">=</span>eu-central-1
</span></span><span style="display:flex;"><span>export ACCOUNT_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws sts get-caller-identity --query <span style="color:#e6db74">&#39;Account&#39;</span> --output text<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>export EKS_CLUSTER_NAME<span style="color:#f92672">=</span>eks-devopstales
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>VPC_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws eks describe-cluster <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --name $EKS_CLUSTER_NAME <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region $AWS_REGION <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --query <span style="color:#e6db74">&#39;cluster.resourcesVpcConfig.vpcId&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --output text<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Associate OIDC provider </span>
</span></span><span style="display:flex;"><span>eksctl utils associate-iam-oidc-provider <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --cluster $EKS_CLUSTER_NAME <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region $AWS_REGION <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --approve
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Download the IAM policy document</span>
</span></span><span style="display:flex;"><span>curl -S https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.3.0/docs/install/iam_policy.json -o iam-policy.json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create an IAM policy</span>
</span></span><span style="display:flex;"><span>LBC_IAM_POLICY_ARN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws iam create-policy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --policy-name AWSLoadBalancerControllerIAMPolicy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --policy-document file://iam-policy.json <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --query <span style="color:#e6db74">&#39;Policy.Arn&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --output text<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a service account </span>
</span></span><span style="display:flex;"><span>eksctl create iamserviceaccount <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --cluster<span style="color:#f92672">=</span>$EKS_CLUSTER_NAME <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region $AWS_REGION <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --namespace<span style="color:#f92672">=</span>kube-system <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --name<span style="color:#f92672">=</span>aws-load-balancer-controller <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --override-existing-serviceaccounts <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --attach-policy-arn<span style="color:#f92672">=</span>arn:aws:iam::<span style="color:#e6db74">${</span>ACCOUNT_ID<span style="color:#e6db74">}</span>:policy/AWSLoadBalancerControllerIAMPolicy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --approve
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>helm repo add eks https://aws.github.io/eks-charts <span style="color:#f92672">&amp;&amp;</span> helm repo update
</span></span><span style="display:flex;"><span>kubectl apply -k <span style="color:#e6db74">&#34;github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master&#34;</span>
</span></span><span style="display:flex;"><span>helm install aws-load-balancer-controller <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  eks/aws-load-balancer-controller <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --namespace kube-system <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --set clusterName<span style="color:#f92672">=</span>$EKS_CLUSTER_NAME <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --set serviceAccount.create<span style="color:#f92672">=</span>false <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --set serviceAccount.name<span style="color:#f92672">=</span>aws-load-balancer-controller <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --set vpcId<span style="color:#f92672">=</span>$VPC_ID <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --set region<span style="color:#f92672">=</span>$AWS_REGION
</span></span></code></pre></div><p>Let’s create a Kubernetes ingress for an app called Yelb. The AWS Load Balancer Controller will associate the ingress with an Application Load Balancer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt; EOF &gt; yelb-ingress.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">yelb.app</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">yelb</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.io/ingress.class</span>: <span style="color:#ae81ff">alb</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">alb.ingress.kubernetes.io/scheme</span>: <span style="color:#ae81ff">internet-facing</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">alb.ingress.kubernetes.io/target-type</span>: <span style="color:#ae81ff">ip</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">pathType</span>: <span style="color:#ae81ff">Prefix</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>: <span style="color:#ae81ff">yelb-ui</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">port</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">number</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">kubectl apply -f yelb-ingress.yaml</span>
</span></span></code></pre></div><h3 id="add-a-web-application-firewall-to-the-ingress">Add a web application firewall to the ingress</h3>
<p>The first thing we need to do is create a WAS web ACL. In AWS WAF, a web access control list or a web ACL monitors HTTP(S) requests for one or more AWS resources. These resources can be an Amazon API Gateway, AWS AppSync, Amazon CloudFront, or an Application Load Balancer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create an AWS WAF web ACL:</span>
</span></span><span style="display:flex;"><span>WAF_WACL_ARN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws wafv2 create-web-acl <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --name WAF-FOR-YELB <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region $WAF_AWS_REGION <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --default-action Allow<span style="color:#f92672">={}</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --scope REGIONAL <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --visibility-config SampledRequestsEnabled<span style="color:#f92672">=</span>true,CloudWatchMetricsEnabled<span style="color:#f92672">=</span>true,MetricName<span style="color:#f92672">=</span>YelbWAFAclMetrics <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --description <span style="color:#e6db74">&#34;WAF Web ACL for Yelb&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --query <span style="color:#e6db74">&#39;Summary.ARN&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --output text <span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Store the AWS WAF web ACL’s Id in an environment variable</span>
</span></span><span style="display:flex;"><span>WAF_WAF_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws wafv2 list-web-acls <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region $WAF_AWS_REGION <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --scope REGIONAL <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --query <span style="color:#e6db74">&#34;WebACLs[?Name==&#39;WAF-for-Yelb&#39;].Id&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --output text<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Update the ingress and associate this AWS WAF web ACL with the ALB that the ingress uses:</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt; EOF &gt; yelb-ingress.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">yelb.app</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">yelb</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.io/ingress.class</span>: <span style="color:#ae81ff">alb</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">alb.ingress.kubernetes.io/scheme</span>: <span style="color:#ae81ff">internet-facing</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">alb.ingress.kubernetes.io/target-type</span>: <span style="color:#ae81ff">ip</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">alb.ingress.kubernetes.io/wafv2-acl-arn</span>: <span style="color:#ae81ff">${WAF_WACL_ARN}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">pathType</span>: <span style="color:#ae81ff">Prefix</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">name</span>: <span style="color:#ae81ff">yelb-ui</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">port</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">number</span>: <span style="color:#ae81ff">80</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">kubectl apply -f yelb-ingress.yaml</span>
</span></span></code></pre></div><h3 id="enable-traffic-filtering-in-aws-waf">Enable traffic filtering in AWS WAF</h3>
<p>We have associated the ALB that our Kubernetes ingress uses with an AWS WAF web ACL Every request that’s handled by our sample application Yelb pods goes through AWS WAF for inspection. The AWS WAF web ACL is currently allowing every request to pass because we haven’t configured any AWS WAF rules.  In order to filter out potentially malicious traffic, we have to specify rules.</p>
<p>AWS WAF Bot Control is a managed rule group that provides visibility and control over common and pervasive bot traffic to web applications. While Bot Control has been optimized to minimize false positives, we recommend that you deploy Bot Control in count mode first and review CloudWatch metrics and AWS WAF logs to ensure that you are not accidentally blocking legitimate traffic.</p>
<p>Create a rules file and deploy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cat <span style="color:#e6db74">&lt;&lt; EOF &gt; waf-rules.json 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">[
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Name&#34;: &#34;AWS-AWSManagedRulesBotControlRuleSet&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Priority&#34;: 0,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Statement&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;ManagedRuleGroupStatement&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;VendorName&#34;: &#34;AWS&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          &#34;Name&#34;: &#34;AWSManagedRulesBotControlRuleSet&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;OverrideAction&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;None&#34;: {}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;VisibilityConfig&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;SampledRequestsEnabled&#34;: true,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;CloudWatchMetricsEnabled&#34;: true,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;MetricName&#34;: &#34;AWS-AWSManagedRulesBotControlRuleSet&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws wafv2 update-web-acl <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --name WAF-FOR-YELB <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --scope REGIONAL <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --id $WAF_WAF_ID <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --default-action Allow<span style="color:#f92672">={}</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --lock-token <span style="color:#66d9ef">$(</span>aws wafv2 list-web-acls <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --region $AWS_REGION <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --scope REGIONAL <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --query <span style="color:#e6db74">&#34;WebACLs[?Name==&#39;WAF-for-Yelb&#39;].LockToken&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --output text<span style="color:#66d9ef">)</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --visibility-config SampledRequestsEnabled<span style="color:#f92672">=</span>true,CloudWatchMetricsEnabled<span style="color:#f92672">=</span>true,MetricName<span style="color:#f92672">=</span>YelbWAFAclMetrics <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region $AWS_REGION <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --rules file://waf-rules.json
</span></span></code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="calico" term="calico" label="calico" />
                             
                                <category scheme="aws" term="aws" label="AWS" />
                             
                                <category scheme="eks" term="eks" label="EKS" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Create EKS Cluster with eksctl]]></title>
            <link href="https://devopstales.github.io/cloud/aws-eks-install/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aws-eks-networking/?utm_source=atom_feed" rel="related" type="text/html" title="AWS EKS Network Solutions" />
                <link href="https://devopstales.github.io/kubernetes/kubernetes-networking-2/?utm_source=atom_feed" rel="related" type="text/html" title="Understanding kubernetes networking: owerlay networks" />
                <link href="https://devopstales.github.io/kubernetes/kubernetes-networking-1/?utm_source=atom_feed" rel="related" type="text/html" title="Understanding kubernetes networking: pods and services" />
                <link href="https://devopstales.github.io/kubernetes/multus-calico/?utm_source=atom_feed" rel="related" type="text/html" title="Use multus to separate metwork trafics" />
                <link href="https://devopstales.github.io/kubernetes/k8s-security/?utm_source=atom_feed" rel="related" type="text/html" title="Best Practices to keeping Kubernetes Clusters Secure" />
            
                <id>https://devopstales.github.io/cloud/aws-eks-install/</id>
            
            
            <published>2022-02-11T00:00:00+00:00</published>
            <updated>2022-02-11T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can install an AWS managed Elastic Kubernetes Service with ekscli.</p>
<h3 id="create-an-aws-kms-custom-managed-key">Create an AWS KMS Custom Managed Key</h3>
<p>Create a CMK for the EKS cluster to use when encrypting your Kubernetes secrets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws kms create-alias --alias-name alias/devopstales --target-key-id <span style="color:#66d9ef">$(</span>aws kms create-key --query KeyMetadata.Arn --output text<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><h3 id="create-eks-cluster-with-eksctl">Create EKS Cluster with eksctl</h3>
<p><code>eksctl</code> is a simple CLI tool for creating clusters on EKS. To download the latest release, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl --silent --location <span style="color:#e6db74">&#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_</span><span style="color:#66d9ef">$(</span>uname -s<span style="color:#66d9ef">)</span><span style="color:#e6db74">_amd64.tar.gz&#34;</span> | tar xz -C /tmp
</span></span><span style="display:flex;"><span>sudo mv /tmp/eksctl /usr/local/bin
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Let’s start by setting a few environment variables:</span>
</span></span><span style="display:flex;"><span>export AWS_REGION<span style="color:#f92672">=</span>eu-central-1
</span></span><span style="display:flex;"><span>export ACCOUNT_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws sts get-caller-identity --query <span style="color:#e6db74">&#39;Account&#39;</span> --output text<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>export EKS_CLUSTER_NAME<span style="color:#f92672">=</span>eks-devopstales
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the KMS Custom Managed Key resource name:</span>
</span></span><span style="display:flex;"><span>export MASTER_ARN<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>aws kms describe-key --key-id alias/devopstales --query KeyMetadata.Arn --output text<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create a cluster</span>
</span></span><span style="display:flex;"><span>eksctl create cluster <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --name $EKS_CLUSTER_NAME <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region $AWS_REGION <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --managed
</span></span></code></pre></div><p>If ylou need mor advanced configuration You can create a deployment file for <code>eksctl</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt; EOF &gt; eks_devopstales.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">eksctl.io/v1alpha5</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">eks-devopstales</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">region</span>: <span style="color:#ae81ff">${AWS_REGION}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;1.21&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">availabilityZones</span>: [<span style="color:#e6db74">&#34;eu-central-1a&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#f92672">managedNodeGroups</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workers</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>: 
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">role</span>: <span style="color:#ae81ff">workers</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">environment</span>: <span style="color:#ae81ff">poc</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">desiredCapacity</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">instanceType</span>: <span style="color:#ae81ff">t3.small</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volumeEncrypted</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volumeSize</span>: <span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ssh</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enableSsm</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">secretsEncryption</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">keyARN</span>: <span style="color:#ae81ff">${MASTER_ARN}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># To enable all of the control plane logs, uncomment below:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cloudWatch:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  clusterLogging:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#    enableTypes: [&#34;*&#34;]</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><p>Next, use the file you created as the input for the eksctl cluster creation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>eksctl create cluster -f eks_devopstales.yaml
</span></span></code></pre></div><p>Test The cluster</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get nodes
</span></span></code></pre></div><h3 id="using-iam-groups-to-manage-kubernetes-cluster-access">Using IAM Groups to manage Kubernetes cluster access</h3>
<p>We are going to create 3 roles:</p>
<ul>
<li><strong>k8sAdmin</strong> role which will have admin rights in our EKS cluster</li>
<li><strong>k8sDev</strong> role which will give access to the developers namespace in our EKS cluster</li>
<li><strong>k8sInteg</strong> role which will give access to the integration namespace in our EKS cluster</li>
</ul>
<p>Create the roles:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>POLICY<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo -n <span style="color:#e6db74">&#39;{&#34;Version&#34;:&#34;2012-10-17&#34;,&#34;Statement&#34;:[{&#34;Effect&#34;:&#34;Allow&#34;,&#34;Principal&#34;:{&#34;AWS&#34;:&#34;arn:aws:iam::&#39;</span>; echo -n <span style="color:#e6db74">&#34;</span>$ACCOUNT_ID<span style="color:#e6db74">&#34;</span>; echo -n <span style="color:#e6db74">&#39;:root&#34;},&#34;Action&#34;:&#34;sts:AssumeRole&#34;,&#34;Condition&#34;:{}}]}&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo ACCOUNT_ID<span style="color:#f92672">=</span>$ACCOUNT_ID
</span></span><span style="display:flex;"><span>echo POLICY<span style="color:#f92672">=</span>$POLICY
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>aws iam create-role <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --role-name k8sAdmin <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --description <span style="color:#e6db74">&#34;Kubernetes administrator role (for AWS IAM Authenticator for Kubernetes).&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --assume-role-policy-document <span style="color:#e6db74">&#34;</span>$POLICY<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --output text <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --query <span style="color:#e6db74">&#39;Role.Arn&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>aws iam create-role <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --role-name k8sDev <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --description <span style="color:#e6db74">&#34;Kubernetes developer role (for AWS IAM Authenticator for Kubernetes).&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --assume-role-policy-document <span style="color:#e6db74">&#34;</span>$POLICY<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --output text <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --query <span style="color:#e6db74">&#39;Role.Arn&#39;</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>aws iam create-role <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --role-name k8sInteg <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --description <span style="color:#e6db74">&#34;Kubernetes role for integration namespace in quick cluster.&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --assume-role-policy-document <span style="color:#e6db74">&#34;</span>$POLICY<span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --output text <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --query <span style="color:#e6db74">&#39;Role.Arn&#39;</span>
</span></span></code></pre></div><p>We will define 3 groups:</p>
<ul>
<li><strong>k8sAdmin</strong> - users from this group will have admin rights on the kubernetes cluster</li>
<li><strong>k8sDe</strong> - users from this group will have full access only in the development namespace of the cluster</li>
<li><strong>k8sInteg</strong> - users from this group will have access to integration namespace.</li>
</ul>
<p>Create k8sAdmin IAM Group:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws iam create-group --group-name k8sAdmin
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ADMIN_GROUP_POLICY<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo -n <span style="color:#e6db74">&#39;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Version&#34;: &#34;2012-10-17&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Statement&#34;: [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Sid&#34;: &#34;AllowAssumeOrganizationAccountRole&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Effect&#34;: &#34;Allow&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Resource&#34;: &#34;arn:aws:iam::&#39;</span>; echo -n <span style="color:#e6db74">&#34;</span>$ACCOUNT_ID<span style="color:#e6db74">&#34;</span>; echo -n <span style="color:#e6db74">&#39;:role/k8sAdmin&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>echo ADMIN_GROUP_POLICY<span style="color:#f92672">=</span>$ADMIN_GROUP_POLICY
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>aws iam put-group-policy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--group-name k8sAdmin <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--policy-name k8sAdmin-policy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--policy-document <span style="color:#e6db74">&#34;</span>$ADMIN_GROUP_POLICY<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>Create k8sDev IAM Group:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws iam create-group --group-name k8sDev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>DEV_GROUP_POLICY<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo -n <span style="color:#e6db74">&#39;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Version&#34;: &#34;2012-10-17&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Statement&#34;: [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Sid&#34;: &#34;AllowAssumeOrganizationAccountRole&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Effect&#34;: &#34;Allow&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Resource&#34;: &#34;arn:aws:iam::&#39;</span>; echo -n <span style="color:#e6db74">&#34;</span>$ACCOUNT_ID<span style="color:#e6db74">&#34;</span>; echo -n <span style="color:#e6db74">&#39;:role/k8sDev&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>echo DEV_GROUP_POLICY<span style="color:#f92672">=</span>$DEV_GROUP_POLICY
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>aws iam put-group-policy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--group-name k8sDev <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--policy-name k8sDev-policy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--policy-document <span style="color:#e6db74">&#34;</span>$DEV_GROUP_POLICY<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>Create k8sInteg IAM Group:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws iam create-group --group-name k8sInteg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>INTEG_GROUP_POLICY<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>echo -n <span style="color:#e6db74">&#39;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Version&#34;: &#34;2012-10-17&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;Statement&#34;: [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Sid&#34;: &#34;AllowAssumeOrganizationAccountRole&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Effect&#34;: &#34;Allow&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Action&#34;: &#34;sts:AssumeRole&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#34;Resource&#34;: &#34;arn:aws:iam::&#39;</span>; echo -n <span style="color:#e6db74">&#34;</span>$ACCOUNT_ID<span style="color:#e6db74">&#34;</span>; echo -n <span style="color:#e6db74">&#39;:role/k8sInteg&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  ]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>echo INTEG_GROUP_POLICY<span style="color:#f92672">=</span>$INTEG_GROUP_POLICY
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>aws iam put-group-policy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--group-name k8sInteg <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--policy-name k8sInteg-policy <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--policy-document <span style="color:#e6db74">&#34;</span>$INTEG_GROUP_POLICY<span style="color:#e6db74">&#34;</span>
</span></span></code></pre></div><p>Create IAM Users and add to the groups:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>aws iam create-user --user-name PaulAdmin
</span></span><span style="display:flex;"><span>aws iam create-user --user-name JeanDev
</span></span><span style="display:flex;"><span>aws iam create-user --user-name PierreInteg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>aws iam add-user-to-group --group-name k8sAdmin --user-name PaulAdmin
</span></span><span style="display:flex;"><span>aws iam add-user-to-group --group-name k8sDev --user-name JeanDev
</span></span><span style="display:flex;"><span>aws iam add-user-to-group --group-name k8sInteg --user-name PierreInteg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get Access key for the users</span>
</span></span><span style="display:flex;"><span>aws iam create-access-key --user-name PaulAdmin | tee /tmp/PaulAdmin.json
</span></span><span style="display:flex;"><span>aws iam create-access-key --user-name JeanDev | tee /tmp/JeanDev.json
</span></span><span style="display:flex;"><span>aws iam create-access-key --user-name PierreInteg | tee /tmp/PierreInteg.json
</span></span></code></pre></div><h3 id="configure-kubernetes-rbac">Configure Kubernetes RBAC</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl create namespace integration
</span></span><span style="display:flex;"><span>kubectl create namespace development
</span></span></code></pre></div><p>Configuring access to development namespace:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt; EOF | kubectl apply -f - -n development</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">dev-role</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">apiGroups</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;apps&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;batch&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;extensions&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;configmaps&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;cronjobs&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;deployments&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;events&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;ingresses&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;jobs&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;pods&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;pods/attach&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;pods/exec&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;pods/log&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;pods/portforward&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;secrets&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;services&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">verbs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;create&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;delete&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;describe&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;get&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;list&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;patch&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;update&#34;</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">RoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">dev-role-binding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">User</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">dev-user</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">dev-role</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><p>Configuring access to integration namespace:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">cat &lt;&lt; EOF | kubectl apply -f - -n integration</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">integ-role</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">apiGroups</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;apps&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;batch&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;extensions&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;configmaps&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;cronjobs&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;deployments&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;events&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;ingresses&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;jobs&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;pods&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;pods/attach&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;pods/exec&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;pods/log&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;pods/portforward&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;secrets&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;services&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">verbs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;create&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;delete&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;describe&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;get&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;list&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;patch&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;update&#34;</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">RoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">integ-role-binding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">User</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">integ-user</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">integ-role</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">EOF</span>
</span></span></code></pre></div><p>Gives Access to our IAM Roles to EKS Cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>eksctl create iamidentitymapping <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --cluster eksworkshop-eksctl <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --arn arn:aws:iam::<span style="color:#e6db74">${</span>ACCOUNT_ID<span style="color:#e6db74">}</span>:role/k8sDev <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --username dev-user
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>eksctl create iamidentitymapping <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --cluster eksworkshop-eksctl <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --arn arn:aws:iam::<span style="color:#e6db74">${</span>ACCOUNT_ID<span style="color:#e6db74">}</span>:role/k8sInteg <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --username integ-user
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>eksctl create iamidentitymapping <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --cluster eksworkshop-eksctl <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --arn arn:aws:iam::<span style="color:#e6db74">${</span>ACCOUNT_ID<span style="color:#e6db74">}</span>:role/k8sAdmin <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --username admin <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --group system:masters
</span></span></code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="calico" term="calico" label="calico" />
                             
                                <category scheme="aws" term="aws" label="AWS" />
                             
                                <category scheme="eks" term="eks" label="EKS" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[AWS EKS Network Solutions]]></title>
            <link href="https://devopstales.github.io/cloud/aws-eks-networking/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/kubernetes/kubernetes-networking-2/?utm_source=atom_feed" rel="related" type="text/html" title="Understanding kubernetes networking: owerlay networks" />
                <link href="https://devopstales.github.io/kubernetes/kubernetes-networking-1/?utm_source=atom_feed" rel="related" type="text/html" title="Understanding kubernetes networking: pods and services" />
                <link href="https://devopstales.github.io/kubernetes/multus-calico/?utm_source=atom_feed" rel="related" type="text/html" title="Use multus to separate metwork trafics" />
                <link href="https://devopstales.github.io/kubernetes/k8s-security/?utm_source=atom_feed" rel="related" type="text/html" title="Best Practices to keeping Kubernetes Clusters Secure" />
                <link href="https://devopstales.github.io/kubernetes/k8s-calico-ebpf/?utm_source=atom_feed" rel="related" type="text/html" title="Install k8s and calico with eBPF mode" />
            
                <id>https://devopstales.github.io/cloud/aws-eks-networking/</id>
            
            
            <published>2022-02-10T00:00:00+00:00</published>
            <updated>2022-02-10T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will analyse the available CNI plugins for Amazon Elastic Kubernetes Service.</p>
<p>Cloud providers like AWS, Google are in the market with their managed Kubernetes offering, which is one of the easiest ways to getting started with the Kubernetes journey. The cloud provider manage most of the components, but you still get a chance to choose your own CNI. Different providers offers different CNI plugins. AWS give you two option Calico or VPC CNI.</p>
<h3 id="vpc-cni">VPC CNI</h3>
<p>Amazon VPC CNI Plugin assigns a private IPv4 or IPv6 address from your VPC to each pod. By default, the number of pods can you run on a worker is based on the number of IP addresses assigned to Elastic network interfaces and the number of network interfaces attached to your Amazon EC2 node. From the v1.19.0 support higher pod density per node by allow to assign /28 (16 IP addresses) prefixes, instead of assigning individual IP addresses to network interfaces. PAMD will derive a (/32) IP from these prefixes for pod IP allocation.</p>
<p>To add or update the add-on on your cluster, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/managing-vpc-cni.html">Managing the Amazon VPC CNI add-on</a>. If you want to update the version in the existing cluster, run the below command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>eksctl update addon <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> --name vpc-cni <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> --version &lt;1.9.x-eksbuild.y&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> --cluster &lt;my-cluster&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> --force
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kubectl set env daemonset aws-node <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> -n kube-system ENABLE_PREFIX_DELEGATION<span style="color:#f92672">=</span>true
</span></span></code></pre></div><p>To use this CNI you need an <a href="https://docs.aws.amazon.com/eks/latest/userguide/managing-vpc-cni.html">Amazon EC2 Nitro instances</a> for node groups in the cluster.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>eksctl create nodegroup <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --cluster &lt;my-cluster&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --region &lt;us-east-1&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --name &lt;my-nodegroup&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --node-type &lt;m5.large&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --managed <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --max-pods-per-node &lt;110&gt; -- Count from the max pods calculator
</span></span></code></pre></div><h3 id="calico">Calico</h3>
<p>We can yous any other standerd CNI plugin, but the other suppertid CNI in EKS is Caliso. The huge advantage of Calico is the ability to create Network policies. Network policies are similar to AWS security groups in that you can create network ingress and egress rules. Instead of assigning instances to a security group, you assign network policies to pods using pod selectors and labels.</p>
<p>If you go with your own CNI, AWS will not be supporting any issues related to networking, as they don’t manage it. They are right at their end but definitely something you should watch out for.</p>
<p>The Other Problem is the communication with the api server from the pods. For every EKS cluster, AWS launches the control plane in a VPC which is managed by AWS. At the time of creating the control plane AWS creates a route table entry for your VPC CNI CIDR to the ENI of the control plane. This is how the API server is able to communicate to all the Nodes and pods in the cluster, but if we decide to use our own CNI, like calico, we change the POD CIDR, and now the API server has no clue on how to route the traffic to the pod IP.</p>
<p><img src="/img/include/aws-eks-vpc-cni.png" alt="AWS VPN CNI Routing"  class="zoomable" /></p>
<p>Some situation It can be a problem fi your pods can&rsquo;t communicate with te api server. This means you cannot use admission webhooks, operators or Service Mesh. On the other hand it can be a security feature too.</p>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="k8s-network" term="k8s-network" label="k8s-network" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="calico" term="calico" label="calico" />
                             
                                <category scheme="aws" term="aws" label="AWS" />
                             
                                <category scheme="eks" term="eks" label="EKS" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Create K8S cluster with Terraform and GitlabCI]]></title>
            <link href="https://devopstales.github.io/cloud/gke-gitlab-terraform/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/kubernetes/multus-calico/?utm_source=atom_feed" rel="related" type="text/html" title="Use multus to separate metwork trafics" />
                <link href="https://devopstales.github.io/kubernetes/multus/?utm_source=atom_feed" rel="related" type="text/html" title="Use Multus CNI in Kubernetes" />
                <link href="https://devopstales.github.io/kubernetes/trivy-operator-2.2/?utm_source=atom_feed" rel="related" type="text/html" title="trivy-operator 2.2: Patch release for Admisssion controller" />
                <link href="https://devopstales.github.io/kubernetes/trivy-operator-2.1/?utm_source=atom_feed" rel="related" type="text/html" title="trivy-operator 2.1: Trivy-operator is now an Admisssion controller too!!!" />
                <link href="https://devopstales.github.io/kubernetes/k8s-central-oauth/?utm_source=atom_feed" rel="related" type="text/html" title="Central authentication with oauth2-proxy" />
            
                <id>https://devopstales.github.io/cloud/gke-gitlab-terraform/</id>
            
            
            <published>2022-01-30T00:00:00+00:00</published>
            <updated>2022-01-30T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how how you can create a K8S cluster with Terraform and GitlabCI.</p>
<h3 id="create-service-account-on-gcp">create service account on GCP</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gcloud config set project gke-terraform-test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gcloud iam service-accounts create gitlab-terraform <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--display-name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;gitlab-terraform&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--project<span style="color:#f92672">=</span>gke-terraform-test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gcloud iam service-accounts add-iam-policy-binding <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>gitlab-terraform@gke-terraform-test.iam.gserviceaccount.com <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--member<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;serviceAccount:gitlab-terraform@gke-terraform-test.iam.gserviceaccount.com&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--role<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;roles/compute.networkAdmin&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gcloud iam service-accounts add-iam-policy-binding <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>gitlab-terraform@gke-terraform-test.iam.gserviceaccount.com <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--member<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;serviceAccount:gitlab-terraform@gke-terraform-test.iam.gserviceaccount.com&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--role<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;roles/container.admin&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--project<span style="color:#f92672">=</span>gke-terraform-test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gcloud iam service-accounts add-iam-policy-binding <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>gitlab-terraform@gke-terraform-test.iam.gserviceaccount.com <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--member<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;serviceAccount:gitlab-terraform@gke-terraform-test.iam.gserviceaccount.com&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--role<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;roles/iam.serviceAccountUser&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--project<span style="color:#f92672">=</span>gke-terraform-test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gcloud iam service-accounts add-iam-policy-binding <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>gitlab-terraform@gke-terraform-test.iam.gserviceaccount.com <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--member<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;serviceAccount:gitlab-terraform@gke-terraform-test.iam.gserviceaccount.com&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--role<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;roles/iam.serviceAccountAdmin&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--project<span style="color:#f92672">=</span>gke-terraform-test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gcloud iam service-accounts keys create serviceaccount.json <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--iam-account <span style="color:#e6db74">&#34;gitlab-terraform@gke-terraform-test.iam.gserviceaccount.com&#34;</span>
</span></span></code></pre></div><p>Store the content of the <code>serviceaccount.json</code> as base64 encoded value in gitlab variable called <code>BASE64_GOOGLE_CREDENTIALS</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>base64 serviceaccount.json | tr -d <span style="color:#ae81ff">\\</span>n
</span></span></code></pre></div><h3 id="create-gitlab-ciyaml">Create gitlab-ci.yaml</h3>
<p>Create CI environment variable:</p>
<p><code>TF_VAR_gitlab_token</code>:  GitLab personal access token with api scope to add the provisioned cluster to your GitLab group.
<code>TF_ROOT</code>: terraform
<code>TF_VAR_gcp_project</code>: gke-terraform-test</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano gitlab-ci.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">include</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">template</span>: <span style="color:#ae81ff">Terraform.gitlab-ci.yml</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">TF_STATE_NAME</span>: <span style="color:#ae81ff">production</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">TF_CACHE_KEY</span>: <span style="color:#ae81ff">production</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">TF_ROOT</span>: <span style="color:#ae81ff">terraform</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">TF_VAR_gcp_project</span>: <span style="color:#ae81ff">gke-terraform-test</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">before_script</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">export GOOGLE_CREDENTIALS=$(echo $BASE64_GOOGLE_CREDENTIALS | base64 -d)</span>
</span></span></code></pre></div><h3 id="create-terraform-file">Create terraform file</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mkdir  terraform
</span></span><span style="display:flex;"><span>cd
</span></span></code></pre></div><p>Import the <code>hashicorp/google</code> provider:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano providers.tf</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">terraform {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">required_providers {</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">google = {</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">source  = &#34;hashicorp/google&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">version = &#34;3.79.0&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">required_version = &#34;~&gt; 1.0.3&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">backend &#34;http&#34; {</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">provider &#34;google&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">project = var.project_id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">region  = var.region</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Generate Variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano variables.tf</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">variable &#34;project_id&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">description = &#34;project id&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">variable &#34;region&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">description = &#34;region&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">variable &#34;gke_num_nodes&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">default     = 1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">description = &#34;number of gke nodes per zone&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">variable &#34;machine_type&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">type        = string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">description = &#34;Type of the node compute engines.&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">variable &#34;disk_size_gb&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">type        = number</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">description = &#34;Size of the node&#39;s disk.&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">variable &#34;disk_type&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">type        = string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">description = &#34;Type of the node&#39;s disk.&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">variable &#34;cluster_version&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">default = &#34;1.20&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Create network and GKE Cluster:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano main.json</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">resource &#34;google_compute_network&#34; &#34;vpc&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">name                    = &#34;gke-test-vpc&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">auto_create_subnetworks = &#34;false&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">resource &#34;google_compute_subnetwork&#34; &#34;gke-test-network&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">name          = &#34;gke-test-network&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">region        = var.region</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">network       = google_compute_network.vpc.name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">ip_cidr_range = &#34;10.10.10.0/24&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">resource &#34;google_service_account&#34; &#34;default&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">account_id   = &#34;service-account-id&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">display_name = &#34;Service Account&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">resource &#34;google_container_cluster&#34; &#34;primary&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">name     = &#34;gke-test&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">location = var.region</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">min_master_version       = var.cluster_version</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">remove_default_node_pool = true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">initial_node_count       = 1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">network    = google_compute_network.vpc.name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">subnetwork = &#34;gke-test-network&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">resource &#34;google_container_node_pool&#34; &#34;primary_nodes&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">name       = &#34;${google_container_cluster.primary.name}-node-pool&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">location   = var.region</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">cluster    = google_container_cluster.primary.name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">node_count = var.gke_num_nodes</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">version    = var.cluster_version</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">management {</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">auto_repair  = &#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">auto_upgrade = &#34;true&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">node_config {</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">oauth_scopes = [</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;https://www.googleapis.com/auth/cloud-platform&#34;</span>,
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">labels = {</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">env = var.project_id</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">service_account = google_service_account.default.email</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">image_type      = &#34;COS&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">machine_type    = var.machine_type</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">disk_size_gb    = var.disk_size_gb</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">disk_type       = var.disk_type</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">preemptible     = false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">tags         = [</span>
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;gke-node&#34;</span>,
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">metadata = {</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">disable-legacy-endpoints = &#34;true&#34;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Add value for the variables:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano terraform.tfvars</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">project_id   = &#34;gke-terraform-test&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">region       = &#34;europe-west1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">gke_num_nodes = 1</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">machine_type  = &#34;g1-small&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">disk_type     = &#34;pd-standard&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">disk_size_gb  = 10</span>
</span></span></code></pre></div><p>Configure what data will print in the end of the deploy:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano outputs.tf</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">output &#34;region&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">value       = var.region</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">description = &#34;GCloud Region&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">output &#34;project_id&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">value       = var.project_id</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">description = &#34;GCloud Project ID&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">output &#34;kubernetes_cluster_name&#34; {</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">value       = google_container_cluster.primary.name</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">description = &#34;GKE Cluster Name&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If you created all the fles it looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd ..
</span></span><span style="display:flex;"><span>tree .
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── README.md
</span></span><span style="display:flex;"><span>└── terraform
</span></span><span style="display:flex;"><span>    ├── providers.tf
</span></span><span style="display:flex;"><span>    ├── main.tf
</span></span><span style="display:flex;"><span>    ├── outputs.tf
</span></span><span style="display:flex;"><span>    ├── terraform.tfvars
</span></span><span style="display:flex;"><span>    ├── variables.tf
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> directory, <span style="color:#ae81ff">5</span> files
</span></span></code></pre></div><p>Now you can push to the gitlab project:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add -A
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;base terraform commit&#34;</span>
</span></span><span style="display:flex;"><span>git push
</span></span></code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="terraform" term="terraform" label="terraform" />
                             
                                <category scheme="gcp" term="gcp" label="GCP" />
                             
                                <category scheme="gitlab" term="gitlab" label="Gitlab" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[How to migrate PostgreSQL databases to Google Cloud SQL?]]></title>
            <link href="https://devopstales.github.io/cloud/gcp-cloud-sql-postgresql-migration/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://devopstales.github.io/cloud/gcp-cloud-sql-postgresql-migration/</id>
            
            
            <published>2022-01-13T00:00:00+00:00</published>
            <updated>2022-01-13T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how you can migrate your PostgreSQL database to GCP Cloud SQL.</p>
<h3 id="what-is-cloud-sql">What is Cloud SQL?</h3>
<h3 id="create-a-postgresql-instance">Create a PostgreSQL Instance</h3>
<p>I will create the PostgreSQL instance called postgresql-prod-n8gh.</p>
<p><img src="/img/include/gcp-psql01.png" alt="Create psql server"  class="zoomable" /></p>
<p>I will also create the db_admin user for postgresql-prod-n8gh instance in Google CloudSQL platform USERS section.</p>
<p><img src="/img/include/gcp-psql02.png" alt="Create psql server"  class="zoomable" /></p>
<p>I will give the access my IP for connection in Cloud SQL platform AUTHORIZATION section.</p>
<p><img src="/img/include/gcp-psql03.png" alt="Create psql server"  class="zoomable" /></p>
<p>I will log in with the db_admin user to postgresql-prod-n8gh.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>psql -h 38.56.110.96 -U db_admin -d postgres -W
</span></span></code></pre></div><h2 id="how-to-migrate">How to migrate?</h2>
<p>You hawe to option to migrate to Cloud SQL. The first is the standard <code>pg_dump</code>. The second is Replication with Seamless Cutover.</p>
<h3 id="dump-transfer-and-import">Dump, Transfer, and Import</h3>
<p>First, we would export the data using <code>pg_dump</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pg_dump -U <span style="color:#f92672">[</span>USERNAME<span style="color:#f92672">]</span> --format<span style="color:#f92672">=</span>plain --no-owner --no-acl <span style="color:#f92672">[</span>DATABASE_NAME<span style="color:#f92672">]</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>| sed -E <span style="color:#e6db74">&#39;s/(DROP|CREATE|COMMENT ON) EXTENSION/-- \1 EXTENSION/g&#39;</span> &gt; <span style="color:#f92672">[</span>SQL_FILE<span style="color:#f92672">]</span>.sql
</span></span></code></pre></div><p>Then we have to transfer the dump to Google Cloud Storage. I will go to the Cloud Storage to create Bucket on Google Cloud Platform.</p>
<p><img src="/img/include/gcp-psql04.png" alt="Create Bucket"  class="zoomable" /></p>
<p><img src="/img/include/gcp-psql05.png" alt="Create Bucket"  class="zoomable" /></p>
<p>I will right-click on the postgres-prod-master-dump to edit bucket&rsquo;s permissions.</p>
<p><img src="/img/include/gcp-psql06.png" alt="Create Bucket"  class="zoomable" /></p>
<p>I need to change the Cloud API access scope of the remote-server instance to access and write to Cloud Storage.</p>
<p><img src="/img/include/gcp-psql07.png" alt="Create Bucket"  class="zoomable" /></p>
<p>I will run the following command for moving prod.sql dump to the postgres-prod-master-dump bucket in the remote-server instance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gsutil cp prod.sql gs://postgres-prod-master-dump
</span></span></code></pre></div><p>Finally, we would run the import. I will return back to the postgresql-prod-n8gh instance that created on Cloud SQL. I will click the IMPORT section in the Cloud SQL platform.</p>
<p><img src="/img/include/gcp-psql08.png" alt="Import db"  class="zoomable" /></p>
<p><img src="/img/include/gcp-psql09.png" alt="Import db"  class="zoomable" /></p>
<h3 id="replication-with-seamless-cutover">Replication with Seamless Cutover</h3>
<p>The Database Migration service of GCP is a logical replication between source and destination database and then first take the full dump from source and restore it on destination, and then it also keep replicating the ongoing data from source to destination and keep destination in sync with source which avoid downtime, once we see there is no lag between both the databases (we can see it in dms console) we will promote the cloud sql instance and redirect the application to cloud sql.</p>
<p>First we need some configuration on the On-premise or self-managed source PostgreSQL server:</p>
<p>Install the pglogical package on the server.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>apt install postgresql-11-pglogical -y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nano postgresql.conf
</span></span><span style="display:flex;"><span><span style="color:#75715e"># logical replication</span>
</span></span><span style="display:flex;"><span>wal_level <span style="color:#f92672">=</span> logical
</span></span><span style="display:flex;"><span>shared_preload_libraries <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;pglogical&#39;</span>
</span></span><span style="display:flex;"><span>track_commit_timestamp <span style="color:#f92672">=</span> on
</span></span><span style="display:flex;"><span>pglogical.conflict_resolution <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;last_update_wins&#39;</span>
</span></span></code></pre></div><p>Connect to the instance and set the following parameters, as needed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo su - postgres
</span></span><span style="display:flex;"><span>psql
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ALTER SYSTEM SET shared_preload_libraries <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;pglogical&#39;</span>;
</span></span><span style="display:flex;"><span>ALTER SYSTEM SET wal_level <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;logical&#39;</span>;
</span></span><span style="display:flex;"><span>ALTER SYSTEM SET wal_sender_timeout <span style="color:#f92672">=</span> 0;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>GRANT USAGE on public to replicator;
</span></span><span style="display:flex;"><span>GRANT USAGE on pglogical to replicator;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">\c</span> backup_test
</span></span><span style="display:flex;"><span>CREATE EXTENSION IF NOT EXISTS pglogical;
</span></span><span style="display:flex;"><span>GRANT USAGE on SCHEMA pglogical to PUBLIC;
</span></span><span style="display:flex;"><span>GRANT SELECT on ALL TABLES in SCHEMA pglogical to replicator;
</span></span><span style="display:flex;"><span>GRANT SELECT on ALL TABLES in SCHEMA public to replicator;
</span></span><span style="display:flex;"><span>GRANT SELECT on ALL SEQUENCES in SCHEMA public to replicator;
</span></span><span style="display:flex;"><span>GRANT SELECT on ALL SEQUENCES in SCHEMA pglogical to replicator;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">\c</span> postgres
</span></span><span style="display:flex;"><span>CREATE EXTENSION IF NOT EXISTS pglogical;
</span></span><span style="display:flex;"><span>GRANT USAGE on SCHEMA pglogical to PUBLIC;
</span></span><span style="display:flex;"><span>GRANT SELECT on ALL TABLES in SCHEMA pglogical to replicator;
</span></span><span style="display:flex;"><span>GRANT SELECT on ALL TABLES in SCHEMA public to replicator;
</span></span><span style="display:flex;"><span>GRANT SELECT on ALL SEQUENCES in SCHEMA public to replicator;
</span></span><span style="display:flex;"><span>GRANT SELECT on ALL SEQUENCES in SCHEMA pglogical to replicator;
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">\q</span>
</span></span></code></pre></div><p>Now we need to create a source connection profile: Go to the <code>Database Migration</code> page in the <code>Google Cloud Console</code> and select <code>Connection profiles</code> page and click on <code>create profile</code>.</p>
<p><img src="/img/include/gcp-psql10.png" alt="Import db"  class="zoomable" /></p>
<p>Select a Postgresql as Sourcedatabase engine. Enter hostname, port name, username and password to connect to the source database. Select the region and click on create.</p>
<p><img src="/img/include/gcp-psql11.png" alt="Import db"  class="zoomable" /></p>
<p>Now we can use this <code>create profile</code> to create a <code> Migration jobs</code>. Go to the <code>Migration jobs</code> page in the <code>Google Cloud Console</code> the click <code>CREATE MIGRATION JOB</code> at the top of the page.</p>
<p><img src="/img/include/gcp-psql12.png" alt="Import db"  class="zoomable" /></p>
<p>Select the source database engine the select the destination region for your migration. This is where the Database Migration Service instance is created, and the new database engine will be created. Specify the migration job type: Continuous (snapshot + ongoing changes).</p>
<p><img src="/img/include/gcp-psql13.png" alt="Import db"  class="zoomable" /></p>
<p>As we have already created a connection profile, then select it from the list of existing connection profiles.</p>
<p><img src="/img/include/gcp-psql14.png" alt="Import db"  class="zoomable" /></p>
<p>Configure a Destination cloud sql instance</p>
<p><img src="/img/include/gcp-psql15.png" alt="Import db"  class="zoomable" /></p>
<p>Choose whether to connect to this instance via private or public IP address. It is recommended to use Private IP. If you are using Private IP then select the VPC name as well, if you are using public IP just select it and move on to set the machine type.</p>
<p><img src="/img/include/gcp-psql16.png" alt="Import db"  class="zoomable" /></p>
<p>Select the machine type for the Cloud SQL instance. The disk size must be equal to or greater than the source database size, make sure automatic storage increase is enabled.</p>
<p><img src="/img/include/gcp-psql17.png" alt="Import db"  class="zoomable" /></p>
<p>Define connectivity method: From the Connectivity method drop-down menu, select a network connectivity method. This method defines how the newly created Cloud SQL instance will connect to the source database. If you have selected public ip at the time of destination instance creation then use the connectivity method as IP allowlist.</p>
<p><img src="/img/include/gcp-psql18.png" alt="Import db"  class="zoomable" /></p>
<p>Test and create the migration job:</p>
<p><img src="/img/include/gcp-psql19.png" alt="Import db"  class="zoomable" /></p>
<p>Once the job has been started after some time the status of job will be changes as below</p>
<p><img src="/img/include/gcp-psql20.png" alt="Import db"  class="zoomable" /></p>
<p>And then once dump and restore completed job status will be changed as below</p>
<p><img src="/img/include/gcp-psql21.png" alt="Import db"  class="zoomable" /></p>
<p>Once you see replication as 0 bytes for a long time, it means all the data has been migrated to the destination instance.</p>
<p><img src="/img/include/gcp-psql22.png" alt="Import db"  class="zoomable" /></p>
<p>Promoting a migration:</p>
<p><img src="/img/include/gcp-psql23.png" alt="Import db"  class="zoomable" /></p>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="gcp" term="gcp" label="gcp" />
                             
                                <category scheme="google-cloud-platform" term="google-cloud-platform" label="google-cloud-platform" />
                             
                                <category scheme="postgresql" term="postgresql" label="postgresql" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="gcp" term="gcp" label="gcp" />
                             
                                <category scheme="google-cloud-platform" term="google-cloud-platform" label="google cloud platform" />
                             
                                <category scheme="postgresql" term="postgresql" label="postgresql" />
                             
                                <category scheme="cloud-sql" term="cloud-sql" label="Cloud Sql" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[How to deploy a Domain Controller on Microsoft Azure]]></title>
            <link href="https://devopstales.github.io/cloud/azure-dc-deploy/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aks-registry/?utm_source=atom_feed" rel="related" type="text/html" title="Azure Conainer Registry integration for AKS" />
                <link href="https://devopstales.github.io/cloud/aks-ingress-controller/?utm_source=atom_feed" rel="related" type="text/html" title="Install Nginx Ingress Controller to AKS" />
                <link href="https://devopstales.github.io/cloud/aks/?utm_source=atom_feed" rel="related" type="text/html" title="Install AKS Cluster" />
            
                <id>https://devopstales.github.io/cloud/azure-dc-deploy/</id>
            
            
            <published>2021-12-07T00:00:00+00:00</published>
            <updated>2021-12-07T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can create a hybrid Acrive Directory Domain with on-premiss and Azure DCs.</p>
<h3 id="requirements">Requirements</h3>
<ul>
<li>An Azure AD tenant with an active subscription.</li>
<li>A Virtual Network in Azure that doesn’t overlap with your on-premises network.</li>
<li>A continuous line of sight between your on-premises domain controller and Microsoft Azure (Azure VPN Gateway, ExpressRoute or an NVA).</li>
</ul>
<h3 id="deploy-a-virtual-machine">Deploy A Virtual Machine</h3>
<ul>
<li>Go to the azure portal (<a href="https://portal.azure.com">https://portal.azure.com</a>) and login</li>
<li>Create a new Windows Server resource. I Recommened using Windows Server 2019.</li>
</ul>
<p><img src="/img/include/azuredc01.jpg" alt="Bacic info"  class="zoomable" /></p>
<p>For safety reasons, you should set <code>allow selected ports</code> to <code>none</code>.</p>
<p><img src="/img/include/azuredc02.jpg" alt="disallow selected ports"  class="zoomable" /></p>
<ul>
<li>Click Next to configure vm disks.</li>
</ul>
<blockquote>
<p>A Single VM without premium SSD’s has an SLA of 99.95%. A Single VM with premium SSD’s (all disks) has an SLA of 99.99%. I Recommend using premium disks for your domain controller.</p></blockquote>
<ul>
<li>Add a second (premium ssd) disk with host caching set to none. This disk will contain the database, logs and sysvol folders.</li>
</ul>
<p><img src="/img/include/azuredc03.jpg" alt="add premium ssd"  class="zoomable" /></p>
<ul>
<li>Click Next to configure networking. Attach the VM to your existing vNet that’s connected with your on-premises domain. Don’t assign a public IP address to your virtual machine as recommended by Microsoft – use a VPN or Azure Bastion to connect to the machine.</li>
</ul>
<p><img src="/img/include/azuredc04.jpg" alt="configure network"  class="zoomable" /></p>
<ul>
<li>Finish all steps to create the virtual machine. Don’t enable <code>Login with AAD credentials</code> or <code>Auto-shutdown</code>.</li>
</ul>
<h3 id="configure-static-ip">Configure static IP</h3>
<p>The virtual machine must have a static IP address.</p>
<ul>
<li>Select network interface of your new virtual machine</li>
</ul>
<p><img src="/img/include/azuredc05.jpg" alt="static ip"  class="zoomable" /></p>
<p><img src="/img/include/azuredc06.jpg" alt="static ip"  class="zoomable" /></p>
<ul>
<li>Select Static and configure the IP address. Don’t forget to click save – a reboot may be required. You should never configure the static IP address on the VM itself as you do on-premises.</li>
</ul>
<p><img src="/img/include/azuredc07.jpg" alt="static ip"  class="zoomable" /></p>
<h3 id="domain-join">Domain join</h3>
<ul>
<li>Test if you can ping the VM from your on-premises domain controller and the other way around.</li>
<li>Open Active Directory Sites &amp; Services on your on-premises domain controller.</li>
<li>Create a new site</li>
</ul>
<p><img src="/img/include/azuredc08.jpg" alt="new site"  class="zoomable" /></p>
<p><img src="/img/include/azuredc09.jpg" alt="new site"  class="zoomable" /></p>
<ul>
<li>Right click Subnets and select New Subnet.</li>
</ul>
<p><img src="/img/include/azuredc10.jpg" alt="new subnet"  class="zoomable" /></p>
<p><img src="/img/include/azuredc11.jpg" alt="new subnet"  class="zoomable" /></p>
<ul>
<li>Start Add Roles and Features on the Azure VM.</li>
<li>Add the Active Directory Domain Services role and all necessary features.</li>
<li>Promote this server to a domain controller.</li>
<li>Select Add a domain controller to an existing domain.</li>
</ul>
<p><img src="/img/include/azuredc12.jpg" alt="join domain"  class="zoomable" /></p>
<p><img src="/img/include/azuredc13.jpg" alt="join domain"  class="zoomable" /></p>
<p><img src="/img/include/azuredc14.jpg" alt="join domain"  class="zoomable" /></p>
<ul>
<li>Reboot the virtual machine.</li>
</ul>
<h3 id="validate-dc-dns-settings-on-azure">Validate DC DNS Settings on Azure</h3>
<p>When the virtual machine is back online, it probably has static DNS servers configured – this happened because of the AD DC roles. Change this back to Obtain DNS server address automatically.</p>
<p><img src="/img/include/azuredc15.jpg" alt="configure dns server"  class="zoomable" /></p>
<p><img src="/img/include/azuredc16.jpg" alt="configure dns server"  class="zoomable" /></p>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="azure" term="azure" label="Azure" />
                             
                                <category scheme="aks" term="aks" label="AKS" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[GKE cluster’s egress traffic via Cloud NAT]]></title>
            <link href="https://devopstales.github.io/cloud/gke-egress/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/gcp-vm-export/?utm_source=atom_feed" rel="related" type="text/html" title="Export GCP VM to S3" />
            
                <id>https://devopstales.github.io/cloud/gke-egress/</id>
            
            
            <published>2021-07-01T00:00:00+00:00</published>
            <updated>2021-07-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how you can can reroute the GKE egress traffic via cloud NAT.</p>
<p>In Public GKE cluster wach node has it&rsquo;s own external IP address and the nodes route all egress traffic through there external IP. This external IPs can change over time. In the case of a private GKE cluster, all the nodes will have an internal ip address and you can define a cloud NAT for all your egress traffic from the cluster. So public cluster is not a ideal solutinon if you need a static ip list for source ip whtelistink, but here is a solution.</p>
<h3 id="create-a-cloud-nat-gateway">Create a cloud NAT gateway</h3>
<p>We will use a daemon set in GKE , that will rewrite the ip-table rules in the GKE Nodes to masquerade the outbound traffic.</p>
<p>Select the VPC in which you have deployed your public GKE cluster and create a new cloud router. Create it manualli to configure the NAT gateway’s ip. This will be the ip-address that you will give to your third party vendor for whitelisting your incoming connection.</p>
<p>Create the config map and the daemon-set:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano config.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">nonMasqueradeCIDRs</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">0.0.0.0</span><span style="color:#ae81ff">/0</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">masqLinkLocal</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">resyncInterval</span>: <span style="color:#ae81ff">60s</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl create configmap ip-masq-agent --from-file config.yaml --namespace kube-system
</span></span></code></pre></div><p>Deploy the masq-agent:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano ip-masq-agent.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">DaemonSet</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">ip-masq-agent</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">kube-system</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">matchLabels</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">k8s-app</span>: <span style="color:#ae81ff">ip-masq-agent</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">k8s-app</span>: <span style="color:#ae81ff">ip-masq-agent</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">hostNetwork</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">ip-masq-agent</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">gcr.io/google-containers/ip-masq-agent-amd64:v2.4.1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>            - --<span style="color:#ae81ff">masq-chain=IP-MASQ</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># To non-masquerade reserved IP ranges by default, uncomment the line below.</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># - --nomasq-all-reserved-ranges</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">securityContext</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">privileged</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">config</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/etc/config</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">config</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">configMap</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># Note this ConfigMap must be created in the same namespace as the</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># daemon pods - this spec uses kube-system</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">ip-masq-agent</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">optional</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">items</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#75715e"># The daemon looks for its config in a YAML file at /etc/config/ip-masq-agent</span>
</span></span><span style="display:flex;"><span>              - <span style="color:#f92672">key</span>: <span style="color:#ae81ff">config</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">path</span>: <span style="color:#ae81ff">ip-masq-agent</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">tolerations</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">effect</span>: <span style="color:#ae81ff">NoSchedule</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">operator</span>: <span style="color:#ae81ff">Exists</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">effect</span>: <span style="color:#ae81ff">NoExecute</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">operator</span>: <span style="color:#ae81ff">Exists</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">key</span>: <span style="color:#e6db74">&#34;CriticalAddonsOnly&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">operator</span>: <span style="color:#e6db74">&#34;Exists&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply -f ip-masq-agent.yaml
</span></span></code></pre></div><p>After the creation ogthe ip-masq-agent check the firewall rules of the GKE nodes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo iptables -t NAT -L IP-MASQ
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Chain IP-MASQ <span style="color:#f92672">(</span><span style="color:#ae81ff">2</span> references<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>target     prot opt cource      destination
</span></span><span style="display:flex;"><span>RETURN     all  --  anywhere    anywhere      /* ip-masq-agent: local traffic is not subject to MASQUERADE */
</span></span><span style="display:flex;"><span>MASQUERADE  all  --  anywhere    anywhere      /* ip-masq-agent: outbound traffic is subject to MASQUERADE <span style="color:#f92672">(</span>must be last in chain<span style="color:#f92672">)</span> */
</span></span></code></pre></div><p>So the egress traffic from GKE to internet will go via the cloud NAT’s gateway ip address.</p>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="k8s-network" term="k8s-network" label="k8s-network" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="gcp" term="gcp" label="GCP" />
                             
                                <category scheme="gke" term="gke" label="GKE" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Azure Conainer Registry integration for AKS]]></title>
            <link href="https://devopstales.github.io/cloud/aks-registry/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aks-ingress-controller/?utm_source=atom_feed" rel="related" type="text/html" title="Install Nginx Ingress Controller to AKS" />
                <link href="https://devopstales.github.io/cloud/aks/?utm_source=atom_feed" rel="related" type="text/html" title="Install AKS Cluster" />
                <link href="https://devopstales.github.io/linux/jitsi-meet/?utm_source=atom_feed" rel="related" type="text/html" title="Install Jitsi meet" />
            
                <id>https://devopstales.github.io/cloud/aks-registry/</id>
            
            
            <published>2020-11-18T00:00:00+00:00</published>
            <updated>2020-11-18T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can integrate Azure Container Registry to AKS (Azure Kubernetes Service) Cluster.</p>


<H3>Parts of the AKS series</H3>
<ul>
     <li>Part1: <a href="../../cloud/AKS/">Install AKS Cluster</a></li>
     <li>Part2: <a href="../../cloud/aks-registry/">Integrate AKS with Registry</a></li>
     <li>Part3: <a href="../../cloud/aks-azure-key-vault-akv2k8s/">Azure Key Vault AKS integration with akv2k8s</a>
     <li>Part4: <a href="../../cloud/aks-azure-key-vault-csi/">Azure Key Vault AKS integration with CSI Driver</a>
     <li>Part5: <a href="../../cloud/aks-ingress-controller-v2/">Install Ingress contreoller To AKS</a></li>
     <li>Part6: <a href="../../cloud/azure-private-dns-with-AKS-ingress-controller/">Use Azure Private DNS with AKS Ingress Controller</a></li>
     <li>Part7: <a href="../../cloud/custom-ssl-and-dns-on-AKS-ingress-controller/">Configure custom SSL and DNS on AKS Ingress Controller</a></li>
</ul>

<!---
https://learn.microsoft.com/en-us/azure/aks/app-routing-nginx-prometheus
https://learn.microsoft.com/en-us/azure/aks/keda-about
https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/integrate-keda#scalers
https://learn.microsoft.com/en-us/azure/load-testing/quickstart-create-and-run-load-test
-->


<h3 id="set-the-subscription">Set the subscription</h3>
<pre tabindex="0"><code>az login
az account list
az account set --subscription &lt;SUBSCRIPTION_ID&gt;
</code></pre><h3 id="creating-an-azure-resource-group">Creating an Azure Resource Group</h3>
<pre tabindex="0"><code>az group create --location &lt;REGION_NAME&gt; --name &lt;RESOURCE_GROUP_NAME&gt;
</code></pre><h3 id="provisioning-an-azure-container-registry">Provisioning an Azure Container Registry</h3>
<pre tabindex="0"><code>az acr create --name &lt;REGISTRY_NAME&gt; \
--resource-group &lt;RESOURCE_GROUP_NAME&gt; \
--sku Basic


az ad sp create-for-rbac \
  --scopes /subscriptions/&lt;SUBSCRIPTION_ID&gt;/resourcegroups/&lt;RESOURCE_GROUP_NAME&gt;/providers/Microsoft.ContainerRegistry/registries/&lt;REGISTRY_NAME&gt; \
  --role Contributor \
  --name &lt;SERVICE_PRINCIPAL_NAME&gt;

docker login &lt;REGISTRY_NAME&gt; -u &lt;CLIENT_ID&gt;
</code></pre><h3 id="create-a-new-aks-cluster-with-acr-integration">Create a new AKS cluster with ACR integration</h3>
<pre tabindex="0"><code>az aks create -n &lt;KUBERNETS_CLUSTER_NAME&gt; \
-g &lt;RESOURCE_GROUP_NAME&gt; \
--generate-ssh-keys \
--attach-acr &lt;REGISTRY_NAME&gt;
</code></pre><h3 id="configure-acr-integration-for-existing-aks-clusters">Configure ACR integration for existing AKS clusters</h3>
<pre tabindex="0"><code>az aks update -n &lt;KUBERNETS_CLUSTER_NAME&gt; \
-g &lt;RESOURCE_GROUP_NAME&gt; \
--attach-acr &lt;REGISTRY_NAME&gt;
</code></pre><h3 id="use-kubernetes-secret-for-registry-integration">Use Kubernetes Secret for registry integration</h3>
<pre tabindex="0"><code>ACR_NAME=&lt;REGISTRY_NAME&gt;
ACR_UNAME=$(az acr credential show -n $ACR_NAME --query=&#34;username&#34; -o tsv)
ACR_PASSWD=$(az acr credential show -n $ACR_NAME --query=&#34;passwords[0].value&#34; -o tsv)

kubectl create secret docker-registry acr-secret \
  --docker-server=$ACR_NAME \
  --docker-username=$ACR_UNAME \
  --docker-password=$ACR_PASSWD \
  --docker-email=ignorethis@email.com
</code></pre><p>Use secret in Kubernetes</p>
<pre tabindex="0"><code>---
apiVersion: v1
kind: Pod
metadata:
  name: sample-pod
spec:
  containers:
  - name: sample-pod-container
    image: youruniquename.azurecr.io/sample-container:0.0.1
  imagePullSecrets:
  - name: acr-secret
</code></pre><h3 id="use-service-account-for-authentication">Use Service Account For authentication</h3>
<pre tabindex="0"><code>ACR_NAME=&lt;REGISTRY_NAME&gt;
ACR_UNAME=$()
ACR_PASSWD=$()

kubectl create secret docker-registry acr-secret \
  --docker-server=$ACR_NAME \
  --docker-username=$ACR_UNAME \
  --docker-password=$ACR_PASSWD \
  --docker-email=ignorethis@email.com
</code></pre><p>Use ServiceAccount in Kubernetes</p>
<pre tabindex="0"><code>--docker-password=$ACR_PASSWD \
--docker-email=ignorethis@email.com

---
apiVersion: v1
kind: ServiceAccount
metadata:
name: SampleAccount
namespace: default
imagePullSecrets:
- name: acr-secret
---
apiVersion: v1
kind: Pod
metadata:
name: sample-pod
spec:
containers:
- name: sample-pod-container
  image: youracrname.azurecr.io/sample-container:0.0.1
serviceAccountName: SampleAccount
</code></pre>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="azure" term="azure" label="Azure" />
                             
                                <category scheme="aks" term="aks" label="AKS" />
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Install Nginx Ingress Controller to AKS]]></title>
            <link href="https://devopstales.github.io/cloud/aks-ingress-controller/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/aks/?utm_source=atom_feed" rel="related" type="text/html" title="Install AKS Cluster" />
                <link href="https://devopstales.github.io/linux/jitsi-meet/?utm_source=atom_feed" rel="related" type="text/html" title="Install Jitsi meet" />
            
                <id>https://devopstales.github.io/cloud/aks-ingress-controller/</id>
            
            
            <published>2020-11-15T00:00:00+00:00</published>
            <updated>2020-11-15T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can install Nginx Ingress Controlle to AKS (Azure Kubernetes Service) Cluster.</p>


<H3>Parts of the AKS series</H3>
<ul>
     <li>Part1: <a href="../../cloud/AKS/">Install AKS Cluster</a></li>
     <li>Part2: <a href="../../cloud/aks-registry/">Integrate AKS with Registry</a></li>
     <li>Part3: <a href="../../cloud/aks-azure-key-vault-akv2k8s/">Azure Key Vault AKS integration with akv2k8s</a>
     <li>Part4: <a href="../../cloud/aks-azure-key-vault-csi/">Azure Key Vault AKS integration with CSI Driver</a>
     <li>Part5: <a href="../../cloud/aks-ingress-controller-v2/">Install Ingress contreoller To AKS</a></li>
     <li>Part6: <a href="../../cloud/azure-private-dns-with-AKS-ingress-controller/">Use Azure Private DNS with AKS Ingress Controller</a></li>
     <li>Part7: <a href="../../cloud/custom-ssl-and-dns-on-AKS-ingress-controller/">Configure custom SSL and DNS on AKS Ingress Controller</a></li>
</ul>

<!---
https://learn.microsoft.com/en-us/azure/aks/app-routing-nginx-prometheus
https://learn.microsoft.com/en-us/azure/aks/keda-about
https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/integrate-keda#scalers
https://learn.microsoft.com/en-us/azure/load-testing/quickstart-create-and-run-load-test
-->


<h3 id="get-aks-credentials">Get AKS credentials</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az login
</span></span><span style="display:flex;"><span>az aks get-credentials --resource-group test-cluster --name test-cluster
</span></span><span style="display:flex;"><span>kubectl get nodes
</span></span></code></pre></div><h3 id="create-ingress-with-static-public-ip">Create ingress with static public ip</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>az network public-ip create <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--location &lt;REGION_NAME&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--resource-group &lt;RESOURCE_GROUP_NAME&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--name &lt;IP_NAME&gt; --sku Standard <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--allocation-method static <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--query publicIp.ipAddress -o tsv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 51.105.230.165</span>
</span></span></code></pre></div><h3 id="deploy-nginx-ingress-controller-with-helm">Deploy nginx ingress controller with helm</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl create namespace ingress
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>helm install &lt;INGERSS_NAME&gt; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>ingress-nginx/ingress-nginx <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--namespace ingress <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.replicaCount<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.nodeSelector.<span style="color:#e6db74">&#34;kubernetes\.io/os&#34;</span><span style="color:#f92672">=</span>linux <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.admissionWebhooks.patch.nodeSelector.<span style="color:#e6db74">&#34;kubernetes\.io/os&#34;</span><span style="color:#f92672">=</span>linux <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set defaultBackend.nodeSelector.<span style="color:#e6db74">&#34;kubernetes\.io/os&#34;</span><span style="color:#f92672">=</span>linux <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.service.annotations.<span style="color:#e6db74">&#34;service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path&#34;</span><span style="color:#f92672">=</span>/healthz <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.service.loadBalancerIP<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;51.105.230.165&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl --namespace ingress get services -o wide -w nginx-ingress-controller
</span></span><span style="display:flex;"><span>kubectl get service -l app<span style="color:#f92672">=</span>nginx-ingress --namespace ingress
</span></span></code></pre></div><h3 id="create-an-ingress-controller-to-an-internal-virtual-network-in">Create an ingress controller to an internal virtual network in</h3>
<p>By default, an NGINX ingress controller is created with a dynamic public IP address assignment. A common configuration requirement is to use an internal, private network and IP address. This approach allows you to restrict access to your services to internal users, with no external access. This example assigns 10.240.0.42 to the loadBalancerIP resource.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm install nginx-ingress <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>ingress-nginx/ingress-nginx <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--namespace ingress <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.ingressClass<span style="color:#f92672">=</span>internal <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.replicaCount<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.nodeSelector.<span style="color:#e6db74">&#34;kubernetes\.io/os&#34;</span><span style="color:#f92672">=</span>linux <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.admissionWebhooks.patch.nodeSelector.<span style="color:#e6db74">&#34;kubernetes\.io/os&#34;</span><span style="color:#f92672">=</span>linux <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set defaultBackend.nodeSelector.<span style="color:#e6db74">&#34;kubernetes\.io/os&#34;</span><span style="color:#f92672">=</span>linux <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.service.annotations.<span style="color:#e6db74">&#34;service\.beta\.kubernetes\.io/azure-load-balancer-internal&#34;</span><span style="color:#f92672">=</span>true <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.service.annotations.<span style="color:#e6db74">&#34;service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path&#34;</span><span style="color:#f92672">=</span>/healthz <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--set controller.service.loadBalancerIP<span style="color:#f92672">=</span>10.224.0.42
</span></span></code></pre></div><p>Create an ingress route</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-world-ingress</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">ingress-basic</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.io/ingress.class</span>: <span style="color:#ae81ff">internal</span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="azure" term="azure" label="Azure" />
                             
                                <category scheme="aks" term="aks" label="AKS" />
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Install AKS Cluster]]></title>
            <link href="https://devopstales.github.io/cloud/aks/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/linux/jitsi-meet/?utm_source=atom_feed" rel="related" type="text/html" title="Install Jitsi meet" />
            
                <id>https://devopstales.github.io/cloud/aks/</id>
            
            
            <published>2020-11-07T00:00:00+00:00</published>
            <updated>2020-11-07T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this pos I will show you how you can create an AKS (Azure Kubernetes Service) Cluster.</p>


<H3>Parts of the AKS series</H3>
<ul>
     <li>Part1: <a href="../../cloud/AKS/">Install AKS Cluster</a></li>
     <li>Part2: <a href="../../cloud/aks-registry/">Integrate AKS with Registry</a></li>
     <li>Part3: <a href="../../cloud/aks-azure-key-vault-akv2k8s/">Azure Key Vault AKS integration with akv2k8s</a>
     <li>Part4: <a href="../../cloud/aks-azure-key-vault-csi/">Azure Key Vault AKS integration with CSI Driver</a>
     <li>Part5: <a href="../../cloud/aks-ingress-controller-v2/">Install Ingress contreoller To AKS</a></li>
     <li>Part6: <a href="../../cloud/azure-private-dns-with-AKS-ingress-controller/">Use Azure Private DNS with AKS Ingress Controller</a></li>
     <li>Part7: <a href="../../cloud/custom-ssl-and-dns-on-AKS-ingress-controller/">Configure custom SSL and DNS on AKS Ingress Controller</a></li>
</ul>

<!---
https://learn.microsoft.com/en-us/azure/aks/app-routing-nginx-prometheus
https://learn.microsoft.com/en-us/azure/aks/keda-about
https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/integrate-keda#scalers
https://learn.microsoft.com/en-us/azure/load-testing/quickstart-create-and-run-load-test
-->


<h3 id="what-is-azure-kubernetes-service">What is Azure Kubernetes Service?</h3>
<p>Azure Kubernetes Service (AKS) is a managed Kubernetes service that lets you quickly deploy and manage clusters.</p>
<p>A Kubernetes cluster is divided into two components:</p>
<ul>
<li>Control plane nodes provide the core Kubernetes services and orchestration of application workloads.</li>
<li>Nodes run your application workloads.</li>
</ul>
<p><img src="/img/include/aks-control-plane-and-nodes.png" alt="Example image"  class="zoomable" /></p>
<p>When you create an AKS cluster, a control plane is automatically created and configured. This control plane is provided as a managed Azure resource abstracted from the user. There&rsquo;s no cost for the control plane, only the nodes that are part of the AKS cluster. The control plane and its resources reside only on the region where you created the cluster.</p>
<h3 id="how-to-create-azure-kubernetes-cluster">How To Create Azure Kubernetes Cluster</h3>
<p>There are 2 ways to deploy an Azure Kubernetes Cluster, which are using:</p>
<ul>
<li>Azure Portal</li>
<li>Azure CLI</li>
</ul>
<p>I prefer to use the cli because it is easier to reproduce.</p>
<h4 id="install-azure-cli">Install Azure CLI</h4>
<pre tabindex="0"><code># OSX
brew update &amp;&amp; brew install azure-cli

# Yum
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc

sudo sh -c &#39;echo -e &#34;[azure-cli]
name=Azure CLI
baseurl=https://packages.microsoft.com/yumrepos/azure-cli
enabled=1
gpgcheck=1
gpgkey=https://packages.microsoft.com/keys/microsoft.asc&#34; &gt; /etc/yum.repos.d/azure-cli.repo&#39;

sudo yum install azure-cli

# apt
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

sudo apt-get update
sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg

curl -sL https://packages.microsoft.com/keys/microsoft.asc |
    gpg --dearmor |
    sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg &gt; /dev/null

AZ_REPO=$(lsb_release -cs)
echo &#34;deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main&#34; |
    sudo tee /etc/apt/sources.list.d/azure-cli.list

sudo apt-get update
sudo apt-get install azure-cli
</code></pre><h4 id="set-the-subscription">Set the subscription</h4>
<pre tabindex="0"><code>az login
az account list
az account set --subscription &lt;SUBSCRIPTION_ID&gt;
</code></pre><h4 id="creating-an-azure-resource-group">Creating an Azure Resource Group</h4>
<pre tabindex="0"><code>az group create --location &lt;REGION_NAME&gt; --name &lt;RESOURCE_GROUP_NAME&gt;
</code></pre><h4 id="create-aks-cluster">Create AKS Cluster</h4>
<pre tabindex="0"><code># get available kubernetes versions
az aks get-versions --location &lt;REGION_NAME&gt;

az aks create --resource-group &lt;RESOURCE_GROUP_NAME&gt; \
--name &lt;AKS_CLUSTER_NAME&gt; \
--node-count 3 \
--generate-ssh-keys \
--kubernetes-version 1.17.0
</code></pre><h3 id="uses-availability-zones-for-aks-cluster">Uses availability zones for AKS Cluster</h3>
<p>AKS clusters that are deployed using availability zones can distribute nodes across multiple zones within a single region. For example, a cluster in the East US 2 region can create nodes in all three availability zones in East US 2. This distribution of AKS cluster resources improves cluster availability as they&rsquo;re resilient to failure of a specific zone.</p>
<p>KÉP: <a href="https://docs.microsoft.com/en-us/azure/aks/media/availability-zones/aks-availability-zones.png">https://docs.microsoft.com/en-us/azure/aks/media/availability-zones/aks-availability-zones.png</a></p>
<pre tabindex="0"><code># get available kubernetes versions
az aks get-versions --location &lt;REGION_NAME&gt;

az aks create --resource-group &lt;RESOURCE_GROUP_NAME&gt; \
--name &lt;AKS_CLUSTER_NAME&gt; \
--node-count 3 \
--zones 1 2 3 \
--vm-set-type VirtualMachineScaleSets \
--load-balancer-sku standard \
--generate-ssh-keys \
--kubernetes-version 1.17.0
</code></pre><h4 id="get-kubeconfig-congig-of-the-cluster">Get Kubeconfig Congig of the Cluster</h4>
<pre tabindex="0"><code>az aks get-credentials --name &lt;AKS_CLUSTER_NAME&gt; \
 --resource-group &lt;RESOURCE_GROUP_NAME&gt;

kubectl get nodes
</code></pre>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="azure" term="azure" label="Azure" />
                             
                                <category scheme="aks" term="aks" label="AKS" />
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                             
                                <category scheme="k8s" term="k8s" label="K8S" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Install Fedora CoreOS as a VM]]></title>
            <link href="https://devopstales.github.io/cloud/fcos-install/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://devopstales.github.io/cloud/fcos-install/</id>
            
            
            <published>2020-08-30T00:00:00+00:00</published>
            <updated>2020-08-30T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how you can Install Fedora CoreOS(FCOS) in virtualization environment.</p>
<ul>
<li>First you need Fedora CoreOS Config (FCC) - This is a YAML file that specifies the configuration of a machine.</li>
<li>Fedora CoreOS Config Transpiler to validate your FCC and convert it to an Ignition config.</li>
<li>Finally launch a Fedora CoreOS machine and use Ignition config to perform the installation.</li>
</ul>
<h3 id="create-fcc">Create FCC</h3>
<p>Create password hash for default user</p>
<pre tabindex="0"><code>$ mkpasswd --method=yescrypt
Password:
$y$j9T$A0Y3wwVOKP69S.1K/zYGN.$S596l11UGH3XjN...
</code></pre><pre tabindex="0"><code>nano fcos01.fcc
---
variant: fcos
version: 1.0.0
passwd:
  users:
    - name: core
      password_hash: &#34;$y$j9T$A0Y3wwVOKP69S.1K/zYGN.$S596l11UGH3XjN...&#34;
      groups:
        - docker
systemd:
  units:
    - name: install-rpms.service
      enabled: true
      contents: |
        [Unit]
        Description=Install packages
        ConditionFirstBoot=yes
        Wants=network-online.target
        After=network-online.target
        After=multi-user.target
        [Service]
        Type=oneshot
        ExecStart=rpm-ostree install nano git docker-compose htop --reboot
        [Install]
        WantedBy=multi-user.target
storage:
  files:
    - path: /etc/ssh/sshd_config.d/20-enable-passwords.conf
      mode: 0644
      contents:
        inline: |
          # Fedora CoreOS disables SSH password login by default.
          # Enable it.
          # This file must sort before 40-disable-passwords.conf.
          PasswordAuthentication yes
    - path: /etc/hostname
      mode: 0644
      contents:
        inline: fcos01.mydomain.intra
</code></pre><h3 id="convert-fcc-to-ignition">Convert FCC to Ignition</h3>
<pre tabindex="0"><code>docker run -i --rm quay.io/coreos/fcct --pretty --strict &lt;fcos01.fcc &gt; fcos01.ign

# validate config
docker run --rm -i quay.io/coreos/ignition-validate - &lt; fcos01.ign
</code></pre><h3 id="install-fedora-coreos">Install Fedora CoreOS</h3>
<p>At the install stap you need to boot from the Fedora CoreOS ISO and use the Ignition config to install.  So you need a solution to share this files with the running LiveOS. You can use an usb pendrive or a web-server for that. I will use a webserver for thet now.</p>
<pre tabindex="0"><code>apt install nginx

mkdir /var/www/html/fcos
cp fcos01.ign /var/www/html/fcos
cd /var/www/html/fcos

systemct start nginx
</code></pre><pre tabindex="0"><code>cd ~/
wget https://builds.coreos.fedoraproject.org/prod/streams/stable/builds/32.20200726.3.1/x86_64/fedora-coreos-32.20200726.3.1-live.x86_64.iso
</code></pre><h3 id="3-2-1--ignition">3 2 1 &hellip; Ignition</h3>
<p>After the live OS bootid star Fedora CoreOS install:</p>
<pre tabindex="0"><code>sudo su -
coreos-installer install /dev/sda \
--ignition-url http://example.com/fcos/fcos01.ign \
--insecure-ignition

init 6
</code></pre><p>You need <code>--insecure-ignition</code> for insecure http connection.</p>
<h3 id="set-static-ip">Set static IP</h3>
<pre tabindex="0"><code>nmcli connection show
NAME              UUID                                  TYPE      DEVICE
Wired Connection  f36f48e0-f75f-4925-ac78-de6119a2fcbb  ethernet  enp0s3

nmcli connection mod &#39;Wired Connection&#39; \
  ipv4.method manual \
  ipv4.addresses 192.168.0.16/24 \
  ipv4.gateway 192.168.0.0 \
  ipv4.dns 8.8.8.8 \
  +ipv4.dns 8.8.4.4 \
  connection.autoconnect yes

nmcli connection show &#39;Wired Connection&#39;
systemctl restart NetworkManager
</code></pre>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="kubernetes" term="kubernetes" label="Kubernetes" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="fedora-coreos" term="fedora-coreos" label="Fedora CoreOS" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[PhotonOS Basics]]></title>
            <link href="https://devopstales.github.io/cloud/photon_basics/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/cloud/protonos_vagrant_box/?utm_source=atom_feed" rel="related" type="text/html" title="How to create Vagrant box?" />
            
                <id>https://devopstales.github.io/cloud/photon_basics/</id>
            
            
            <published>2020-03-04T00:00:00+00:00</published>
            <updated>2020-03-04T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Project Photon OS is an open source, minimal Linux container host that is optimized for cloud-native applications, cloud platforms, and VMware infrastructure.</p>
<h3 id="star-in-vagrant">Star in Vagrant</h3>
<pre tabindex="0"><code>nano Vagrantfile
Vagrant.configure(&#34;2&#34;) do |config|
  config.vm.box = &#34;devopstales/photon3&#34;
  config.vm.synced_folder &#34;.&#34;, &#34;/vagrant&#34;, type: &#34;virtualbox&#34;

  config.timezone.value = :host
  config.vm.provider &#34;virtualbox&#34; do |vb|
    vb.name = &#34;photon01&#34;
      vb.memory = 4096

      vb.cpus = 2
      vb.linked_clone = true
      vb.customize [&#34;modifyvm&#34;, :id, &#34;--vram&#34;, &#34;8&#34;]
  end

  config.vm.define &#34;pothon01&#34; do |vbox|
    vbox.vm.network :public_network, ip: &#34;192.168.0.112&#34; , bridge: &#34;wlan0&#34; #, adapter: &#34;1&#34;
    vbox.vm.hostname = &#34;pothon01.mydomain.intra&#34;
    vbox.hostsupdater.remove_on_suspend = false
    vbox.vbguest.auto_update = false
  end
end
</code></pre><pre tabindex="0"><code>vagrant up
vagrant ssh
</code></pre><p>When you try to login the server wants you to change the passowrd of the <code>vagrant</code> user. The base password is <code>vagrant</code> as usual.</p>
<pre tabindex="0"><code>vagrant ssh
You are required to change your password immediately (password expired)
Last login: Sun Apr 14 20:30:22 2019 from 10.0.2.2
WARNING: Your password has expired.
You must change your password now and login again!
Changing password for vagrant.
Current password:
New password:
Retype new password:
passwd: password updated successfully
Connection to 127.0.0.1 closed.
</code></pre><p>Vagrant can&rsquo;t configure the ip, hostname and mount the <code>/vagrant</code> fonder.</p>
<h3 id="package-management">Package management</h3>
<p>On Photon OS, <code>tdnf</code> is the default package manager for installing new packages. It is a C implementation of the <code>DNF</code> package manager without Python dependencies. <code>DNF</code> is the next upcoming major version of yum.</p>
<p>Let&rsquo;s install packages for the next steps.</p>
<pre tabindex="0"><code>tdnf install nano awk tar build-essential linux-devel less -y
</code></pre><h3 id="install-virtualbox-guest-additions">Install virtualbox guest additions</h3>
<p><img src="/img/include/photon_base_1.png" alt="Example image"  class="zoomable" /><br><br></p>
<pre tabindex="0"><code>mount /dev/cdrom /mnt/cdrom
cd /mnt/cdrom
./VBoxLinuxAdditions.run
</code></pre><h3 id="configure-static-ip">Configure static ip</h3>
<p>PhotonOS use systemd-networkd to manage network configurations. systemd-networkd configorations is located under <code>/etc/systemd/network/</code>.</p>
<pre tabindex="0"><code>cat /etc/systemd/network/99-dhcp-en.network
[Match]
Name=e*

[Network]
DHCP=yes
IPv6AcceptRA=no
</code></pre><pre tabindex="0"><code>cat &gt; /etc/systemd/network/20-static-eth1.network &lt;&lt; &#34;EOF&#34;
[Match]
Name=eth1

[Network]
DHCP=no
Address=192.168.0.112/24
Gateway=192.168.0.1
DNS=8.8.8.8
Domains=mydomain.intra
NTP=0.pool.ntp.org
EOF
</code></pre><pre tabindex="0"><code>chmod 644 /etc/systemd/network/20-static-eth1.network
systemctl restart systemd-networkd
systemctl status systemd-networkd -l
</code></pre><h3 id="configure-hostname">Configure hostname</h3>
<pre tabindex="0"><code>hostnamectl set-hostname &#34;pothon01.mydomain.intra&#34;
</code></pre><pre tabindex="0"><code>hostnamectl status
   Static hostname: pothon01.mydomain.intra
         Icon name: computer-vm
           Chassis: vm
        Machine ID: 2c230d2255834f75bff4872bff234df4
           Boot ID: 2708cffec4cf4c6e91053cc11825b590
    Virtualization: oracle
  Operating System: VMware Photon OS/Linux
            Kernel: Linux 4.19.32-3.ph3
      Architecture: x86-64
</code></pre>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="cloud" term="cloud" label="Cloud" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="centos" term="centos" label="Centos" />
                             
                                <category scheme="vmware" term="vmware" label="vmware" />
                             
                                <category scheme="vagrant" term="vagrant" label="Vagrant" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[How to create Vagrant box?]]></title>
            <link href="https://devopstales.github.io/cloud/protonos_vagrant_box/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://devopstales.github.io/cloud/protonos_vagrant_box/</id>
            
            
            <published>2020-03-03T00:00:00+00:00</published>
            <updated>2020-03-03T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how to create a vagrant box from pothonos ISO.</p>
<h3 id="base-vm">Base VM</h3>
<p>Fist we need to create a virtualbox vm and install the <a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS">latest PothonOS ISO</a>.</p>
<ul>
<li>Name: Photon-base</li>
<li>Type: Linux</li>
<li>Version: Other Linux (64-bit)</li>
<li>Memory Size: 1024MB</li>
<li>New Virtual Disk: [Type: VDI, Size: 40 GB]</li>
</ul>
<p>Modify the hardware settings of the virtual machine:</p>
<ul>
<li>Disable audio</li>
<li>Disable USB</li>
<li>Ensure Network Adapter 1 is set to NAT</li>
<li>Add this port-forwarding rule:</li>
<li>Name: SSH</li>
<li>Protocol: TCP</li>
<li>Host IP: blank</li>
<li>Host Port: 2222</li>
<li>Guest IP: blank</li>
<li>Guest Port: 22</li>
</ul>
<h3 id="configure-system">Configure System</h3>
<p>Change the root users password to <code>vagrant</code></p>
<pre tabindex="0"><code>passwd
chage -I -1 -m 0 -M 99999 -E -1 root
</code></pre><p>Upgrade system and install packages:</p>
<pre tabindex="0"><code>tdnf upgrade -y
tdnf install sudo nano wget awk tar build-essential linux-devel less -y
</code></pre><h3 id="create-the-vagrant-account">Create the vagrant account</h3>
<p>Next you need to create the default vagrant user account:</p>
<pre tabindex="0"><code>useradd -m -G sudo vagrant
passwd vagrant
chage -I -1 -m 0 -M 99999 -E -1 vagrant

cat &gt; /etc/sudoers.d/vagrant &lt; EOF
# add vagrant user
vagrant ALL=(ALL) NOPASSWD:ALL
EOF
</code></pre><h3 id="change-ssh-config">Change ssh config</h3>
<pre tabindex="0"><code>nano /etc/ssh/sshd_config
AuthorizedKeysFile     %h/.ssh/authorized_keys
</code></pre><pre tabindex="0"><code>systemctl restart sshd
</code></pre><h3 id="add-vagrant-ssh-keys-to-vagrant-user">Add vagrant ssh keys to vagrant user</h3>
<pre tabindex="0"><code>su - vagrant

mkdir -p /home/vagrant/.ssh
chmod 0700 /home/vagrant/.ssh
</code></pre><pre tabindex="0"><code>wget --no-check-certificate \
    https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub \
    -O /home/vagrant/.ssh/authorized_keys
</code></pre><pre tabindex="0"><code>chmod 0600 /home/vagrant/.ssh/authorized_keys
chown –R vagrant /home/vagrant/.ssh
</code></pre><h3 id="add-virtualboxadditions">Add VirtualBoxadditions</h3>
<p>Go to your virtualbox menu for the VM and select <code>Devices / Insert Guest Additions CD Image</code></p>
<p><img src="/img/include/photon_base_1.png" alt="Example image"  class="zoomable" /><br><br></p>
<pre tabindex="0"><code>mount /dev/cdrom /mnt/cdrom
cd /mnt/cdrom
./VBoxLinuxAdditions.run
</code></pre><h3 id="compress-vm">Compress vm</h3>
<pre tabindex="0"><code>sudo dd if=/dev/zero of=/EMPTY bs=1M
sudo rm -f /EMPTY
</code></pre><h3 id="package-box">Package box</h3>
<pre tabindex="0"><code>vagrant package --base &#34;Photon-base&#34;

vagrant box add &lt;user-name&gt;/photon3 package.box
vagrant box add devopstales/photon3 package.box
</code></pre>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="cloud" term="cloud" label="Cloud" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="centos" term="centos" label="Centos" />
                             
                                <category scheme="vmware" term="vmware" label="vmware" />
                             
                                <category scheme="vagrant" term="vagrant" label="Vagrant" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Export GCP VM to S3]]></title>
            <link href="https://devopstales.github.io/cloud/gcp-vm-export/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://devopstales.github.io/cloud/gcp-vm-export/</id>
            
            
            <published>2019-10-04T00:00:00+00:00</published>
            <updated>2019-10-04T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Step by step guide to export virtual machine running in Google cloud computer engine to your S3 bucket.</p>
<pre tabindex="0"><code>gcloud compute instances list
NAME        ZONE            MACHINE_TYPE               PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP  STATUS
demo1   europe-west1-b  g1-small                                10.132.0.3                TERMINATED
</code></pre><h3 id="create-snapshot">Create snapshot</h3>
<pre tabindex="0"><code>gcloud compute disks snapshot europe-west1-b/disks/demo1 --storage-locatio europe-west1

gcloud compute snapshots list
NAME              DISK_SIZE_GB  SRC_DISK                        STATUS
demo1-backup  30            europe-west1-b/disks/demo1  READY
</code></pre><h3 id="create-custom-image">Create custom image</h3>
<pre tabindex="0"><code>gcloud compute images create demo1-backup --source-snapshot demo1-backup
Created [https://www.googleapis.com/compute/v1/projects/demo-project-223110/global/images/demo1-backup].
NAME              PROJECT               FAMILY  DEPRECATED  STATUS
demo1-backup  demo-project-223110                      READY
</code></pre><h3 id="create-s3-storage">Create S3 storage</h3>
<pre tabindex="0"><code>gsutil mb gs://backup-demo-project-223110/ -l europe-west1
</code></pre><h3 id="export-to-s3-storage">Export to S3 storage</h3>
<pre tabindex="0"><code>gcloud compute images export --destination-uri gs://backup-demo-project-223110/demo1-beckup.tar.gz --image demo1-backup --export-format=vmdk
</code></pre>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="google-cloud-platform" term="google-cloud-platform" label="Google Cloud Platform" />
                             
                                <category scheme="gcp" term="gcp" label="GCP" />
                             
                                <category scheme="s3" term="s3" label="S3" />
                            
                        
                    
                
            
        </entry>
    
</feed>
