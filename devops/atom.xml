<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.145.0">Hugo</generator><title type="html"><![CDATA[Devops on devopstales]]></title>
    
        <subtitle type="html"><![CDATA[Blog about dev and ops stuff]]></subtitle>
    
    
    
            <link href="https://devopstales.github.io/devops/" rel="alternate" type="text/html" title="html" />
            <link href="https://devopstales.github.io/devops/index.xml" rel="alternate" type="application/rss+xml" title="rss" />
            <link href="https://devopstales.github.io/devops/atom.xml" rel="self" type="application/atom+xml" title="atom" />
    <updated>2025-06-13T12:32:52+00:00</updated>
    
    
    
    
        <id>https://devopstales.github.io/devops/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Tekton Basics]]></title>
            <link href="https://devopstales.github.io/devops/tecton-basics/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://devopstales.github.io/devops/tecton-basics/</id>
            
            
            <published>2024-11-16T00:00:00+00:00</published>
            <updated>2024-11-16T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how to Install and configure Tekton on a Kubernetes cluster.</p>
<h3 id="what-is-tekton">What is Tekton</h3>
<p>Tekton is an open-source cloud native CICD (Continuous Integration and Continuous Delivery/Deployment) solution.</p>
<h3 id="overview">Overview</h3>
<p>Let&rsquo;s visualize what we want to perform in our CI/CD flow. First, we will make changes to our codebase. Those changes will be pushed to a GitHub repository. The push event on the GitHub webhook will trigger our pipeline.</p>
<p><img src="/img/include/tekton101.webp" alt="Tekton"  class="zoomable" /></p>
<h3 id="installing-tekton-operator">Installing Tekton Operator</h3>
<p>Install Tekton From Yaml.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply --filename <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
</span></span><span style="display:flex;"><span>kubectl apply --filename <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml
</span></span><span style="display:flex;"><span>kubectl apply --filename <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>https://storage.googleapis.com/tekton-releases/triggers/latest/interceptors.yaml
</span></span></code></pre></div><p>If you get an error abaut kubernetes version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{<span style="color:#f92672">&#34;severity&#34;</span>:<span style="color:#e6db74">&#34;fatal&#34;</span>,<span style="color:#f92672">&#34;timestamp&#34;</span>:<span style="color:#e6db74">&#34;2024-11-17T09:09:14.017Z&#34;</span>,<span style="color:#f92672">&#34;logger&#34;</span>:<span style="color:#e6db74">&#34;controller&#34;</span>,<span style="color:#f92672">&#34;caller&#34;</span>:<span style="color:#e6db74">&#34;sharedmain/main.go:391&#34;</span>,<span style="color:#f92672">&#34;message&#34;</span>:<span style="color:#e6db74">&#34;Version check failed&#34;</span>,<span style="color:#f92672">&#34;commit&#34;</span>:<span style="color:#e6db74">&#34;c6d2a8d&#34;</span>,<span style="color:#f92672">&#34;error&#34;</span>:<span style="color:#e6db74">&#34;kubernetes version \&#34;1.27.3\&#34; is not compatible, need at least \&#34;1.28.0-0\&#34; (this can be overridden with the env var \&#34;KUBERNETES_MIN_VERSION\&#34;)&#34;</span>}
</span></span></code></pre></div><p>Edit the falloging pods:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl edit deployments.apps -n tekton-pipelines tekton-pipelines-controller
</span></span><span style="display:flex;"><span>kubectl edit deployments.apps -n tekton-pipelines tekton-pipelines-webhook
</span></span><span style="display:flex;"><span>kubectl edit deployments.apps -n tekton-pipelines tekton-triggers-controller
</span></span><span style="display:flex;"><span>kubectl edit deployments.apps -n tekton-pipelines tekton-triggers-webhook
</span></span><span style="display:flex;"><span>kubectl edit deployments.apps -n tekton-pipelines tekton-events-controller
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>        env:
</span></span><span style="display:flex;"><span>        - name: KUBERNETES_MIN_VERSION
</span></span><span style="display:flex;"><span>          value: 1.27.0
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h3 id="handling-github-events">Handling Github Events</h3>
<p>To get external enevts from github we will create an <code>EventListener</code>. This will create a service exposed via Kubernetes API to recove github webhook events.</p>
<blockquote>
<p>Change <code>{{ .Values.projectName }}</code> with your github project name.</p></blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">triggers.tekton.dev/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">EventListener</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tekton-github-pr-{{ .Values.projectName }}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">service-account-{{ .Values.projectName }}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">triggers</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pr-trigger</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">interceptors</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">ref</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;cel&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterInterceptor</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">triggers.tekton.dev</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;filter&#34;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">value</span>: &gt;<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                header.match(&#39;x-github-event&#39;, &#39;merge&#39;)</span>
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;overlays&#34;</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">value</span>:
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">key</span>: <span style="color:#ae81ff">author</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">expression</span>: <span style="color:#ae81ff">body.pusher.name.lowerAscii().replace(&#39;/&#39;,&#39;-&#39;).replace(&#39;.&#39;, &#39;-&#39;).replace(&#39;_&#39;, &#39;-&#39;)</span>
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">key</span>: <span style="color:#ae81ff">pr-ref</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">expression</span>: <span style="color:#ae81ff">body.ref.lowerAscii().replace(&#34;/&#34;, &#39;-&#39;)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bindings</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">ref</span>: <span style="color:#ae81ff">tb-github-pr-trigger-binding-{{ .Values.projectName }}</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">ref</span>: <span style="color:#ae81ff">tt-github-pr-trigger-template-{{ .Values.projectName }}</span>
</span></span></code></pre></div><p>We will use a Cel ClusterInterceptor, another custom resource so we can write filter expressions using CEL, This is how we manage to evaluate the webhook request and filter triggers for many kinds of pipelines.</p>
<h3 id="bindings">Bindings</h3>
<p>TriggerBindings are another way to bind objects from the webhook request to variables we can use to control pipeline flow.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">triggers.tekton.dev/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">TriggerBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tb-github-pr-trigger-binding-{{ .Values.projectName }}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">revision</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(body.after)</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">repo-url</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(body.repository.ssh_url)</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">author</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(extensions.author)</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pr-ref</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(extensions.pr-ref)</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">repo-full-name</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(body.repository.full_name)</span>
</span></span></code></pre></div><h3 id="triggering-the-pipeline">Triggering the Pipeline</h3>
<p>TriggerTemplate is the resource that pieces together events with the variables we set up on the TriggerBinding. Here we will associate variables as params to the pipelines, creating a PipelineRun, which is the actual automation being executed as a pod in Kubernetes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">triggers.tekton.dev/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">TriggerTemplate</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tt-github-pr-trigger-template-{{ .Values.projectName }}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">revision</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">repo-url</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">author</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">repo-full-name</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pr-ref</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resourcetemplates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">tekton.dev/v1beta1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">PipelineRun</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">pr-$(tt.params.pr-ref)-$(tt.params.author)-</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">service-account-{{ .Values.projectName }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">pipelineRef</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: {{ <span style="color:#ae81ff">.Values.projectName}}-pipeline</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">workspaces</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cache</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">persistentVolumeClaim</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">claimName</span>: <span style="color:#ae81ff">pvc-cache-{{ .Values.projectName }}</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">shared-data</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">volumeClaimTemplate</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">accessModes</span>:
</span></span><span style="display:flex;"><span>                  - <span style="color:#ae81ff">ReadWriteOnce</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">requests</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">storage</span>: <span style="color:#ae81ff">2Gi</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">repo-url</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(tt.params.repo-url)</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">revision</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(tt.params.revision)</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">repo-full-name</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(tt.params.repo-full-name)</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">ref</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(tt.params.ref)</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">deploy-staging</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(tt.params.deploy-staging)</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">test-all</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(tt.params.test-all)</span>
</span></span></code></pre></div><h3 id="create-pipeline">Create Pipeline</h3>
<p>The pipeline is the orchestrated flow of tasks we want to run. It will have the parameters we defined in the TriggerTemplate and the logic we want to execute applied to tasks. For this example, we will look at a simple test pipeline that clones a repository and runs the test script.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">tekton.dev/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Pipeline</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: {{ <span style="color:#ae81ff">.Values.projectName }}-pipeline-tests</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workspaces</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">shared-data</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cache</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">repo-url</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">revision</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tasks</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">fetch-source</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">taskRef</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">resolver</span>: <span style="color:#ae81ff">cluster</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kind</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">task</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">name</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">task-git-clone</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">namespace</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">tekton-pipelines</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">url</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(params.repo-url)</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">revision</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(params.revision)</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">depth</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">value</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">workspaces</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">output</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">workspace</span>: <span style="color:#ae81ff">shared-data</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">install-deps</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">runAfter</span>: [<span style="color:#e6db74">&#34;fetch-source&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">taskRef</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">resolver</span>: <span style="color:#ae81ff">cluster</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kind</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">task</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">name</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">task-install-deps</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">namespace</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">tekton-pipelines</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">params</span>: 
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">install-script</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">value</span>: <span style="color:#ae81ff">yarn install --prefer-offline --ignore-engines</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">workspaces</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">source</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">workspace</span>: <span style="color:#ae81ff">shared-data</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cache</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">workspace</span>: <span style="color:#ae81ff">cache</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">test-task</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">runAfter</span>: [<span style="color:#e6db74">&#34;install-deps&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">taskRef</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">resolver</span>: <span style="color:#ae81ff">cluster</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kind</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">task</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">name</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">task-test</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">namespace</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#ae81ff">tekton-pipelines</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">diff</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">value</span>: <span style="color:#ae81ff">$(tasks.fetch-source.results.diff)</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">install-deps</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">value</span>: <span style="color:#ae81ff">yarn install</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">run-test</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">value</span>: <span style="color:#ae81ff">yarn test</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">workspaces</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">source</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">workspace</span>: <span style="color:#ae81ff">shared-data</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cache</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">workspace</span>: <span style="color:#ae81ff">cache</span>
</span></span></code></pre></div><p>Here we organize the logic of our pipeline.</p>
<p>To help with organization and reutilization of tasks, which are the more atomic resources of a Tekton pipeline, we use a cluster resolver. This way, we can have one task shared across all namespaces and eliminate the need to duplicate tasks that are common to multiple pipelines. The cluster resolver takes the namespace the task is in and the name of the task.</p>
<p>The parameters we define in the TriggerTemplate and pass to the pipeline run are defined in the pipeline and passed to the tasks.</p>
<p>Another great feature of the Tekton pipeline is the TaskResult. Notice we use a parameter in the test-task that is inherited from a task result. This result is defined in the task fetch-source, which is the task we will create to clone a remote repository. The parameter diff is a list of files that were modified in the PR that triggered this pipeline.</p>
<p>The workspaces we define in the TriggerTemplate are also assigned to the tasks. This ensures all pods created for all tasks in the pipeline execute our automations in the same storage space. That way, we can clone the remote repository at the beginning of the pipeline and perform many tasks with the same files.</p>
<h3 id="creating-our-tasks">Creating our tasks</h3>
<p>Now we define the tasks, which are the actual work to be done in our pipeline. In Tekton, each task is a Pod in Kubernetes. It is composed of several steps, each step being a container inside this task pod.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">tekton.dev/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Task</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">task-test</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: {{ <span style="color:#ae81ff">.Values.projectName }}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">description</span>: &gt;-<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    A generic task to run any bash command in any given image</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workspaces</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">source</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">optional</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cache</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">optional</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">params</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">run-test</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">install-deps</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">diff</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">description</span>: <span style="color:#ae81ff">diff of the pull request</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">type</span>: <span style="color:#ae81ff">string</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">default</span>: <span style="color:#e6db74">&#34;node:latest&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">install</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">$(params.image)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">workingDir</span>: <span style="color:#ae81ff">$(workspaces.source.path)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">script</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         #!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         set -xe
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">         $(params.install-deps)</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">test</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">$(params.image)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">workingDir</span>: <span style="color:#ae81ff">$(workspaces.source.path)</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">script</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        #!/usr/bin/env bash
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        set -xe
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        $(params.run-test)</span>
</span></span></code></pre></div><p>This is a simple task that executes a script command you provide. As with the previous task, we define the workspace where we clone the repository and define one step to install dependencies and another to run the tests. There are many ways to organize this same scenario; this is just an example of tasks and how steps are defined.</p>
<h3 id="dashboard">Dashboard</h3>
<p>In order to visualize your tekton resources, We will install Tekton Dashboard:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl apply --filename <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>https://storage.googleapis.com/tekton-releases/dashboard/latest/release.yaml
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get services -n tekton-pipelines
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME                                TYPE        CLUSTER-IP     EXTERNAL-IP   PORT<span style="color:#f92672">(</span>S<span style="color:#f92672">)</span>                              AGE
</span></span><span style="display:flex;"><span>el-tekton-github-pr-devopstales     ClusterIP   10.1.226.52    &lt;none&gt;        8080/TCP,9000/TCP                    6m56s
</span></span><span style="display:flex;"><span>tekton-events-controller            ClusterIP   10.1.176.181   &lt;none&gt;        9090/TCP,8008/TCP,8080/TCP           33m
</span></span><span style="display:flex;"><span>tekton-pipelines-controller         ClusterIP   10.1.11.101    &lt;none&gt;        9090/TCP,8008/TCP,8080/TCP           33m
</span></span><span style="display:flex;"><span>tekton-pipelines-webhook            ClusterIP   10.1.253.10    &lt;none&gt;        9090/TCP,8008/TCP,443/TCP,8080/TCP   33m
</span></span><span style="display:flex;"><span>tekton-triggers-controller          ClusterIP   10.1.197.45    &lt;none&gt;        9000/TCP                             33m
</span></span><span style="display:flex;"><span>tekton-triggers-core-interceptors   ClusterIP   10.1.69.207    &lt;none&gt;        8443/TCP                             33m
</span></span><span style="display:flex;"><span>tekton-triggers-webhook             ClusterIP   10.1.193.0     &lt;none&gt;        443/TCP                              33m
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>kubectl --namespace tekton-pipelines port-forward svc/tekton-dashboard 9097:9097
</span></span></code></pre></div><h3 id="using-an-ingress-rule">Using an Ingress rule</h3>
<p>A more advanced solution is to expose the Dashboard through an Ingress rule.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">networking.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tekton-dashboard</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">tekton-pipelines</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubernetes.io/ingress.class</span>: <span style="color:#ae81ff">nginx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">nginx.ingress.kubernetes.io/rewrite-target</span>: <span style="color:#ae81ff">/$2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">host</span>: <span style="color:#ae81ff">domain.tld</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tekton(/|$)(.*)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">service</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tekton-dashboard</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">port</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">number</span>: <span style="color:#ae81ff">9097</span>
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                             
                                <category scheme="tekton" term="tekton" label="Tekton" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Github Self-Hosted Runners on Kubernetes with Actions Runner Controller]]></title>
            <link href="https://devopstales.github.io/devops/github-self-hosted-runners-on-kubernetes/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/devops/github-actions-basics/?utm_source=atom_feed" rel="related" type="text/html" title="GitHub Actions: Basics" />
                <link href="https://devopstales.github.io/devops/gitlab-ci-artifacts/?utm_source=atom_feed" rel="related" type="text/html" title="GitLab CI: artifacts management" />
                <link href="https://devopstales.github.io/devops/gitlab-ci-docker-bild-k8s/?utm_source=atom_feed" rel="related" type="text/html" title="GitLab CI: How to Build Docker Images in Kubernetes" />
                <link href="https://devopstales.github.io/devops/gitlab-ci-docker-bild/?utm_source=atom_feed" rel="related" type="text/html" title="GitLab CI: How to Build Docker Images in Docker" />
                <link href="https://devopstales.github.io/devops/introduction-to-gitlab-ci-cd/?utm_source=atom_feed" rel="related" type="text/html" title="Introduction to GitLab CI/CD" />
            
                <id>https://devopstales.github.io/devops/github-self-hosted-runners-on-kubernetes/</id>
            
            
            <published>2024-01-29T00:00:00+00:00</published>
            <updated>2024-01-29T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how you can set up self-hosted GitHub action runner in Kubernetes with Actions Runner Controller.</p>
<p>Following are the steps to set up an organization-level container-based runner within an EKS cluster.</p>
<h3 id="github-authentication-for-action-runner-controller">GitHub authentication for Action Runner Controller</h3>
<p>First, we need to set up a mechanism to authenticate the action runner controller to GitHub. This can be done in two ways:</p>
<ul>
<li>PAT (Personal Access Token)</li>
<li>Using GitHub App</li>
</ul>
<p>In this demo I will use the GithubApp method for authentication.</p>
<ul>
<li>In the upper-right corner of any page on GitHub, click your profile photo.</li>
<li>Navigate to your account settings.
<ul>
<li>For a GitHub App owned by a personal account, click Settings.</li>
<li>For a GitHub App owned by an organization:
<ul>
<li>Click Your organizations.</li>
<li>To the right of the organization, click Settings.</li>
</ul>
</li>
</ul>
</li>
<li>In the left sidebar, click Developer settings.</li>
<li>In the left sidebar, click GitHub Apps.</li>
<li>Click New GitHub App.</li>
</ul>
<p><img src="/img/include/github-app01.webp" alt="Example image"  class="zoomable" /></p>
<p>Set the fallowing permissions:</p>
<ul>
<li>Repository Permissions
<ul>
<li>Actions (read only)</li>
<li>Administration (read and write)</li>
<li>Checks (read only)</li>
<li>Metadata (read only)</li>
<li>Pull requests (read only)</li>
</ul>
</li>
<li>Organization Permissions
<ul>
<li>Self-hosted runners (read/write)</li>
<li>Webhooks(read and write)</li>
</ul>
</li>
</ul>
<p>You will get an <code>App ID</code> <code>Client ID</code> and <code>Client Secret</code>. This will be used later.</p>
<p>Download the private key file by pushing the “Generate a private key” button at the bottom of the GitHub App page for later use.</p>
<p>When the installation is complete, you will be taken to a URL. The last number of the URL will be used as the Installation ID later (for example, if the URL ends in settings/installations/12345, the Installation ID is 12345).</p>
<p>Finally, register the App ID (APP_ID), Installation ID (INSTALLATION_ID), and the downloaded private key file (PRIVATE_KEY_FILE_PATH) as Kubernetes secrets using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl create secret generic arc-secret -n arc-systems <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> - from-literal<span style="color:#f92672">=</span>github_app_id<span style="color:#f92672">=</span>YOUR_GITHUB_APP_ID <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> - from-literal<span style="color:#f92672">=</span>github_app_installation_id<span style="color:#f92672">=</span>YOUR_INSTALLATION_ID <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> - from-literal<span style="color:#f92672">=</span>github_app_private_key<span style="color:#f92672">=</span>YOUR_PRIVATE_KEY
</span></span></code></pre></div><h3 id="install-the-action-runner-controller-arc">Install the Action Runner Controller (ARC)</h3>
<p>To install the operator and the custom resource definitions (CRDs) in your cluster, do the following.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm install arc <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --namespace arc-system <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --create-namespace <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set-controller
</span></span></code></pre></div><blockquote>
<p>For additional Helm configuration options, see <a href="https://github.com/actions/actions-runner-controller/blob/master/charts/gha-runner-scale-set-controller/values.yaml">values.yaml</a> in the ARC documentation.</p></blockquote>
<h3 id="configuring-a-runner-scale-set">Configuring a runner scale set</h3>
<p>To configure your runner scale set, run the following command in your terminal, using values from your ARC configuration.</p>
<blockquote>
<p>As a security best practice, install your runner scale sets to a different namespace than the namespace containing your Action Runner Controller.</p></blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm install arc-runner-set <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --namespace arc-systems <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --create-namespace <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --set githubConfigUrl<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://github.com/&lt;your_enterprise/org/&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --set githubConfigSecret.githubConfigSecret<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;arc-secret&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    oci://ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set
</span></span></code></pre></div><blockquote>
<p>For more Helm configuration options, see <a href="https://github.com/actions/actions-runner-controller/blob/master/charts/gha-runner-scale-set/values.yaml">values.yaml</a> in the ARC documentation.</p></blockquote>
<p>From your terminal, run the following command to check your installation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm list -A
</span></span></code></pre></div><p>You should see an output similar to the following.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                                       APP VERSION
</span></span><span style="display:flex;"><span>arc             arc-systems     <span style="color:#ae81ff">1</span>               2023-04-12 11:45:59.152090536 +0000 UTC deployed        gha-runner-scale-set-controller-0.4.0       0.4.0
</span></span><span style="display:flex;"><span>arc-runner-set  arc-runners     <span style="color:#ae81ff">1</span>               2023-04-12 11:46:13.451041354 +0000 UTC deployed        gha-runner-scale-set-0.4.0                  0.4.0
</span></span></code></pre></div><p>To check the manager pod, run the following command in your terminal.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get pods -n arc-systems
</span></span></code></pre></div><p>If everything was installed successfully, the status of the pods shows as Running.</p>
<pre tabindex="0"><code class="language-bah" data-lang="bah">NAME                                                   READY   STATUS    RESTARTS   AGE
arc-gha-runner-scale-set-controller-594cdc976f-m7cjs   1/1     Running   0          64s
arc-runner-set-754b578d-listener                       1/1     Running   0          12s
</code></pre><h3 id="using-runner-scale-sets">Using runner scale sets</h3>
<p>Now you will create and run a simple test workflow that uses the runner scale set runners.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Actions Runner Controller Demo</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workflow_dispatch</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">Explore-GitHub-Actions</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># You need to use the INSTALLATION_NAME from the previous steps</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">arc-runner-set</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">echo &#34;🎉 This job uses runner scale set runners!&#34;</span>
</span></span></code></pre></div><p>Once you&rsquo;ve added the workflow to your repository, manually trigger the workflow.  To view the runner pods being created while the workflow is running, run the following command from your terminal.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get pods -n arc-runners
</span></span></code></pre></div><p>A successful output will look similar to the following.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>NAMESPACE     NAME                                                  READY   STATUS    RESTARTS      AGE
</span></span><span style="display:flex;"><span>arc-runners   arc-runner-set-rmrgw-runner-p9p5n                     1/1     Running   <span style="color:#ae81ff">0</span>             21s
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                             
                                <category scheme="github" term="github" label="GitHub" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[GitLab CI: How to Build Docker Images in Kubernetes]]></title>
            <link href="https://devopstales.github.io/devops/gitlab-ci-docker-bild-k8s/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/devops/gitlab-ci-docker-bild/?utm_source=atom_feed" rel="related" type="text/html" title="GitLab CI: How to Build Docker Images in Docker" />
                <link href="https://devopstales.github.io/devops/gitlab-ci-artifacts/?utm_source=atom_feed" rel="related" type="text/html" title="GitLab CI: artifacts management" />
                <link href="https://devopstales.github.io/devops/introduction-to-gitlab-ci-cd/?utm_source=atom_feed" rel="related" type="text/html" title="Introduction to GitLab CI/CD" />
                <link href="https://devopstales.github.io/devops/github-actions-basics/?utm_source=atom_feed" rel="related" type="text/html" title="GitHub Actions: Basics" />
                <link href="https://devopstales.github.io/devops/what-is-devops/?utm_source=atom_feed" rel="related" type="text/html" title="What is DevOps?" />
            
                <id>https://devopstales.github.io/devops/gitlab-ci-docker-bild-k8s/</id>
            
            
            <published>2023-02-10T00:00:00+00:00</published>
            <updated>2023-02-10T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>One of the most common use case is to build a Docker image with Gitlab. In a <a href="">previous post</a> we used dedicated docker runners for this job. But howe can we build images in a Kubernetes runner? In this post we well se this.</p>
<p>Using docker engine to build a container is a good solution but in some case can be unsafe. With the privilege to use a docker command you can create or delete any container. With the deprecation of dockershim in kubernetes this option is no longer usable. You can use multiple tools for this but in this case I will use <code>Kaniko</code>.</p>
<h3 id="what-is-kaniko">What is Kaniko?</h3>
<p><code>kaniko</code> builds container images from a <code>Dockerfile</code> inside a container or Kubernetes cluster. It doesn’t depend on a Docker daemon, and it executes each <code>Dockerfile</code> command completely in userspace. This  allows you to build container images in environments that can’t easily or securely run a Docker daemon — such as standard Kubernetes clusters.</p>
<h3 id="build-images-with-kaniko">Build images with Kaniko</h3>
<p>To build docker images with Kaniko in a Kubernetes Gitlab runner you just simply use its image as the image for the build job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>- <span style="color:#ae81ff">deploy_to_kubernetes</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">CACHE_TTL</span>: <span style="color:#ae81ff">2190h0m0s</span> <span style="color:#75715e"># three months</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">IMAGE_NAME</span>: <span style="color:#ae81ff">app</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">before_script</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">echo &#34;{\&#34;auths\&#34;:{\&#34;$CI_REGISTRY\&#34;:{\&#34;auth\&#34;:\&#34;$(printf &#34;%s:%s&#34; &#34;${CI_REGISTRY_USER}&#34; &#34;${CI_REGISTRY_PASSWORD}&#34; | base64 | tr -d &#39;\n&#39;)\&#34;},\&#34;$CI_DEPENDENCY_PROXY_SERVER\&#34;:{\&#34;auth\&#34;:\&#34;$(printf &#34;%s:%s&#34; ${CI_DEPENDENCY_PROXY_USER} &#34;${CI_DEPENDENCY_PROXY_PASSWORD}&#34; | base64 | tr -d &#39;\n&#39;)\&#34;}}}&#34; &gt; /kaniko/.docker/config.json</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">build-backend</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">kubernetes</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gcr.io/kaniko-project/executor:v1.9.0-debug</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">entrypoint</span>: [<span style="color:#e6db74">&#34;&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">/kaniko/executor \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">context &#34;${CI_PROJECT_DIR}&#34; \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">dockerfile &#34;${CI_PROJECT_DIR}/Dockerfile&#34; \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">destination &#34;${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_TAG}&#34; \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">cache-repo ${CONTAINER_REGISTRY}/${IMAGE_NAME} \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">cache=true \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">cache-ttl $CACHE_TTL</span>
</span></span></code></pre></div><p>GitLab provides a functionality to cache commonly used images. It helps you stay within Docker Hub’s rate limits. This will also improve the performance of your builds. To enable Dependency Proxy Go to your project&rsquo;s parent group <code>Settings &gt; Packages &amp; Registries &gt; Dependency Proxy</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>- <span style="color:#ae81ff">deploy_to_kubernetes</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">CACHE_TTL</span>: <span style="color:#ae81ff">2190h0m0s</span> <span style="color:#75715e"># three months</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">IMAGE_NAME</span>: <span style="color:#ae81ff">app</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">before_script</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">echo &#34;{\&#34;auths\&#34;:{\&#34;$CI_REGISTRY\&#34;:{\&#34;auth\&#34;:\&#34;$(printf &#34;%s:%s&#34; &#34;${CI_REGISTRY_USER}&#34; &#34;${CI_REGISTRY_PASSWORD}&#34; | base64 | tr -d &#39;\n&#39;)\&#34;},\&#34;$CI_DEPENDENCY_PROXY_SERVER\&#34;:{\&#34;auth\&#34;:\&#34;$(printf &#34;%s:%s&#34; ${CI_DEPENDENCY_PROXY_USER} &#34;${CI_DEPENDENCY_PROXY_PASSWORD}&#34; | base64 | tr -d &#39;\n&#39;)\&#34;}}}&#34; &gt; /kaniko/.docker/config.json</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">build-backend</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">kubernetes</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/executor:v1.9.0-debug</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">entrypoint</span>: [<span style="color:#e6db74">&#34;&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">/kaniko/executor \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">context &#34;${CI_PROJECT_DIR}&#34; \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">dockerfile &#34;${CI_PROJECT_DIR}/Dockerfile&#34; \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">destination &#34;${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_TAG}&#34; \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">registry-mirror &#34;$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX&#34; \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">cache-repo ${CONTAINER_REGISTRY}/${IMAGE_NAME} \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">cache=true \</span>
</span></span><span style="display:flex;"><span>      --<span style="color:#ae81ff">cache-ttl $CACHE_TTL</span>
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                             
                                <category scheme="gitlab" term="gitlab" label="gitlab" />
                             
                                <category scheme="gitlab-runner" term="gitlab-runner" label="gitlab-runner" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[GitLab CI: How to Build Docker Images in Docker]]></title>
            <link href="https://devopstales.github.io/devops/gitlab-ci-docker-bild/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/devops/gitlab-ci-artifacts/?utm_source=atom_feed" rel="related" type="text/html" title="GitLab CI: artifacts management" />
                <link href="https://devopstales.github.io/devops/introduction-to-gitlab-ci-cd/?utm_source=atom_feed" rel="related" type="text/html" title="Introduction to GitLab CI/CD" />
                <link href="https://devopstales.github.io/devops/github-actions-basics/?utm_source=atom_feed" rel="related" type="text/html" title="GitHub Actions: Basics" />
                <link href="https://devopstales.github.io/devops/what-is-devops/?utm_source=atom_feed" rel="related" type="text/html" title="What is DevOps?" />
                <link href="https://devopstales.github.io/monitoring/install-prometheus-for-gitlab/?utm_source=atom_feed" rel="related" type="text/html" title="Install Prometheus for Gitlab" />
            
                <id>https://devopstales.github.io/devops/gitlab-ci-docker-bild/</id>
            
            
            <published>2023-02-06T00:00:00+00:00</published>
            <updated>2023-02-06T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>One of the most common use case is to build a Docker image with Gitlab. In this post I will show you how to set up Docker builds in CI.</p>
<h3 id="shell-executor">Shell Executor</h3>
<p>The easiest way to build a docker image is by using the Shell executor. For this you need a standard linux based Gitlab Runner with Docker installed on it. Then the gitlab runner user needs to be in the <code>docker group</code> to execute docker commands.</p>
<p>To build a Docker image you mast store the <code>Dockerfile</code> in your repository. Here is the <code>.gitlab-ci.yaml</code> for this build:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">docker_build</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker build -t example.com/example-image:latest .</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker push example.com/example-image:latest</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>: 
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker</span>
</span></span></code></pre></div><p>To push an image to a docker registry you need to authenticate. Luckily Gitlab has it&rsquo;s own docker registry and automatically gives access to the runners. So you can use the built-in variables for this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">docker_build</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/example-image:latest .</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/example-image:latest</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>: 
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker</span>
</span></span></code></pre></div><p>The next problem is to identify your images, which image belongs to which build.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">docker_build</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    if [[ &#34;$CI_BUILD_REF_NAME&#34; == &#34;master&#34; ]]; then
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      DOCKER_TAG=&#34;latest&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    else
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      DOCKER_TAG=$CI_COMMIT_REF_SLUG
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    fi
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/example-image:latest .
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/example-image:latest
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    echo $DOCKER_TAG</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>: 
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker</span>
</span></span></code></pre></div><p>It is a best practice to use the commit hash as the tag. For release you can use the git release tag as tag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">docker_build</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    if [[ &#34;$CI_BUILD_REF_NAME&#34; == &#34;master&#34; ]]; then
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      DOCKER_TAG=&#34;latest&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    else
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      DOCKER_TAG=$CI_COMMIT_SHA
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    fi
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/example-image:$DOCKER_TAG .
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/example-image:$DOCKER_TAG
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    echo $DOCKER_TAG</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>: 
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">docker_release</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/example-image:$CI_COMMIT_TAG .
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/example-image:$CI_COMMIT_TAG
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    echo $CI_COMMIT_TAG</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>: 
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">only</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">master</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">tags</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">/^release-.*$/</span>
</span></span></code></pre></div><p>Usually you build your app in a separate job dan put your artifact in the docker image, but multistage docker build you can do thi in tha same job. For this you need t edit your <code>Dockerfile</code> to have an application build.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">FROM node:8 AS builder</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">ADD package*.json /app/</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">WORKDIR /app</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">RUN npm install</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">ADD . /app</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">RUN npm run-script build</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">FROM nginx</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">COPY --from=builder /app/dist/* /usr/share/nginx/html/</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">COPY --from=builder /app/dist/assets /usr/share/nginx/html/assets</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">IMAGE_TAG</span>: <span style="color:#ae81ff">$CI_REGISTRY_IMAGE:$CI_PIPELINE_ID</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">before_script</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">docker_build</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Here we try to download a Docker image with the :builder tag (which contains all the layers from the last build)</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker pull $CI_REGISTRY_IMAGE:builder || true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># It will run the first part of the Dockerfile. Also we tell Docker to use the cache layers from the previous build.</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker build --pull --cache-from $CI_REGISTRY_IMAGE:builder --target builder -t $CI_REGISTRY_IMAGE:builder .</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker build --pull --cache-from $CI_REGISTRY_IMAGE:builder --cache-from $IMAGE_TAG -t $IMAGE_TAG -t $CI_REGISTRY_IMAGE:latest .</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker push $CI_REGISTRY_IMAGE:builder</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker push $CI_REGISTRY_IMAGE:latest</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker push $IMAGE_TAG</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>: 
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker</span>
</span></span></code></pre></div><h3 id="building-with-the-docker-executor">Building With the Docker Executor</h3>
<p>You can use docker as an environment to run all the scripts to provide a completely clean environment for each job. For this you need to use gitlab runner in a so called Docker-in-Docker (DinD) mode. In a normal docker environment yo can not use docker commands in the container. When you use the docker cli it needs to connect to the docker engine unix socket. To do this you need to mount the docker socket in the container and run as privileged mode.</p>
<p>Register your runner in DinD mode:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo gitlab-runner register -n 
</span></span><span style="display:flex;"><span>  --url https://example.com 
</span></span><span style="display:flex;"><span>  --registration-token $GITLAB_REGISTRATION_TOKEN 
</span></span><span style="display:flex;"><span>  --executor docker 
</span></span><span style="display:flex;"><span>  --description <span style="color:#e6db74">&#34;Docker Runner&#34;</span> 
</span></span><span style="display:flex;"><span>  --docker-image <span style="color:#e6db74">&#34;docker:20.10&#34;</span> 
</span></span><span style="display:flex;"><span>  --docker-volumes <span style="color:#e6db74">&#34;/certs/client&#34;</span> 
</span></span><span style="display:flex;"><span>  --docker-privileged
</span></span></code></pre></div><p>When you configure CI/CD, you specify an image, which is used to create the container where your jobs run. To specify this image, you use the <code>image</code> keyword. ou can specify an additional image by using the <code>services</code> keyword. Within your CI pipeline, add the <code>docker:dind</code> image as a <code>service</code>. This gives a separate image to communicate with the docker engine.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">docker:dind</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">docker_build</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker:latest</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker build -t example-image:latest .</span>
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                             
                                <category scheme="gitlab" term="gitlab" label="gitlab" />
                             
                                <category scheme="gitlab-runner" term="gitlab-runner" label="gitlab-runner" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[GitHub Actions: Basics]]></title>
            <link href="https://devopstales.github.io/devops/github-actions-basics/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/devops/gitlab-ci-artifacts/?utm_source=atom_feed" rel="related" type="text/html" title="GitLab CI: artifacts management" />
                <link href="https://devopstales.github.io/devops/introduction-to-gitlab-ci-cd/?utm_source=atom_feed" rel="related" type="text/html" title="Introduction to GitLab CI/CD" />
                <link href="https://devopstales.github.io/devops/what-is-devops/?utm_source=atom_feed" rel="related" type="text/html" title="What is DevOps?" />
            
                <id>https://devopstales.github.io/devops/github-actions-basics/</id>
            
            
            <published>2023-01-29T00:00:00+00:00</published>
            <updated>2023-01-29T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how you can pass artifacts between  in gitlab CI.</p>
<h3 id="what-is-github-actions">What is GitHub Actions?</h3>
<p>GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline with GitHub.</p>
<p>You can configure a GitHub Actions <strong>workflow</strong> to be triggered when an <strong>event</strong> occurs in your repository, such as a pull request being opened or an issue being created. Your workflow contains one or more <strong>jobs</strong> which can run in sequential order or in parallel. Each job will run inside its own virtual machine <strong>runner</strong>, or inside a container, and has one or more <strong>steps</strong> that either run a script that you define or run an <strong>action</strong>, which is a reusable extension that can simplify your workflow. You can find the available action in the <a href="https://github.com/marketplace?type=actions">GitHub marketplace</a></p>
<h3 id="create-an-example-workflow">Create an example workflow</h3>
<p>GitHub Actions uses YAML syntax to define the workflow. Each workflow is stored as a separate YAML file in your code repository, in a directory named <code>.github/workflows</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">mkdir .github/workflows</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">nano .github/workflows/cicd.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">learn-github-actions</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># trigger</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># job definition. You can create multiple jobs</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;Build&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;checkout code&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-node@v3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">node-version</span>: <span style="color:#e6db74">&#39;14&#39;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">npm install -g bats</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">run</span>: <span style="color:#ae81ff">bats -v</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># share between jobs</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/upload-artifact@master</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">data</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">path</span>: <span style="color:#ae81ff">dist/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">deploy-dev</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#34;Deploy To Dev&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># add job called build as dependency</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">needs</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># download from previous job</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/download-artifact@master</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">data</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">path</span>: <span style="color:#ae81ff">dist/</span>
</span></span></code></pre></div><p>If you created the file, you need to commit and push to the github repository. Then it will run automatically each time someone pushes a change to the repository. When your <strong>workflow</strong> is <strong>triggered</strong>, a <strong>workflow run</strong> is created that executes the workflow. After a workflow run has started, you can see a visualization graph of the run&rsquo;s progress and view each step&rsquo;s activity on GitHub. To find this click <strong>Actions</strong> in the repository.</p>
<p><img src="/img/include/github-actions-basics01.webp" alt="GitHub Actions"  class="zoomable" /></p>
<p><img src="/img/include/github-actions-basics02.webp" alt="GitHub Actions"  class="zoomable" /></p>
<p><img src="/img/include/github-actions-basics03.webp" alt="GitHub Actions"  class="zoomable" /></p>
<p><img src="/img/include/github-actions-basics04.webp" alt="GitHub Actions"  class="zoomable" /></p>
<p><img src="/img/include/github-actions-basics05.webp" alt="GitHub Actions"  class="zoomable" /></p>
<hr>
<ul>
<li><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions">https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions</a></li>
</ul>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                             
                                <category scheme="github" term="github" label="GitHub" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Understand OKD OpenShift 4 Buildconfig Configurations]]></title>
            <link href="https://devopstales.github.io/devops/openshift4-buildconfig/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/kubernetes/openshift4-buildconfig/?utm_source=atom_feed" rel="related" type="text/html" title="Understand OKD OpenShift 4 Buildconfig Configurations" />
                <link href="https://devopstales.github.io/kubernetes/openshift4-registry/?utm_source=atom_feed" rel="related" type="text/html" title="Configuringure OKD OpenShift 4 registry for bare metal" />
                <link href="https://devopstales.github.io/kubernetes/openshift4-tekton/?utm_source=atom_feed" rel="related" type="text/html" title="Deploying Tekton on OpenShift 4" />
                <link href="https://devopstales.github.io/kubernetes/openshift-log4shell/?utm_source=atom_feed" rel="related" type="text/html" title="Openshift: Log4Shell - Remote Code Execution (CVE-2021-44228) (CVE-2021-4104)" />
                <link href="https://devopstales.github.io/kubernetes/openshift4-ceph-rbd-csi/?utm_source=atom_feed" rel="related" type="text/html" title="Configure OKD OpenShift 4 Ceph Persisten Storage" />
            
                <id>https://devopstales.github.io/devops/openshift4-buildconfig/</id>
            
            
            <published>2023-01-25T00:00:00+00:00</published>
            <updated>2023-01-25T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this Post I will show you how you can install rad hat openshift pipelines (Tekton) on OpenShift4.</p>


<H3>Parts of the Openshift 4 series</H3>
<ul>
     <li>Part1a: <a href="../../kubernetes/openshift4-install/">Install Opeshift 4</a></li>
     <li>Part1b: <a href="../../kubernetes/openshift4-calico/">Install Opeshift 4 with calico</a></li>
     <li>Part1c: <a href="../../kubernetes/openshift4-cilium/">Install Opeshift 4 with cilium</a></li>
     <li>Part2: <a href="../../kubernetes/openshift4-ingress/">Configure OKD OpenShift 4 ingress</a></li>
     <li>Part3: <a href="../../kubernetes/openshift4-auth/">Configure OKD OpenShift 4 authentication</a></li>
     <li>Part4: <a href="../../kubernetes/openshift4-ceph-rbd-csi/">Configure OKD OpenShift 4 Ceph Persisten Storage</a></li>
     <li>Part5: <a href="../../kubernetes/openshift4-registry/">Configuringure OKD OpenShift 4 registry for bare metal</a></li>
     <li>Part6a: <a href="../../kubernetes/openshift4-logging/">Install Cluster Logging Operator on OpenShift 4</a></li>
     <li>Part6b: <a href="../../kubernetes/openshift-log4shell/">Openshift: Log4Shell - Remote Code Execution (CVE-2021-44228) (CVE-2021-4104)</a></li>
     <li>Part7: <a href="../../kubernetes/openshift4-buildconfig/">Understand OKD OpenShift 4 Buildconfig Configurations</a></li>
     <li>Part8: <a href="../../kubernetes/openshift4-tekton/">Install RadHat OpenShift pipelines (Tekton) OKD 4</a></li>
</ul>



<h3 id="what-is-buildconfig">What is Buildconfig?</h3>
<p>Openshift has introduced a new resource called <code>BuildConfig</code>, to support Build Config Openshift developed a new technology called Source-to-Image (S2I) to build pods. S2I provides Openshift capabilities equivalent to Jenkins.</p>
<h3 id="understand-buildconfig-definition">Understand Buildconfig definition</h3>
<p>In a Buildconfig definition, there a list of directives to be fill. A sample Buildconfig definition looks like below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">build.openshift.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">BuildConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">maven-webapp-build</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">runPolicy</span>: <span style="color:#ae81ff">&lt;... list the run policy ...&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">triggers</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">&lt;... list of triggers ...&gt; </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">&lt;... input parameters or source ...&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">strategy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">&lt;... build strategy to use ...&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">output</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">&lt;... repository details ...&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">postCommit</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">&lt;... optinal build hooks ...&gt;</span>
</span></span></code></pre></div><p>Under the <code>spec</code> section source, <code>strategy</code> and <code>output</code> must be filled in order to run the build config.</p>
<ul>
<li><code>triggers</code> - Webhooks like GitHub/GitLab webhooks can be used to trigger this build.</li>
<li><code>source</code> - Here you can define the source code repository.</li>
<li><code>strategy</code> - This can be <code>Docker Build</code>, <code>Source-to-Image</code> or <code>Custom Build</code></li>
<li><code>output</code> - This directive is used to set an image output repository. This can be either Openshift build in a repository, on-premise private registry or docker hub.</li>
</ul>
<h3 id="source-to-image-s2i-build">Source-to-Image (S2I) Build</h3>
<p>Red Hat introduced Source-to-Image technology in order to reduce workload from developers and allow them to focus on the code.  Openshift provides a list of pre-built language images.  Those images are built with S2I binary, all the essential libraries, and tools needed for the development environment.</p>
<h3 id="openshift-imagestream-configuration-example">Openshift ImageStream Configuration Example</h3>
<p>First we ned to create an <code>ImageStream</code> to store the image. This is a folder in OKD&rsquo;s local dcker registry.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano ImageStream.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">image.openshift.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ImageStream</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">maven-webapp</span>
</span></span></code></pre></div><h3 id="openshift-buildconfig-configuration-example---1">Openshift BuildConfig Configuration Example - 1</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano BuildConfig.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">build.openshift.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">BuildConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">maven-webapp-build</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Dockerfile</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">dockerfile</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      FROM docker.io/tomcat
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      RUN wget https://tomcat.apache.org/tomcat-7.0-doc/appdev/sample/sample.war -O /usr/local/tomcat/webapps/maven-webapp.war
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      CMD [&#34;catalina.sh&#34;, &#34;run&#34;]</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">strategy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Docker</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">output</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">to</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ImageStreamTag</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;maven-webapp:latest&#39;</span>
</span></span></code></pre></div><p>I this <code>BuildConfig</code> I created a Docker build this is the name of the <code>strategy</code> too. For Docker build the <code>source</code> is a Dockerfile. As you can see the content of the Dockerfile is directly in the object. In the end the <code>output</code> is an <code>ImageStream</code>.</p>
<p><img src="/img/include/openshift4-buildconfig01.webp" alt="Example image"  class="zoomable" /></p>
<p><img src="/img/include/openshift4-buildconfig02.webp" alt="Example image"  class="zoomable" /></p>
<p><img src="/img/include/openshift4-buildconfig03.webp" alt="Example image"  class="zoomable" /></p>
<h3 id="openshift-buildconfig-configuration-example---2">Openshift BuildConfig Configuration Example - 2</h3>
<p>In this example, I will explain how to use <code>Docker Build Strategy</code> and <code>Git repositories</code>. In this, I hosted all resources on the Github repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano BuildConfig2.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">build.openshift.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">BuildConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">maven-webapp-build2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Git</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">git</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">uri</span>: <span style="color:#e6db74">&#39;https://github.com/devopstales/maven-web-project.git&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">ref</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">contextDir</span>: <span style="color:#ae81ff">sample</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">strategy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Docker</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#With this you can set a path to the docker file</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#dockerStrategy:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># dockerfilePath: dockerfile</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">output</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">to</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ImageStreamTag</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;maven-webapp:latest&#39;</span>
</span></span></code></pre></div><h3 id="openshift-buildconfig-configuration-example---3">Openshift BuildConfig Configuration Example - 3</h3>
<p>In this example, I am using  the <strong>source</strong> <code>strategy</code> for Source-to-Image (S2I) Build:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano BuildConfig3.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">BuildConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">build.openshift.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">centos-s2i</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">build-test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">output</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">to</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ImageStreamTag</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;maven-webapp:latest&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">strategy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Docker</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">dockerStrategy</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfilePath</span>: <span style="color:#ae81ff">Dockerfile</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Git</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">git</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">uri</span>: <span style="color:#e6db74">&#39;https://github.com/devopstales/maven-web-project&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">ref</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">contextDir</span>: <span style="color:#ae81ff">/S2I</span>
</span></span></code></pre></div><h1 id="the-build-pods">The build pods</h1>
<p>Openshift Use pods to uild the images so if a bild is unsuccessfull the build pod stuck in <code>Error</code> status:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>kubectl get pods
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>NAME                          READY   STATUS       RESTARTS   AGE
</span></span><span style="display:flex;"><span>maven-webapp-build-1-build    0/1     Error        <span style="color:#ae81ff">0</span>          66m
</span></span><span style="display:flex;"><span>maven-webapp-build-2-build    0/1     Error        <span style="color:#ae81ff">0</span>          44m
</span></span><span style="display:flex;"><span>maven-webapp-build-3-build    0/1     Error        <span style="color:#ae81ff">0</span>          42m
</span></span><span style="display:flex;"><span>maven-webapp-build-4-build    0/1     Completed    <span style="color:#ae81ff">0</span>          39m
</span></span><span style="display:flex;"><span>maven-webapp-build2-1-build   0/1     Init:Error   <span style="color:#ae81ff">0</span>          31m
</span></span><span style="display:flex;"><span>maven-webapp-build2-2-build   0/1     Error        <span style="color:#ae81ff">0</span>          28m
</span></span><span style="display:flex;"><span>maven-webapp-build2-3-build   0/1     Init:Error   <span style="color:#ae81ff">0</span>          5m50s
</span></span><span style="display:flex;"><span>maven-webapp-build2-4-build   0/1     Completed    <span style="color:#ae81ff">0</span>          5m14s
</span></span></code></pre></div><h3 id="how-tu-use-the-imagestream-to-automatcle-update-image-in-deployment">How tu use the ImageStream to Automatcle update image in Deployment?</h3>
<p>You can define an <code>ImageStream</code> in the <code>DeploymentConfig</code> object to trigger image update:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano DeploymentConfig.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps.openshift.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">DeploymentConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">maven-webapp</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">maven-webapp</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">app</span>: <span style="color:#ae81ff">maven-webapp</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">maven-webapp</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">triggers</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">ConfigChange </span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">ImageChange</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">imageChangeParams</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">automatic</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containerNames</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">maven-webapp</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">from</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ImageStreamTag</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">maven-webapp:latest</span>
</span></span></code></pre></div><h3 id="set-up-a-github-webhook">Set up a GitHub webhook</h3>
<p>Add <code>GitHub</code> type trigger for your <code>BuildConfig</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano BuildConfig3.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">BuildConfig</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">build.openshift.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">centos-s2i</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">build-test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">output</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">to</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ImageStreamTag</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;maven-webapp:latest&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">strategy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Docker</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">dockerStrategy</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dockerfilePath</span>: <span style="color:#ae81ff">Dockerfile</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">source</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Git</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">git</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">uri</span>: <span style="color:#e6db74">&#39;https://github.com/devopstales/maven-web-project&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">ref</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">contextDir</span>: <span style="color:#ae81ff">/S2I</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">triggers</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Generic</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">generic</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">secretReference</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">centos-s2i-generic-webhook-secret</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">GitHub</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">github</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">secretReference</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">centos-s2i-github-webhook-secret</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">type</span>: <span style="color:#ae81ff">ConfigChange</span>
</span></span></code></pre></div><p>GitHub webhooks allow external services to be notified when certain events happen. To automatically deploy a new pod when updates to the GitHub Dockerfile occur, you must configure your GitHub repo with the webhook that OpenShift provides as part of the BuildConfig.</p>
<ul>
<li>In the <code>Development</code> UI go to <code>Builds</code>, select your <code>BuildConfig</code></li>
<li>Go to the Webhooks section and click Copy URL with Secret for the Generic webhook type.</li>
</ul>
<p><img src="/img/include/openshift4-buildconfig04.webp" alt="Example image"  class="zoomable" /></p>
<ul>
<li>Open your GitHub repo and navigate to <code>Settings</code>.</li>
<li>Select <code>Webhooks</code> from the Options menu and click <code>Add Webhook</code>.</li>
</ul>
<p><img src="/img/include/openshift4-buildconfig05.webp" alt="Example image"  class="zoomable" /></p>
<ul>
<li>On the <code>Add webhook</code> page, paste the URL that you copied earlier into the <code>Payload URL</code> field.</li>
<li>In the <code>Content type</code> field, select the <code>application/json</code> option.</li>
<li>Click <code>Add webhook</code>.</li>
</ul>
<p><img src="/img/include/openshift4-buildconfig06.webp" alt="Example image"  class="zoomable" /></p>
<p>Select your newly added webhook to see its details. The Recent Deliveries section displays an entry for a ping test that is prefixed with a tick mark, which indicates that the ping test was successful.</p>
<p><img src="/img/include/openshift4-buildconfig07.webp" alt="Example image"  class="zoomable" /></p>
<p>Click the entry to view more details about the REST API call and the associated response for the ping test. A successful ping test indicates that GitHub is able to connect with your OpenShift cluster.</p>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="openshift" term="openshift" label="Openshift" />
                            
                        
                    
                 
                    
                 
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[GitLab CI: artifacts management]]></title>
            <link href="https://devopstales.github.io/devops/gitlab-ci-artifacts/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/devops/introduction-to-gitlab-ci-cd/?utm_source=atom_feed" rel="related" type="text/html" title="Introduction to GitLab CI/CD" />
                <link href="https://devopstales.github.io/devops/what-is-devops/?utm_source=atom_feed" rel="related" type="text/html" title="What is DevOps?" />
                <link href="https://devopstales.github.io/monitoring/install-prometheus-for-gitlab/?utm_source=atom_feed" rel="related" type="text/html" title="Install Prometheus for Gitlab" />
            
                <id>https://devopstales.github.io/devops/gitlab-ci-artifacts/</id>
            
            
            <published>2023-01-16T00:00:00+00:00</published>
            <updated>2023-01-16T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you how you can pass artifacts between  in gitlab CI.</p>
<p>In the <a href="">previous post</a> we learned the basics of Gitlab CI. I used docker image as an example of artifact in the previous post, but sometimes you need to create other kind of artifacts lik rpm, deb, or a binary, and use this artifacts in the next stage.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">deploy</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">echo &#34;File 1&#34; &gt;&gt; ./file1.txt</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">echo &#34;File 2&#34; &gt;&gt; ./file2.txt</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">mkdir dir1</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">echo &#34;dir1 File&#34; &gt;&gt; ./dir1/file.txt</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">mkdir dir2</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">echo &#34;dir2 File&#34; &gt;&gt; ./dir2/file.txt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">file1.txt</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">dir1/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">deploy</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">ls</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">ls dir1</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">cat file1.txt</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">cat dir1/file.txt</span>
</span></span></code></pre></div><p>We defined a build with a <code>build</code> and a <code>deploy</code> stage and both has a job with tha same name as tha stage.</p>
<p>In <code>build</code> we create 4 files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>├── dir1
</span></span><span style="display:flex;"><span>│   └── file.txt
</span></span><span style="display:flex;"><span>├── dir2
</span></span><span style="display:flex;"><span>│   └── file.txt
</span></span><span style="display:flex;"><span>├── file1.txt
</span></span><span style="display:flex;"><span>└── file2.txt
</span></span></code></pre></div><p>We can use the <code>artifact</code> property in the <code>.gitlab-ci.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">file1.txt</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">dir1/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">expire_in</span>: <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">week</span>
</span></span></code></pre></div><p>Artifacts is used to specify a list of files and directories which should be attached to the build after success. In this example we keep this files for <code>1 week</code></p>
<p>In <code>deploy</code>, the following files files - created in <code>build</code> - are available:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>├── dir1
</span></span><span style="display:flex;"><span>│   └── file.txt
</span></span><span style="display:flex;"><span>├── file1.txt
</span></span></code></pre></div><p>Then we can use the same file in the deploy stage</p>
<h3 id="download-job-artifacts">Download job artifacts</h3>
<p>You can download job artifacts or view the job archive:</p>
<ul>
<li>On the Pipelines page, to the right of the pipeline:</li>
</ul>
<p><img src="/img/include/gitlab-artifacts01.webp" alt="Gitlab artifacts"  class="zoomable" /></p>
<h3 id="upload-artifact-to-gitlab-generic-package-registry">Upload artifact to Gitlab Generic package registry</h3>
<p>Gitlab has its own package registries to store common types of packages for a longer time:</p>
<ul>
<li>Composer</li>
<li>Conan</li>
<li>Generic</li>
<li>Maven</li>
<li>npm</li>
<li>NuGet</li>
<li>PyPI</li>
<li>RubyGems</li>
</ul>
<p>In the nex example I will use the Generic package registry to store files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">curlimages/curl:latest</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">upload</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">download</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">upload</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">upload</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#39;curl --header &#34;JOB-TOKEN: $CI_JOB_TOKEN&#34; --upload-file file1.txt &#34;${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/my_package/0.0.1/file1.txt&#34;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">download</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">download</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#39;wget --header=&#34;JOB-TOKEN: $CI_JOB_TOKEN&#34; ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/my_package/0.0.1/file1.txt&#39;</span>
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                             
                                <category scheme="gitlab" term="gitlab" label="gitlab" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Introduction to GitLab CI/CD]]></title>
            <link href="https://devopstales.github.io/devops/introduction-to-gitlab-ci-cd/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://devopstales.github.io/devops/what-is-devops/?utm_source=atom_feed" rel="related" type="text/html" title="What is DevOps?" />
                <link href="https://devopstales.github.io/monitoring/install-prometheus-for-gitlab/?utm_source=atom_feed" rel="related" type="text/html" title="Install Prometheus for Gitlab" />
            
                <id>https://devopstales.github.io/devops/introduction-to-gitlab-ci-cd/</id>
            
            
            <published>2023-01-15T00:00:00+00:00</published>
            <updated>2023-01-15T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will show you the basics of using gitlab as a Continuous Integration and Continuous Deployments (CI/CD) tool.</p>
<h3 id="what-is-a-gitlab">What Is a GitLab?</h3>
<p>GitLab is a collaborative DevOps platform and open source code repository for large software development projects. GitLab provides an online code storage location, as well as CI/CD and issue tracking capabilities.</p>
<p>GitLab pipelines are the basic building blocks of CI/CD—a pipeline is a top-level component for continuous integration and delivery/deployment. A pipeline includes the following components:</p>
<ul>
<li><em><strong>Jobs</strong></em> — these define the desired actions, such as compiling or testing code. A runner executes each job, and you can run multiple parallel jobs if you have concurrent runners.</li>
<li><em><strong>Stages</strong></em> — these determine when each job runs, such as the code compilation stage followed by the test running stage.</li>
</ul>
<h3 id="create-a-project-on-gitlab">Create a Project on GitLab</h3>
<p>First, we need to create a project on GitLab. A Project is represent a git repository to store your code. You can run Gitlab on your own hardware or use the Gitlab.com the cloud service of Gitlab. In a <a href="/linux/gitlab-install/">previous post</a> I showed how to install an on-premise Gitlab server.</p>
<h3 id="gitlab-runners">Gitlab Runners</h3>
<p>Gitlab runners, re separate machines connected to the Gitlab server, which are actually the ones executing the pipelines.</p>
<p><img src="/img/include/gitlab-runners01.webp" alt="Gitlab Runners"  class="zoomable" /></p>
<p>Gitlab.com cloud service offers pre-installed runners to use. On a self hosted Gitlab server you need to create your own. To Install a new self hosted runner is easy. You just select the <code>Settings &gt; CI/CD</code> menu in your project and select <code>Runners</code>. You need tp copy the registration token from the <code>Set up a specific runner manually</code> menu:</p>
<p><img src="/img/include/gitlab-runner1.webp" alt="Gitlab Runners Registration"  class="zoomable" /></p>
<p>Then on a linux Server install the runner:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo chmod +x /usr/local/bin/gitlab-runner
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># add local user for the runner</span>
</span></span><span style="display:flex;"><span>sudo useradd --comment <span style="color:#e6db74">&#39;GitLab Runner&#39;</span> --create-home gitlab-runner --shell /bin/bash
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo gitlab-runner install --user<span style="color:#f92672">=</span>gitlab-runner --working-directory<span style="color:#f92672">=</span>/home/gitlab-runner
</span></span><span style="display:flex;"><span>sudo gitlab-runner start
</span></span></code></pre></div><p>Register the runner to the Gitlab Server. Change <code>&lt;REGISTRATION-TOKEN&gt;</code> to the token ypu previously copied.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo gitlab-runner register -n <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--url https://gitlab.mydomain.intra/ <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--executor docker <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--docker-privileged <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--docker-image <span style="color:#e6db74">&#34;docker:stable&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--docker-volumes <span style="color:#e6db74">&#34;/var/run/docker.sock:/var/run/docker.sock&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--registration-token &lt;REGISTRATION-TOKEN&gt;
</span></span></code></pre></div><p>This will register a docker based runner in Gitlab. This means all the build and pipeline job will run in a docker container. Of course to do this you need to install docker engine on your runner. In a <a href="/kubernetes/openshift-gitlabrunner/">previous post</a> I shoved how to install Gitlab Runners in an Openshift environment.</p>
<h3 id="create-a-yaml-configuration-file-for-cicd">Create a YAML Configuration File for CI/CD</h3>
<p>Gitlab use a file called <code>.gitlab-ci.yml</code> to configure your CI/CD pipeline.</p>
<p>Below is a snippet of what your <code>.gitlab-ci.yml</code> file should look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker:stable</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">DOCKER_TAG_LATEST</span>: <span style="color:#ae81ff">$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">DOCKER_TAG_COMMIT</span>: <span style="color:#ae81ff">$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">cache</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">node_modules/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">deploy</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker:latest</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker:dind</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">echo &#34;Starting to build&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker build -t $DOCKER_TAG_COMMIT -t $DOCKER_TAG_LATEST .</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker push $DOCKER_TAG_COMMIT</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker push $DOCKER_TAG_LATEST</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">echo $DOCKER_TAG_COMMIT</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">deploy</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">echo &#34;Starting to deploy&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">chmod og= $SSH_PRIVATE_KEY</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">apk update &amp;&amp; apk add openssh-client</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP &#34;docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP &#34;docker pull $DOCKER_TAG_COMMIT&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP &#34;docker container rm -f my-project || true&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP &#34;docker run -d -i -p 3000:3000 --name my-project $DOCKER_TAG_COMMIT&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">production</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://$SERVER_IP</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">only</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">main</span>
</span></span></code></pre></div><p>Here is a quick overview of how each part works to aid the deployment process:</p>
<p>The image defines the Docker image to be used:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker:stable</span>
</span></span></code></pre></div><p>In the variables section, you’re creating two tags for the Docker image. The <code>DOCKER_TAG_LATEST</code> variable will add the latest tag to the latest built Docker image, while the <code>DOCKER_TAG_COMMIT</code> variable will use the first eight characters of the commit SHA to tag the Docker image.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"></code></pre></div><p>The cache defines the file or list of files that should be cached between subsequent runs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">cache</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">node_modules/</span>
</span></span></code></pre></div><p>The stages define the order of jobs that would be in the pipeline. Here, there are two stages of the <code>build</code> and <code>deploy</code> as seen above.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">deploy</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">build</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">docker:latest</span> <span style="color:#75715e"># Defines the Docker image to be used</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span> <span style="color:#75715e"># The stage assigns the current job to the build stage.</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">services</span>: <span style="color:#75715e"># link to another docker image. This allows you to use the Docker executor to build your Docker image.</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker:dind</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>: <span style="color:#75715e"># run on runner with tag docker</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>: <span style="color:#75715e"># In script sou add the command that the build will execute. In this case we build a docker image and used the built-in variables to login and push the image to the Gitlab docker registry.</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">echo &#34;Starting to build&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker build -t $DOCKER_TAG_COMMIT -t $DOCKER_TAG_LATEST .</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker push $DOCKER_TAG_COMMIT</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker push $DOCKER_TAG_LATEST</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">echo $DOCKER_TAG_COMMIT</span>
</span></span></code></pre></div><p>The Deployment job is similar to the build except the fallowing snippet.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>  <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">production</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://$SERVER_IP</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">only</span>: <span style="color:#75715e"># can run only on main branch</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dependencies</span>: <span style="color:#75715e"># only runs if the build job is successful</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">build</span>
</span></span></code></pre></div><h1 id="start-a-cicd-pipeline">Start a CI/CD pipeline</h1>
<p>To activate the pipeline you need to place the <code>.gitlab-ci.yml</code> file in the root of your git repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cd myrepo
</span></span><span style="display:flex;"><span>nano .gitlab-ci.yml
</span></span><span style="display:flex;"><span>git add -A
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;add .gitlab-ci.yaml&#34;</span>
</span></span><span style="display:flex;"><span>git push
</span></span></code></pre></div><p>At the web-ui go to sour project and select <code>CI/CD &gt; pipelines</code> menu to check your pipeline. It will start automatically.</p>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                             
                                <category scheme="gitlab" term="gitlab" label="gitlab" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[What is DevOps?]]></title>
            <link href="https://devopstales.github.io/devops/what-is-devops/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://devopstales.github.io/devops/what-is-devops/</id>
            
            
            <published>2023-01-14T00:00:00+00:00</published>
            <updated>2023-01-14T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>This blog post is the first post of my new series where we will learn the use of the most popular CI/CD tools. But first we will understand tha philosophy behind this tools.</p>
<h2 id="what-is-devops">What is DevOps?</h2>
<p>The word <strong>DevOps</strong> is a combination of the terms <strong>development</strong> (Dev) and <strong>operations</strong> (Ops), meant to represent a collaborative or shared approach to the tasks performed by a company&rsquo;s application development and IT operations teams.</p>
<h2 id="devops-explained">DevOps explained</h2>
<p>In its broadest meaning, DevOps is a philosophy that automate and integrate the processes between software development and IT teams. It emphasizes team empowerment, cross-team communication and collaboration, and technology automation. In its most narrow interpretation, DevOps describes the adoption of iterative software development, automation, and programmable infrastructure deployment and maintenance.</p>
<p>The DevOps movement began around 2007 when the software development and IT operations communities raised concerns about the traditional software development model, where developers who wrote code worked apart from operations who deployed and supported the code.</p>
<h2 id="how-does-devops-work">How does DevOps work?</h2>
<p>A DevOps team includes developers and IT operators working together, in order to increase the speed and quality of software deployment. It’s a new way of working, a cultural shift, that has significant implications for teams and the organizations they work for.</p>
<p>Under a DevOps model, development and operations teams are no longer &ldquo;siloed.&rdquo; Sometimes, these two teams merge into a single team or every development team get a new member wo is a devops engineer.</p>
<p>DevOps teams use tools to automate and accelerate processes, which helps to increase reliability. A DevOps toolchain helps teams tackle important DevOps fundamentals including continuous integration, continuous delivery, automation, and collaboration.</p>
<p>DevOps values are sometimes applied to teams other than development. When security teams adopt a DevOps approach, security is an active and integrated part of the development process. This is called DevSecOps.</p>
<h2 id="devops-and-the-application-lifecycle">DevOps and the application lifecycle</h2>
<p>DevOps influences the application lifecycle throughout its planning, development, delivery, and operations phases. Each phase relies on the other phases, and the phases aren&rsquo;t role-specific. A DevOps culture involves all roles in each phase to some extent.</p>
<p><img src="/img/include/devops01.webp" alt="Devops"  class="zoomable" /></p>
<h3 id="discover">Discover</h3>
<p>Building software is a team sport. In preparation for the upcoming sprint, teams must workshop to explore, organize, and prioritize ideas. Ideas must align to strategic goals and deliver customer impact. Agile can help guide DevOps teams.</p>
<h3 id="planning">Planning</h3>
<p>DevOps teams should adopt agile practices to improve speed and quality. Agile is an iterative approach to project management and software development that helps teams break work into smaller pieces to deliver incremental value.</p>
<h3 id="build">Build</h3>
<p>Git is a free and open source version control system. It offers excellent support for branching, merging, and rewriting repository history, which has led to many innovative and powerful workflows and tools for the development build process.</p>
<h3 id="test">Test</h3>
<p>Continuous integration (CI) allows multiple developers to contribute to a single shared repository. When code changes are merged, automated tests are run to ensure correctness before integration. Merging and testing code often help development teams gain reassurance in the quality and predictability of code once deployed.</p>
<h3 id="deploy">Deploy</h3>
<p>Continuous deployment (CD) allows teams to release features frequently into production in an automated fashion. Teams also have the option to deploy with feature flags, delivering new code to users steadily and methodically rather than all at once. This approach improves velocity, productivity, and sustainability of software development teams.</p>
<h3 id="operate">Operate</h3>
<p>Manage the end-to-end delivery of IT services to customers. This includes the practices involved in design, implementation, configuration, deployment, and maintenance of all IT infrastructure that supports an organization’s services.</p>
<h3 id="observe">Observe</h3>
<p>Quickly identify and resolve issues that impact product uptime, speed, and functionality. Automatically notify your team of changes, high-risk actions, or failures, so you can keep services on.</p>
<h3 id="continuous-feedback">Continuous feedback</h3>
<p>DevOps teams should evaluate each release and generate reports to improve future releases. By gathering continuous feedback, teams can improve their processes and incorporate customer feedback to improve the next release.</p>
<h2 id="benefits-of-devops">Benefits of DevOps</h2>
<h3 id="speed">Speed</h3>
<p>Move at high velocity so you can innovate for customers faster, adapt to changing markets better, and grow more efficient at driving business results. The DevOps model enables your developers and operations teams to achieve these results. For example, microservices and continuous delivery let teams take ownership of services and then release updates to them quicker.</p>
<h3 id="rapid-delivery">Rapid Delivery</h3>
<p>Increase the frequency and pace of releases so you can innovate and improve your product faster. The quicker you can release new features and fix bugs, the faster you can respond to your customers’ needs and build competitive advantage. Continuous integration and continuous delivery are practices that automate the software release process, from build to deploy.</p>
<h3 id="scale">Scale</h3>
<p>Operate and manage your infrastructure and development processes at scale. Automation and consistency help you manage complex or changing systems efficiently and with reduced risk. For example, infrastructure as code helps you manage your development, testing, and production environments in a repeatable and more efficient manner.</p>
<h3 id="improved-collaboration">Improved Collaboration</h3>
<p>Build more effective teams under a DevOps cultural model, which emphasizes values such as ownership and accountability. Developers and operations teams collaborate closely, share many responsibilities, and combine their workflows. This reduces inefficiencies and saves time (e.g. reduced handover periods between developers and operations, writing code that takes into account the environment in which it is run).</p>
<h3 id="security">Security</h3>
<p>Move quickly while retaining control and preserving compliance. You can adopt a DevOps model without sacrificing security by using automated compliance policies, fine-grained controls, and configuration management techniques. For example, using infrastructure as code and policy as code, you can define and then track compliance at scale. Sometimes they called this DevSecOps.</p>
<h3 id="reliability">Reliability</h3>
<p>Ensure the quality of application updates and infrastructure changes so you can reliably deliver at a more rapid pace while maintaining a positive experience for end users. Use practices like continuous integration and continuous delivery to test that each change is functional and safe. Monitoring and logging practices help you stay informed of performance in real-time.</p>
<h2 id="why-devops-matters">Why DevOps Matters</h2>
<p>Software and the Internet have transformed the world and its industries, from shopping to entertainment to banking. Software no longer merely supports a business; rather it becomes an integral component of every part of a business. Companies interact with their customers through software delivered as online services or applications and on all sorts of devices. They also use software to increase operational efficiencies by transforming every part of the value chain, such as logistics, communications, and operations. In a similar way that physical goods companies transformed how they design, build, and deliver products using industrial automation throughout the 20th century, companies in today’s world must transform how they build and deliver software.</p>
<h2 id="devops-tools">DevOps Tools</h2>
<p>The DevOps model relies on effective tooling to help teams rapidly and reliably deploy and innovate for their customers. These tools automate manual tasks, help teams manage complex environments at scale, and keep engineers in control of the high velocity that is enabled by DevOps. In the next posts we will learn hiw to use this tools.</p>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Installing GitLab on OpenShift]]></title>
            <link href="https://devopstales.github.io/devops/openshift-gitlab-helm/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://devopstales.github.io/devops/openshift-gitlab-helm/</id>
            
            
            <published>2019-11-18T00:00:00+00:00</published>
            <updated>2019-11-18T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>I  had to install Gitlab to Openshift recently. Turned out getting GitLab up and running on OpenShift is not so easy.</p>
<h3 id="create-new-project">Create new project</h3>
<pre tabindex="0"><code>oc new-project gitlab-devopstales.intra
</code></pre><h3 id="deploy-helm">Deploy helm</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano helm-namespace-account.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tiller-gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">kube-system</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tiller-gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRole</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cluster-admin</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tiller-gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">kube-system</span>
</span></span></code></pre></div><p>Now set up Helm, install the Tiller plugin and add the GitLab repository.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>oc apply -f helm-namespace-account.yaml
</span></span><span style="display:flex;"><span>oc get sa
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>helm init --service-account tiller-gitlab-devopstales.intra --tiller-namespace gitlab-mydomain-intra
</span></span><span style="display:flex;"><span>oc get po -n kube-system
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>export TILLER_NAMESPACE<span style="color:#f92672">=</span>kube-system
</span></span><span style="display:flex;"><span>echo $TILLER_NAMESPACE
</span></span><span style="display:flex;"><span>helm version
</span></span></code></pre></div><h2 id="get-helmchart">Get helmchart</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm repo add gitlab https://charts.gitlab.io/
</span></span><span style="display:flex;"><span>helm repo update
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>oc adm policy add-scc-to-user anyuid -z default -n gitlab-devopstales.intra
</span></span><span style="display:flex;"><span>oc adm policy add-scc-to-user anyuid -z gitlab-runner -n gitlab-devopstales.intra
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># gitlab-tst is the name of the helm deployment</span>
</span></span><span style="display:flex;"><span>oc adm policy add-scc-to-user anyuid -z gitlab-tst-shared-secrets
</span></span><span style="display:flex;"><span>oc adm policy add-scc-to-user anyuid -z gitlab-tst-gitlab-runner
</span></span><span style="display:flex;"><span>oc adm policy add-scc-to-user anyuid -z gitlab-tst-prometheus-server
</span></span><span style="display:flex;"><span>oc adm policy add-scc-to-user anyuid -z default
</span></span></code></pre></div><h3 id="create-chart-values">Create chart values</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano gitlab-values.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">certmanager</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">install</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">global</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">appConfig</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enableUsagePing</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enableImpersonation</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">defaultCanCreateGroup</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">usernameChangingEnabled</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">issueClosingPattern</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">defaultTheme</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">defaultProjectsFeatures</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">issues</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">mergeRequests</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">wiki</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">snippets</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">builds</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containerRegistry</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ldap</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">servers</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">main</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">base</span>: <span style="color:#ae81ff">dc=mydomain,dc=intra</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">user_filter</span>: <span style="color:#ae81ff">(&amp;(objectClass=user)(memberof=cn=Users,dc=mydomain,dc=intra))</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">bind_dn</span>: <span style="color:#ae81ff">Administrator@devopstales.intra</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">host</span>: <span style="color:#ae81ff">192.168.10.4</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">label</span>: <span style="color:#ae81ff">devopstales.intra</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">password</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">key</span>: <span style="color:#ae81ff">password</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">secret</span>: <span style="color:#ae81ff">gitlab-ldap-secret</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">port</span>: <span style="color:#ae81ff">636</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">encryption</span>: <span style="color:#ae81ff">simple_tls</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">uid</span>: <span style="color:#ae81ff">sAMAccountName</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">active_directory</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">verify_certificates</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">allow_username_or_email_login</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">omniauth</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">blockAutoCreatedUsers</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">allowSingleSignOn</span>: [<span style="color:#e6db74">&#39;oauth2_generic&#39;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">providers</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">secret</span>: <span style="color:#ae81ff">gitlab-sso</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">key</span>: <span style="color:#ae81ff">provider</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">backups</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bucket</span>: <span style="color:#ae81ff">gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">tmpBucket</span>: <span style="color:#ae81ff">gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">objectStorage</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">backend</span>: <span style="color:#ae81ff">s3</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">lfs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bucket</span>: <span style="color:#ae81ff">gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">connection</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">secret</span>: <span style="color:#ae81ff">ceph-storage</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">key</span>: <span style="color:#ae81ff">gitlab</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bucket</span>: <span style="color:#ae81ff">gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">connection</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">secret</span>: <span style="color:#ae81ff">ceph-storage</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">key</span>: <span style="color:#ae81ff">gitlab</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">uploads</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bucket</span>: <span style="color:#ae81ff">gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">connection</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">secret</span>: <span style="color:#ae81ff">ceph-storage</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">key</span>: <span style="color:#ae81ff">gitlab</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">packages</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bucket</span>: <span style="color:#ae81ff">gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">connection</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">secret</span>: <span style="color:#ae81ff">ceph-storage</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">key</span>: <span style="color:#ae81ff">gitlab</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">externalDiffs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bucket</span>: <span style="color:#ae81ff">gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">connection</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">secret</span>: <span style="color:#ae81ff">ceph-storage</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">key</span>: <span style="color:#ae81ff">gitlab</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">pseudonymizer</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">bucket</span>: <span style="color:#ae81ff">gitlab-devopstales.intra</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">connection</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">secret</span>: <span style="color:#ae81ff">ceph-storage</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">key</span>: <span style="color:#ae81ff">gitlab</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">edition</span>: <span style="color:#ae81ff">ce</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">email</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">from</span>: <span style="color:#ae81ff">gitlab@devopstales.intra</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hosts</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">domain</span>: <span style="color:#ae81ff">devopstales.intra</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">externalIP</span>: <span style="color:#ae81ff">gitlab.devopstales.intra</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">gitlab</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gitlab.devopstales.intra</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">https</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">registry</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gitlab-registry.devopstales.intra</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">https</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ingress</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">configureCertmanager</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tls</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">gitlab-certs</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">smtp</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">address</span>: <span style="color:#ae81ff">mail.active.hu</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">authentication</span>: <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">domain</span>: <span style="color:#ae81ff">devopstales.intra</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">25</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">gitlab-exporter</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">registry</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">bucket</span>: <span style="color:#ae81ff">gitlab-registry</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">minio</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">nginx-ingress</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">gitlab-runner</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rbac</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">create</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">registry</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">storage</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">secret</span>: <span style="color:#ae81ff">ceph-storage</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">key</span>: <span style="color:#ae81ff">registry</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">repository</span>: <span style="color:#ae81ff">docker.io/registry</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">tag</span>: <span style="color:#ae81ff">2.6.0</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">gitlab</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">task-runner</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">backups</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">objectStorage</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">config</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">secret</span>: <span style="color:#ae81ff">storage-config</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">key</span>: <span style="color:#ae81ff">config</span>
</span></span></code></pre></div><h3 id="create-secrets-for-deployment">Create secrets for deployment</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano ceph.gitlab-data.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">provider</span>: <span style="color:#ae81ff">AWS</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">region</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">aws_access_key_id</span>: <span style="color:#ae81ff">W3MNDO373H6LQUNCG4SG</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">aws_secret_access_key</span>: <span style="color:#ae81ff">vVFEWx3hqbcrGJyaZVie9YoFG6rPoRYmqnDzRwrn</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">endpoint</span>: <span style="color:#e6db74">&#34;https://s3.devopstales.intra&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">enable_signature_v4_streaming</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># admin jog kell a cephez</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">nano ceph.gitlab-registry.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">cache</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">blobdescriptor</span>: <span style="color:#ae81ff">inmemory</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">s3</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">region</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">bucket</span>: <span style="color:#ae81ff">gitlab-registry</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">accesskey</span>: <span style="color:#ae81ff">PZIOIH63CENHPG15XY42</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secretkey</span>: <span style="color:#ae81ff">K6K1lWO7Jtyp5rZiCwj77JC5BFMEAZ4a2PAkg9fB</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">regionendpoint</span>: <span style="color:#ae81ff">https://s3.devopstales.intra</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rootdirectory</span>: <span style="color:#ae81ff">/</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secure</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">v4auth</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">encrypt</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">chunksize</span>: <span style="color:#ae81ff">5242880</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">redirect</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">disable</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>nano ceph.backup.config
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>default<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>access_key <span style="color:#f92672">=</span> W3MNDO373H8LQUNCJ8QV
</span></span><span style="display:flex;"><span>access_token <span style="color:#f92672">=</span> vVFEWx8hqbcrGJyaZVie8YoER8rPoRYmqnDzRwrn
</span></span><span style="display:flex;"><span>host_base <span style="color:#f92672">=</span> s3.devopstales.intra
</span></span><span style="display:flex;"><span>host_bucket <span style="color:#f92672">=</span> %<span style="color:#f92672">(</span>bucket<span style="color:#f92672">)</span>s.s3.devopstales.intra
</span></span><span style="display:flex;"><span>bucket_location <span style="color:#f92672">=</span> US
</span></span><span style="display:flex;"><span>use_https <span style="color:#f92672">=</span> True
</span></span><span style="display:flex;"><span>check_ssl_certificate <span style="color:#f92672">=</span> False
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano keycloak.sso.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;oauth2_generic&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">label</span>: <span style="color:#e6db74">&#39;mydomain&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">app_id</span>: <span style="color:#e6db74">&#39;gitlab&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">app_secret</span>: <span style="color:#e6db74">&#39;f2514bd4-92e4-40fa-bec4-382838db25f0&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">client_options</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">site</span>: <span style="color:#e6db74">&#39;https://sso.devopstales.intra&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">user_info_url</span>: <span style="color:#e6db74">&#39;/auth/realms/mydomain/protocol/openid-connect/userinfo&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">authorize_url</span>: <span style="color:#e6db74">&#39;/auth/realms/mydomain/protocol/openid-connect/auth&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">token_url</span>: <span style="color:#e6db74">&#39;/auth/realms/mydomain/protocol/openid-connect/token&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">user_response_structure</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">attributes</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">email</span>: <span style="color:#e6db74">&#39;email&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">first_name</span>: <span style="color:#e6db74">&#39;given_name&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">last_name</span>: <span style="color:#e6db74">&#39;family_name&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;name&#39;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">nickname</span>: <span style="color:#e6db74">&#39;preferred_username&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">id_path</span>: <span style="color:#e6db74">&#39;preferred_username&#39;</span>
</span></span></code></pre></div><h3 id="deploy-secrets">Deploy secrets</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># https ssl cert</span>
</span></span><span style="display:flex;"><span>oc create secret tls gitlab-certs --cert<span style="color:#f92672">=</span>tls.crt --key<span style="color:#f92672">=</span>tls.key
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>oc create secret generic storage-config --from-file<span style="color:#f92672">=</span>config<span style="color:#f92672">=</span>ceph.backup.config
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>oc create secret generic ceph-storage --from-file<span style="color:#f92672">=</span>registry<span style="color:#f92672">=</span>ceph.gitlab-registry.yaml --from-file<span style="color:#f92672">=</span>gitlab<span style="color:#f92672">=</span>ceph.gitlab-data.yaml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>oc create secret generic gitlab-sso --from-file<span style="color:#f92672">=</span>provider<span style="color:#f92672">=</span>keycloak.sso.yaml
</span></span><span style="display:flex;"><span>oc create secret generic gitlab-ldap-secret --from-literal<span style="color:#f92672">=</span>password<span style="color:#f92672">=</span>
</span></span></code></pre></div><h3 id="deploy-application-with-helm">Deploy application with helm</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>helm upgrade --install -f gitlab-values.yml gitlab-tst gitlab/gitlab --debug --dry-run
</span></span><span style="display:flex;"><span>helm upgrade --install -f gitlab-values.yml gitlab-tst gitlab/gitlab --timeout <span style="color:#ae81ff">600</span>
</span></span><span style="display:flex;"><span>helm upgrade -f gitlab-values.yml gitlab-tst gitlab/gitlab --timeout <span style="color:#ae81ff">600</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://docs.gitlab.com/charts/installation/version_mappings.html</span>
</span></span><span style="display:flex;"><span>helm upgrade -f gitlab-values.yml gitlab-tst gitlab/gitlab --version 2.3.5 --timeout <span style="color:#ae81ff">600</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># gitlab-tst</span>
</span></span><span style="display:flex;"><span>oc get secret gitlab-tst-gitlab-initial-root-password -o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;{.data.password}&#39;</span> | base64 -d
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano gitlab-ssh-nodeport-svc.yaml</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gitlab-shell-nodeport</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">gitlab-shell</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gitlab-shell-nodeport</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>: <span style="color:#ae81ff">NodePort</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">port</span>: <span style="color:#ae81ff">2222</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">nodePort</span>: <span style="color:#ae81ff">32222</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">ssh</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">gitlab-shell</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>oc create -f gitlab-ssh-nodeport-svc.yaml
</span></span></code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="gitlab" term="gitlab" label="Gitlab" />
                             
                                <category scheme="openshift" term="openshift" label="Openshift" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Gitlab Install]]></title>
            <link href="https://devopstales.github.io/devops/gitlab-install/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://devopstales.github.io/devops/gitlab-install/</id>
            
            
            <published>2019-06-05T00:00:00+00:00</published>
            <updated>2019-06-05T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Install Gitab with custom postgresql and nginx proxy.</p>
<h3 id="install-ntpd">Install NTPD</h3>
<pre tabindex="0"><code>yum install -y epel-release yum-utils
yum-config-manager --enable epel

sudo chkconfig ntpd on
sudo ntpdate 0.hu.pool.ntp.org
sudo service ntpd start
</code></pre><h3 id="install-postgresql">Install postgresql</h3>
<p>In a previous post I wrote about how to <a href="/linux/install-postgresql/#install-postgresql-10-on-centos-7">Install PostgreSQL 10</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>su - postgres
</span></span><span style="display:flex;"><span>createdb -U postgres gitlab
</span></span><span style="display:flex;"><span>createdb -U postgres gitlab_ci
</span></span><span style="display:flex;"><span>createdb -U postgres mattermost
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>createuser gituser
</span></span><span style="display:flex;"><span>createuser ciuser
</span></span><span style="display:flex;"><span>createuser mmuser
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>psql -U postgres gitlab
</span></span><span style="display:flex;"><span>ALTER USER <span style="color:#e6db74">&#34;gituser&#34;</span> WITH PASSWORD <span style="color:#e6db74">&#39;Password1&#39;</span>;
</span></span><span style="display:flex;"><span>GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO gituser;
</span></span><span style="display:flex;"><span>ALTER ROLE gituser CREATEROLE SUPERUSER;
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">\q</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>psql -U postgres gitlab_ci
</span></span><span style="display:flex;"><span>ALTER USER <span style="color:#e6db74">&#34;ciuser&#34;</span> WITH PASSWORD <span style="color:#e6db74">&#39;Password1&#39;</span>;
</span></span><span style="display:flex;"><span>GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ciuser;
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">\q</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>psql -U postgres mattermost
</span></span><span style="display:flex;"><span>ALTER USER <span style="color:#e6db74">&#34;mmuser&#34;</span> WITH PASSWORD <span style="color:#e6db74">&#39;Password1&#39;</span>;
</span></span><span style="display:flex;"><span>GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO mmuser;
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">\q</span>
</span></span></code></pre></div><h3 id="install-nginx">install nginx</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>yum install -y nginx
</span></span><span style="display:flex;"><span>mkdir /var/log/gitlab/nginx/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#39;upstream gitlab-workhorse {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        server unix:/var/opt/gitlab/gitlab-workhorse/socket;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">server {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        listen *:80;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">#  listen *:443 ssl;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        server_name gitlab.devopstales.intra;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        server_tokens off;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        root /opt/gitlab/embedded/service/gitlab-rails/public;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        client_max_body_size 256m;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        real_ip_header X-Forwarded-For;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        access_log /var/log/gitlab/nginx/gitlab_access.log;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        error_log  /var/log/gitlab/nginx/gitlab_error.log;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> # ssl_certificate   /etc/nginx/ssl.d/gitlab.pem;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> # ssl_certificate_key   /etc/nginx/ssl.d/gitlab.key;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        location / {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                proxy_read_timeout	300;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                proxy_connect_timeout   300;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                proxy_redirect          off;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                proxy_buffering off;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                proxy_set_header    Host                $http_host;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                proxy_set_header    X-Real-IP           $remote_addr;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                proxy_set_header    X-Forwarded-Proto   $scheme;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                proxy_pass http://gitlab-workhorse;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    proxy_request_buffering off;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    proxy_http_version 1.1;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        location ~ ^/(assets)/ {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                root /opt/gitlab/embedded/service/gitlab-rails/public;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                gzip_static on; # to serve pre-gzipped version
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                        expires max;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">               	add_header Cache-Control public;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        error_page 502 /502.html;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span> &gt; /etc/nginx/conf.d/gitlab.conf
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nano /etc/nginx/nginx.conf
</span></span><span style="display:flex;"><span>log_format gitlab_access <span style="color:#e6db74">&#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; $status $body_bytes_sent &#34;$http_referer&#34; &#34;$http_user_agent&#34;&#39;</span>;
</span></span><span style="display:flex;"><span>log_format gitlab_ci_access <span style="color:#e6db74">&#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; $status $body_bytes_sent &#34;$http_referer&#34; &#34;$http_user_agent&#34;&#39;</span>;
</span></span><span style="display:flex;"><span>log_format gitlab_mattermost_access <span style="color:#e6db74">&#39;$remote_addr - $remote_user [$time_local] &#34;$request&#34; $status $body_bytes_sent &#34;$http_referer&#34; &#34;$http_user_agent&#34;&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nginx -t
</span></span><span style="display:flex;"><span>nginx -s reload
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sudo usermod -aG gitlab-www nginx
</span></span></code></pre></div><h3 id="install-gitlab">install gitlab</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
</span></span><span style="display:flex;"><span>sudo yum install gitlab-ce -y
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cd /opt/gitlab/embedded/bin
</span></span><span style="display:flex;"><span>mv psql psql_moved
</span></span><span style="display:flex;"><span>mv pg_dump pg_dump_moved
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>which pg_dump psql
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ln -s /usr/bin/pg_dump /usr/bin/psql /opt/gitlab/embedded/bin/
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rb" data-lang="rb"><span style="display:flex;"><span>nano <span style="color:#e6db74">/etc/</span>gitlab<span style="color:#f92672">/</span>gitlab<span style="color:#f92672">.</span>rb
</span></span><span style="display:flex;"><span>external_url <span style="color:#e6db74">&#39;http://gitlab.devopstales.intra&#39;</span>
</span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;time_zone&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Europe/Budapest&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;db_adapter&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;postgresql&#34;</span>
</span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;db_encoding&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;unicode&#34;</span>
</span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;db_database&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gitlab&#34;</span>
</span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;db_pool&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;db_username&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gituser&#34;</span>
</span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;db_password&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Password1&#34;</span>
</span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;db_host&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;127.0.0.1&#39;</span>
</span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;db_port&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5432</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>gitlab_rails<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;redis_socket&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/var/opt/gitlab/redis/redis.socket&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>unicorn<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;socket&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/var/opt/gitlab/gitlab-rails/sockets/gitlab.socket&#39;</span>
</span></span><span style="display:flex;"><span>unicorn<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;log_directory&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/var/log/gitlab/unicorn&#34;</span>
</span></span><span style="display:flex;"><span>unicorn<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;port&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">8081</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>user<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;username&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;git&#34;</span>
</span></span><span style="display:flex;"><span>user<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;group&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;git&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>postgresql<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;enable&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nginx<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;enable&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>web_server<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;external_users&#39;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#39;nginx&#39;</span><span style="color:#f92672">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gitlab-ctl reconfigure
</span></span></code></pre></div>]]></content>
            
                 
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Install Gitlab runner on Openshift]]></title>
            <link href="https://devopstales.github.io/devops/openshift-gitlabrunner/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://devopstales.github.io/devops/openshift-gitlabrunner/</id>
            
            
            <published>2019-04-20T00:00:00+00:00</published>
            <updated>2019-04-20T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>In this post I will configure a gtlab rubber for Openshift.</p>
<h3 id="creating-a-service-account">Creating a Service Account</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>oc new-project gitlab-rubber
</span></span><span style="display:flex;"><span>oc create sa gitlab-ci
</span></span><span style="display:flex;"><span>oc policy add-role-to-user edit system:serviceaccount:gitlab-rubber:gitlab-ci
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>oc get sa
</span></span><span style="display:flex;"><span>NAME         SECRETS   AGE
</span></span><span style="display:flex;"><span>builder      <span style="color:#ae81ff">2</span>         2d
</span></span><span style="display:flex;"><span>default      <span style="color:#ae81ff">2</span>         2d
</span></span><span style="display:flex;"><span>deployer     <span style="color:#ae81ff">2</span>         2d
</span></span><span style="display:flex;"><span>gitlab-ci    <span style="color:#ae81ff">2</span>         2d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>oc describe sa gitlab-ci
</span></span><span style="display:flex;"><span>Name:           gitlab-ci
</span></span><span style="display:flex;"><span>Namespace:      constellation
</span></span><span style="display:flex;"><span>Labels:         &lt;none&gt;
</span></span><span style="display:flex;"><span>Annotations:    &lt;none&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Image pull secrets:     gitlab-ci-dockercfg-q5mj9
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Mountable secrets:      gitlab-ci-token-gvvkv
</span></span><span style="display:flex;"><span>                        gitlab-ci-dockercfg-q5mj9
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Tokens:                 gitlab-ci-token-gvvkv
</span></span><span style="display:flex;"><span>                        gitlab-ci-token-tfsf7
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>oc describe secret gitlab-ci-token-gvvkv
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>token:          eyJ...&lt;very-long-token&gt;...-cw
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>oc login --token<span style="color:#f92672">=</span>eyJ...&lt;very-long-token&gt;...-cw
</span></span></code></pre></div><h3 id="edit-gitlab-ci-config">Edit Gitlab-ci config</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">nano  .gitlab-ci.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">image</span>: <span style="color:#ae81ff">ebits/openshift-client</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">deployToOpenShift</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">OPENSHIFT_SERVER</span>: <span style="color:#ae81ff">https://master.openshift.devopstales.intra:443</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">OPENSHIFT_DOMAIN</span>: <span style="color:#ae81ff">openshift.devopstales.intra</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Configure this variable in Secure Variables:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">OPENSHIFT_TOKEN</span>: <span style="color:#ae81ff">eyJ...&lt;very-long-token&gt;...-cw</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">.deploy</span>: <span style="color:#75715e">&amp;deploy</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">before_script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">oc login &#34;$OPENSHIFT_SERVER&#34; --token=&#34;$OPENSHIFT_TOKEN&#34; --insecure-skip-tls-verify</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># login with the service account</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">oc project &#34;slides-openshift&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># enter into our slides project on OpenShift</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#34;oc get services $APP 2&gt; /dev/null || oc new-app . --name=$APP&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># create a new application from the image in the OpenShift registry</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#34;oc start-build $APP --from-dir=. --follow || sleep 3s&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># start a new build</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#e6db74">&#34;oc get routes $APP 2&gt; /dev/null || oc expose service $APP --hostname=$APP_HOST&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># expose our application</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">develop</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;&lt;</span>: <span style="color:#75715e">*deploy</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">deployToOpenShift</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">docker</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">APP</span>: <span style="color:#ae81ff">slides-openshift</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">APP_HOST</span>: <span style="color:#ae81ff">demo-slides.$OPENSHIFT_DOMAIN</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">environment</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">develop</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://demo-slides.$OPENSHIFT_DOMAIN</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">except</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">master</span>
</span></span></code></pre></div><h3 id="create-a-kubernetes-runner-in-openshift-from-template">Create a kubernetes runner in Openshift from template:</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>wget https://raw.githubusercontent.com/devopstales/openshift-examples/master/template/gitlab-runner-template.yml
</span></span><span style="display:flex;"><span>oc deploy gitlab-runner-template.yml
</span></span></code></pre></div><p>Deploy the template from the gui:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>oc adm policy add-scc-to-user privileged system:serviceaccount:gitlab-rubber:&lt;application-name&gt;-user
</span></span></code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="openshift" term="openshift" label="Openshift" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="devops" term="devops" label="devops" />
                            
                        
                    
                
            
        </entry>
    
</feed>
